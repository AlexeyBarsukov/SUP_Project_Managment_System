#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
require('dotenv').config();
const fs = require('fs');
const path = require('path');
const { Pool } = require('pg');

async function initializeDatabase() {
    console.log('üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    if (!process.env.DB_URL) {
        console.error('‚ùå DB_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
        console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
        Object.keys(process.env)
            .filter(key => key.includes('DB') || key.includes('POSTGRES') || key.includes('DATABASE'))
            .forEach(key => {
                console.log(`  ${key}: ${process.env[key] ? 'SET' : 'NOT SET'}`);
            });
        process.exit(1);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç DB_URL
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ DB_URL...');
    console.log('DB_URL:', process.env.DB_URL.substring(0, 20) + '...');
    
    // –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL
    let isValidUrl = false;
    let urlInfo = {};
    
    try {
        const url = new URL(process.env.DB_URL);
        isValidUrl = true;
        urlInfo = {
            protocol: url.protocol,
            hostname: url.hostname,
            port: url.port,
            database: url.pathname.substring(1),
            username: url.username,
            password: url.password ? '***' : 'not set'
        };
    } catch (error) {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        console.log('‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π URL –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å postgres://
        if (process.env.DB_URL.startsWith('postgres://')) {
            console.log('‚úÖ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å postgres://');
            isValidUrl = true;
            urlInfo = { protocol: 'postgres:', note: '—Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–Ω—è—Ç –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞' };
        } else {
            console.error('‚ùå DB_URL –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å postgres://');
            console.log('–ü–æ–ª–Ω—ã–π DB_URL:', process.env.DB_URL);
            console.log('–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: postgres://user:password@host:port/database');
            process.exit(1);
        }
    }
    
    if (isValidUrl) {
        console.log('‚úÖ DB_URL –ø—Ä–∏–Ω—è—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
        if (urlInfo.hostname) {
            console.log('Host:', urlInfo.hostname);
            console.log('Port:', urlInfo.port || '5432 (default)');
            console.log('Database:', urlInfo.database);
            console.log('Username:', urlInfo.username);
            console.log('Password:', urlInfo.password);
        }
    }

    // –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    const poolConfig = {
        connectionString: process.env.DB_URL,
        ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
        max: 10,
        idleTimeoutMillis: 30000,
        connectionTimeoutMillis: 10000,
        query_timeout: 10000,
        statement_timeout: 10000,
    };
    
    console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
    console.log('SSL:', poolConfig.ssl ? 'enabled' : 'disabled');
    console.log('Max connections:', poolConfig.max);
    console.log('Connection timeout:', poolConfig.connectionTimeoutMillis + 'ms');
    
    const pool = new Pool(poolConfig);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—É–ª–∞
    pool.on('error', (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:', err.message);
        console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', err.code);
    });
    
    pool.on('connect', () => {
        console.log('‚úÖ –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    });

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        const client = await pool.connect();
        await client.query('SELECT 1');
        client.release();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');

        // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        console.log('üìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...');
        const migrationDir = path.join(__dirname, 'db');
        
        if (!fs.existsSync(migrationDir)) {
            console.log('‚ö†Ô∏è –ü–∞–ø–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        const files = fs.readdirSync(migrationDir)
            .filter(file => file.endsWith('.sql'))
            .sort();

        for (const file of files) {
            console.log(`üìÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: ${file}`);
            const sql = fs.readFileSync(path.join(migrationDir, file), 'utf8');
            try {
                await pool.query(sql);
                console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${file} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
            } catch (error) {
                if (error.message.includes('already exists') || error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
                    console.log(`‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è ${file} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                } else {
                    throw error;
                }
            }
        }

        console.log('‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...');
        const result = await pool.query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        `);
        
        console.log('üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
        result.rows.forEach(row => {
            console.log(`  - ${row.table_name}`);
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
        console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        if (error.code === 'ECONNREFUSED') {
            console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã ECONNREFUSED:');
            console.log('- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞');
            console.log('- –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ—Å—Ç –∏–ª–∏ –ø–æ—Ä—Ç');
            console.log('- –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é');
        } else if (error.code === '28P01') {
            console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã 28P01 (authentication failed):');
            console.log('- –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            console.log('- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
        } else if (error.code === '3D000') {
            console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã 3D000 (database does not exist):');
            console.log('- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            console.log('- –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        } else if (error.message.includes('searchParams')) {
            console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ searchParams:');
            console.log('- –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL');
            console.log('- –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º connection string');
            console.log('- –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –ø–∞—Ä–æ–ª–µ');
        }
        
        process.exit(1);
    } finally {
        try {
            await pool.end();
        } catch (endError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞:', endError.message);
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    initializeDatabase()
        .then(() => {
            console.log('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = initializeDatabase;
