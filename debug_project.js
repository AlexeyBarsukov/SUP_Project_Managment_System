const pool = require('./src/db/connection');
const Project = require('./src/db/models/Project');
const User = require('./src/db/models/User');

async function debugProject(projectId) {
    try {
        console.log('=== DEBUG PROJECT INFO ===');
        
        // –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö
        const query = `
            SELECT 
                p.id,
                p.name,
                p.status,
                p.customer_id,
                COUNT(pm.id) as total_managers,
                COUNT(CASE WHEN pm.status = 'accepted' THEN 1 END) as accepted_managers,
                COUNT(CASE WHEN pm.status = 'pending' THEN 1 END) as pending_managers
            FROM projects p
            LEFT JOIN project_managers pm ON p.id = pm.project_id
            WHERE p.id = $1
            GROUP BY p.id, p.name, p.status, p.customer_id
        `;
        
        const result = await pool.query(query, [projectId]);
        
        if (result.rows.length === 0) {
            console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        const project = result.rows[0];
        console.log('üìã –ü—Ä–æ–µ–∫—Ç:', project.name);
        console.log('üÜî ID:', project.id);
        console.log('üìä –°—Ç–∞—Ç—É—Å:', project.status);
        console.log('üë§ Customer ID:', project.customer_id);
        console.log('üë• –í—Å–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', project.total_managers);
        console.log('‚úÖ –ü—Ä–∏–Ω—è—Ç—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', project.accepted_managers);
        console.log('‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', project.pending_managers);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö
        const managersQuery = `
            SELECT 
                pm.id,
                pm.manager_id,
                pm.status,
                u.username,
                u.first_name,
                u.last_name
            FROM project_managers pm
            JOIN users u ON pm.manager_id = u.id
            WHERE pm.project_id = $1
            ORDER BY pm.status, u.username
        `;
        
        const managersResult = await pool.query(managersQuery, [projectId]);
        
        console.log('\nüë®‚Äçüíº –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö:');
        if (managersResult.rows.length === 0) {
            console.log('   –ù–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤');
        } else {
            managersResult.rows.forEach((manager, index) => {
                console.log(`   ${index + 1}. @${manager.username} (${manager.first_name} ${manager.last_name || ''}) - ${manager.status}`);
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞":');
        
        const allowedStatuses = ['active', 'searching_executors'];
        const statusAllowed = allowedStatuses.includes(project.status);
        console.log(`   1. –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω (${project.status}): ${statusAllowed ? '‚úÖ' : '‚ùå'}`);
        
        const otherManagers = managersResult.rows.filter(m => m.manager_id !== project.customer_id);
        const noOtherManagers = otherManagers.length === 0;
        console.log(`   2. –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–∫—Ä–æ–º–µ –∑–∞–∫–∞–∑—á–∏–∫–∞): ${noOtherManagers ? '‚úÖ' : '‚ùå'} (${otherManagers.length} –¥—Ä—É–≥–∏—Ö)`);
        
        const underLimit = project.total_managers < 3;
        console.log(`   3. –ú–µ–Ω—å—à–µ 3 –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: ${underLimit ? '‚úÖ' : '‚ùå'} (${project.total_managers}/3)`);
        
        const shouldShowButton = statusAllowed && noOtherManagers && underLimit;
        console.log(`\nüéØ –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è: ${shouldShowButton ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        
        if (!shouldShowButton) {
            console.log('\nüö´ –ü—Ä–∏—á–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–Ω–æ–ø–∫–∏:');
            if (!statusAllowed) {
                console.log('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞');
            }
            if (!noOtherManagers) {
                console.log('   - –ï—Å—Ç—å –¥—Ä—É–≥–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ');
            }
            if (!underLimit) {
                console.log('   - –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (3)');
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    } finally {
        await pool.end();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
async function testProjectPreview() {
    try {
        console.log('\n=== –¢–ï–°–¢ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ì–û –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–ê –ü–†–û–ï–ö–¢–ê ===');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç 36
        const project = await Project.findById(36);
        if (!project) {
            console.log('‚ùå –ü—Ä–æ–µ–∫—Ç 36 –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        console.log('üìã –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω:');
        console.log('- ID:', project.id);
        console.log('- –ù–∞–∑–≤–∞–Ω–∏–µ:', project.name);
        console.log('- –°—Ç–∞—Ç—É—Å:', project.status);
        console.log('- –ó–∞–∫–∞–∑—á–∏–∫ ID:', project.customer_id);
        console.log('- –û–ø–∏—Å–∞–Ω–∏–µ:', project.description);
        console.log('- –ë—é–¥–∂–µ—Ç:', project.budget);
        console.log('- –°—Ä–æ–∫:', project.deadline);
        console.log('- –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:', project.requirements);
        console.log('- –£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã:', project.work_conditions);
        console.log('- –î–æ–ø. –ø–æ–∂–µ–ª–∞–Ω–∏—è:', project.additional_wishes);
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
        const customer = await User.findById(project.customer_id);
        if (customer) {
            console.log('\nüë§ –ó–∞–∫–∞–∑—á–∏–∫:');
            console.log('- ID:', customer.id);
            console.log('- Username:', customer.username);
            console.log('- –ò–º—è:', customer.first_name, customer.last_name);
        }
        
        console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', error);
    }
}

// –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const projectId = process.argv[2] ? parseInt(process.argv[2]) : 36;

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
debugProject(projectId)
    .then(() => {
        console.log('\n=== –û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===');
        return testProjectPreview();
    })
    .then(() => {
        console.log('\n=== –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ ===');
        process.exit(0);
    })
    .catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        process.exit(1);
    }); 