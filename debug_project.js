const pool = require('./src/db/connection');
const Project = require('./src/db/models/Project');
const User = require('./src/db/models/User');

async function debugProject(projectId) {
    try {
        console.log('=== DEBUG PROJECT INFO ===');
        
        // –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö
        const query = `
            SELECT 
                p.id,
                p.name,
                p.status,
                p.customer_id,
                COUNT(pm.id) as total_managers,
                COUNT(CASE WHEN pm.status = 'accepted' THEN 1 END) as accepted_managers,
                COUNT(CASE WHEN pm.status = 'pending' THEN 1 END) as pending_managers
            FROM projects p
            LEFT JOIN project_managers pm ON p.id = pm.project_id
            WHERE p.id = $1
            GROUP BY p.id, p.name, p.status, p.customer_id
        `;
        
        const result = await pool.query(query, [projectId]);
        
        if (result.rows.length === 0) {
            console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        const project = result.rows[0];
        console.log('üìã –ü—Ä–æ–µ–∫—Ç:', project.name);
        console.log('üÜî ID:', project.id);
        console.log('üìä –°—Ç–∞—Ç—É—Å:', project.status);
        console.log('üë§ Customer ID:', project.customer_id);
        console.log('üë• –í—Å–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', project.total_managers);
        console.log('‚úÖ –ü—Ä–∏–Ω—è—Ç—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', project.accepted_managers);
        console.log('‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', project.pending_managers);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö
        const managersQuery = `
            SELECT 
                pm.id,
                pm.manager_id,
                pm.status,
                u.username,
                u.first_name,
                u.last_name
            FROM project_managers pm
            JOIN users u ON pm.manager_id = u.id
            WHERE pm.project_id = $1
            ORDER BY pm.status, u.username
        `;
        
        const managersResult = await pool.query(managersQuery, [projectId]);
        
        console.log('\nüë®‚Äçüíº –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö:');
        if (managersResult.rows.length === 0) {
            console.log('   –ù–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤');
        } else {
            managersResult.rows.forEach((manager, index) => {
                console.log(`   ${index + 1}. @${manager.username} (${manager.first_name} ${manager.last_name || ''}) - ${manager.status}`);
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞":');
        
        const allowedStatuses = ['active', 'searching_executors'];
        const statusAllowed = allowedStatuses.includes(project.status);
        console.log(`   1. –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω (${project.status}): ${statusAllowed ? '‚úÖ' : '‚ùå'}`);
        
        const otherManagers = managersResult.rows.filter(m => m.manager_id !== project.customer_id);
        const noOtherManagers = otherManagers.length === 0;
        console.log(`   2. –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–∫—Ä–æ–º–µ –∑–∞–∫–∞–∑—á–∏–∫–∞): ${noOtherManagers ? '‚úÖ' : '‚ùå'} (${otherManagers.length} –¥—Ä—É–≥–∏—Ö)`);
        
        const underLimit = project.total_managers < 3;
        console.log(`   3. –ú–µ–Ω—å—à–µ 3 –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: ${underLimit ? '‚úÖ' : '‚ùå'} (${project.total_managers}/3)`);
        
        const shouldShowButton = statusAllowed && noOtherManagers && underLimit;
        console.log(`\nüéØ –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è: ${shouldShowButton ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        
        if (!shouldShowButton) {
            console.log('\nüö´ –ü—Ä–∏—á–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–Ω–æ–ø–∫–∏:');
            if (!statusAllowed) {
                console.log('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞');
            }
            if (!noOtherManagers) {
                console.log('   - –ï—Å—Ç—å –¥—Ä—É–≥–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ');
            }
            if (!underLimit) {
                console.log('   - –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (3)');
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
async function testProjectPreview() {
    try {
        console.log('\n=== –¢–ï–°–¢ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ì–û –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–ê –ü–†–û–ï–ö–¢–ê ===');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç 39
        const project = await Project.findById(39);
        if (!project) {
            console.log('‚ùå –ü—Ä–æ–µ–∫—Ç 39 –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        console.log('üìã –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω:');
        console.log('- ID:', project.id);
        console.log('- –ù–∞–∑–≤–∞–Ω–∏–µ:', project.name);
        console.log('- –°—Ç–∞—Ç—É—Å:', project.status);
        console.log('- –ó–∞–∫–∞–∑—á–∏–∫ ID:', project.customer_id);
        console.log('- –û–ø–∏—Å–∞–Ω–∏–µ:', project.description);
        console.log('- –ë—é–¥–∂–µ—Ç:', project.budget);
        console.log('- –°—Ä–æ–∫:', project.deadline);
        console.log('- –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:', project.requirements);
        console.log('- –£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã:', project.work_conditions);
        console.log('- –î–æ–ø. –ø–æ–∂–µ–ª–∞–Ω–∏—è:', project.additional_wishes);
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
        const customer = await User.findById(project.customer_id);
        if (customer) {
            console.log('\nüë§ –ó–∞–∫–∞–∑—á–∏–∫:');
            console.log('- ID:', customer.id);
            console.log('- Username:', customer.username);
            console.log('- –ò–º—è:', customer.first_name, customer.last_name);
        }
        
        console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
async function testProjectFields() {
    try {
        console.log('\n=== –¢–ï–°–¢ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–û–õ–ï–ô –ü–†–û–ï–ö–¢–ê ===');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç 39
        const project = await Project.findById(39);
        if (!project) {
            console.log('‚ùå –ü—Ä–æ–µ–∫—Ç 39 –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        console.log('üìã –í—Å–µ –ø–æ–ª—è –ø—Ä–æ–µ–∫—Ç–∞:');
        console.log('- ID:', project.id);
        console.log('- –ù–∞–∑–≤–∞–Ω–∏–µ:', project.name);
        console.log('- –û–ø–∏—Å–∞–Ω–∏–µ:', project.description);
        console.log('- –°—Ç–∞—Ç—É—Å:', project.status);
        console.log('- –ó–∞–∫–∞–∑—á–∏–∫ ID:', project.customer_id);
        console.log('- –ë—é–¥–∂–µ—Ç:', project.budget);
        console.log('- –°—Ä–æ–∫:', project.deadline);
        console.log('- –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É:', project.manager_requirements);
        console.log('- –£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã:', project.work_conditions);
        console.log('- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:', project.additional_notes);
        console.log('- –°–æ–∑–¥–∞–Ω:', project.created_at);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        console.log('\n‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è:');
        if (project.budget) console.log('‚úì –ë—é–¥–∂–µ—Ç');
        if (project.deadline) console.log('‚úì –°—Ä–æ–∫');
        if (project.manager_requirements) console.log('‚úì –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É');
        if (project.work_conditions) console.log('‚úì –£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã');
        if (project.additional_notes) console.log('‚úì –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è');
        
        console.log('\n‚ùå –ü—É—Å—Ç—ã–µ –ø–æ–ª—è:');
        if (!project.budget) console.log('‚úó –ë—é–¥–∂–µ—Ç');
        if (!project.deadline) console.log('‚úó –°—Ä–æ–∫');
        if (!project.manager_requirements) console.log('‚úó –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É');
        if (!project.work_conditions) console.log('‚úó –£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã');
        if (!project.additional_notes) console.log('‚úó –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è');
        
        console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª–µ–π:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ –æ—Ç–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
async function testManagerDecline() {
    try {
        console.log('\n=== –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –û–¢–ö–ê–ó–ê –ú–ï–ù–ï–î–ñ–ï–†–ê ===');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç 39
        const project = await Project.findById(39);
        if (!project) {
            console.log('‚ùå –ü—Ä–æ–µ–∫—Ç 39 –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        console.log('üìã –ü—Ä–æ–µ–∫—Ç –¥–æ –æ—Ç–∫–∞–∑–∞:');
        console.log('- ID:', project.id);
        console.log('- –ù–∞–∑–≤–∞–Ω–∏–µ:', project.name);
        console.log('- –°—Ç–∞—Ç—É—Å:', project.status);
        console.log('- –ó–∞–∫–∞–∑—á–∏–∫ ID:', project.customer_id);
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        const ProjectManager = require('./src/db/models/ProjectManager');
        const managers = await ProjectManager.findByProject(project.id);
        
        console.log('\nüë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:');
        for (const m of managers) {
            const user = await User.findById(m.manager_id);
            console.log(`- ${user?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: ${m.manager_id}) - —Å—Ç–∞—Ç—É—Å: ${m.status}`);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        const members = await Project.getMembers(project.id);
        console.log('\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:');
        for (const m of members) {
            console.log(`- ${m.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: ${m.id}) - —Ä–æ–ª—å: ${m.member_role}`);
        }
        
        console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
async function testManagerDuplicationFix() {
    try {
        console.log('\n=== –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ú–ï–ù–ï–î–ñ–ï–†–û–í ===');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç 39
        const project = await Project.findById(39);
        if (!project) {
            console.log('‚ùå –ü—Ä–æ–µ–∫—Ç 39 –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        console.log('üìã –ü—Ä–æ–µ–∫—Ç:');
        console.log('- ID:', project.id);
        console.log('- –ù–∞–∑–≤–∞–Ω–∏–µ:', project.name);
        console.log('- –°—Ç–∞—Ç—É—Å:', project.status);
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        const ProjectManager = require('./src/db/models/ProjectManager');
        const managers = await ProjectManager.findByProject(project.id);
        
        console.log('\nüë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –≤ project_managers:');
        for (const m of managers) {
            const user = await User.findById(m.manager_id);
            console.log(`- ${user?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: ${m.manager_id}) - —Å—Ç–∞—Ç—É—Å: ${m.status} - –∑–∞–ø–∏—Å—å ID: ${m.id}`);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        const members = await Project.getMembers(project.id);
        console.log('\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ project_members:');
        for (const m of members) {
            console.log(`- ${m.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: ${m.id}) - —Ä–æ–ª—å: ${m.member_role}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        const managerIds = managers.map(m => m.manager_id);
        const uniqueManagerIds = [...new Set(managerIds)];
        
        if (managerIds.length !== uniqueManagerIds.length) {
            console.log('\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´ –ú–ï–ù–ï–î–ñ–ï–†–û–í!');
            console.log('–î—É–±–ª–∏–∫–∞—Ç—ã:', managerIds.filter((id, index) => managerIds.indexOf(id) !== index));
        } else {
            console.log('\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
        }
        
        console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤—ã—Ö–æ–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
async function testManagerLeaveProject() {
    try {
        console.log('\n=== –¢–ï–°–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –í–´–•–û–î–ê –ú–ï–ù–ï–î–ñ–ï–†–ê –ò–ó –ü–†–û–ï–ö–¢–ê ===');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç 39
        const project = await Project.findById(39);
        if (!project) {
            console.log('‚ùå –ü—Ä–æ–µ–∫—Ç 39 –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        console.log('üìã –ü—Ä–æ–µ–∫—Ç:');
        console.log('- ID:', project.id);
        console.log('- –ù–∞–∑–≤–∞–Ω–∏–µ:', project.name);
        console.log('- –°—Ç–∞—Ç—É—Å:', project.status);
        console.log('- –ó–∞–∫–∞–∑—á–∏–∫ ID:', project.customer_id);
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        const ProjectManager = require('./src/db/models/ProjectManager');
        const managers = await ProjectManager.findByProject(project.id);
        
        console.log('\nüë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –≤ project_managers:');
        for (const m of managers) {
            const user = await User.findById(m.manager_id);
            console.log(`- ${user?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: ${m.manager_id}) - —Å—Ç–∞—Ç—É—Å: ${m.status} - –∑–∞–ø–∏—Å—å ID: ${m.id}`);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        const members = await Project.getMembers(project.id);
        console.log('\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ project_members:');
        for (const m of members) {
            console.log(`- ${m.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: ${m.id}) - —Ä–æ–ª—å: ${m.member_role}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞
        const acceptedManagers = managers.filter(m => m.status === 'accepted');
        const canLeave = project.status !== 'completed' && project.status !== 'archived';
        
        console.log('\nüîç –£—Å–ª–æ–≤–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞:');
        console.log('- –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã—Ö–æ–¥:', canLeave);
        console.log('- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', acceptedManagers.length);
        console.log('- –ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω:', project.status !== 'completed');
        console.log('- –ü—Ä–æ–µ–∫—Ç –Ω–µ –≤ –∞—Ä—Ö–∏–≤–µ:', project.status !== 'archived');
        
        if (acceptedManagers.length > 0) {
            console.log('\n‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–µ–∫—Ç');
            for (const m of acceptedManagers) {
                const user = await User.findById(m.manager_id);
                console.log(`- @${user?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–µ–∫—Ç`);
            }
        } else {
            console.log('\n‚ùå –ù–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –≤—ã—Ö–æ–¥–∞');
        }
        
        console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
async function testDynamicRoleCheck() {
    try {
        console.log('\n=== –¢–ï–°–¢ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ô –ü–†–û–í–ï–†–ö–ò –†–û–õ–ï–ô –ú–ï–ù–ï–î–ñ–ï–†–û–í ===');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç 39
        const project = await Project.findById(39);
        if (!project) {
            console.log('‚ùå –ü—Ä–æ–µ–∫—Ç 39 –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        console.log('üìã –ü—Ä–æ–µ–∫—Ç:');
        console.log('- ID:', project.id);
        console.log('- –ù–∞–∑–≤–∞–Ω–∏–µ:', project.name);
        console.log('- –°—Ç–∞—Ç—É—Å:', project.status);
        console.log('- –ó–∞–∫–∞–∑—á–∏–∫ ID:', project.customer_id);
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
        const customer = await User.findById(project.customer_id);
        console.log('\nüë§ –ó–∞–∫–∞–∑—á–∏–∫:');
        console.log('- ID:', customer.id);
        console.log('- Username:', customer.username);
        console.log('- –†–æ–ª—å:', customer.main_role);
        console.log('- –í–∏–¥–∏–º—ã–π:', customer.is_visible);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
        const allManagers = await User.findVisibleByRole('manager');
        console.log('\nüë®‚Äçüíº –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ:');
        for (const m of allManagers) {
            console.log(`- @${m.username} (ID: ${m.id}) - —Ä–æ–ª—å: ${m.main_role} - –≤–∏–¥–∏–º—ã–π: ${m.is_visible}`);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        const ProjectManager = require('./src/db/models/ProjectManager');
        const projectManagers = await ProjectManager.findByProject(project.id);
        console.log('\nüë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:');
        for (const m of projectManagers) {
            const user = await User.findById(m.manager_id);
            console.log(`- @${user?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: ${m.manager_id}) - —Å—Ç–∞—Ç—É—Å: ${m.status} - —Ä–æ–ª—å: ${user?.main_role}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        const availableManagers = allManagers.filter(m => m.id !== customer.id);
        console.log('\n‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:');
        for (const m of availableManagers) {
            console.log(`- @${m.username} (ID: ${m.id}) - —Ä–æ–ª—å: ${m.main_role} - –≤–∏–¥–∏–º—ã–π: ${m.is_visible}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º:');
        
        // 1. –ú–µ–Ω–µ–¥–∂–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–µ–Ω–∏–ª–∏ —Ä–æ–ª—å
        const roleChangedManagers = allManagers.filter(m => m.main_role !== 'manager');
        if (roleChangedManagers.length > 0) {
            console.log('‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–µ–Ω–∏–ª–∏ —Ä–æ–ª—å:');
            for (const m of roleChangedManagers) {
                console.log(`  - @${m.username} (ID: ${m.id}) - —Ç–µ–∫—É—â–∞—è —Ä–æ–ª—å: ${m.main_role}`);
            }
        } else {
            console.log('‚úÖ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–æ–ª—å');
        }
        
        // 2. –ù–µ–≤–∏–¥–∏–º—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        const invisibleManagers = allManagers.filter(m => !m.is_visible);
        if (invisibleManagers.length > 0) {
            console.log('‚ö†Ô∏è –ù–µ–≤–∏–¥–∏–º—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã:');
            for (const m of invisibleManagers) {
                console.log(`  - @${m.username} (ID: ${m.id}) - –≤–∏–¥–∏–º—ã–π: ${m.is_visible}`);
            }
        } else {
            console.log('‚úÖ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –≤–∏–¥–∏–º—ã–µ');
        }
        
        // 3. –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–æ–ª—å—é
        const projectManagersWithWrongRole = [];
        for (const m of projectManagers) {
            const user = await User.findById(m.manager_id);
            if (user && user.main_role !== 'manager') {
                projectManagersWithWrongRole.push({ user, status: m.status });
            }
        }
        
        if (projectManagersWithWrongRole.length > 0) {
            console.log('‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–æ–ª—å—é:');
            for (const m of projectManagersWithWrongRole) {
                console.log(`  - @${m.user.username} (ID: ${m.user.id}) - —Ä–æ–ª—å: ${m.user.main_role} - —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ–µ–∫—Ç–µ: ${m.status}`);
            }
        } else {
            console.log('‚úÖ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–æ–ª—å');
        }
        
        console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–º–µ–Ω—ã —Ä–æ–ª–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
async function testRoleChangeSimulation() {
    try {
        console.log('\n=== –¢–ï–°–¢ –°–ò–ú–£–õ–Ø–¶–ò–ò –°–ú–ï–ù–´ –†–û–õ–ò ===');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Rimma_30
        const user = await User.findByTelegramId(2); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ telegram_id = 2
        if (!user) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Rimma_30 –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        console.log('üë§ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
        console.log('- ID:', user.id);
        console.log('- Username:', user.username);
        console.log('- –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:', user.main_role);
        console.log('- –í–∏–¥–∏–º—ã–π:', user.is_visible);
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–º–µ–Ω—É —Ä–æ–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        console.log('\nüîÑ –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–º–µ–Ω—É —Ä–æ–ª–∏ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...');
        const updatedUser = await User.updateMainRole(user.telegram_id, 'manager');
        
        console.log('‚úÖ –†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:', updatedUser.main_role);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –≤–∏–¥–∏–º—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        const visibleManagers = await User.findVisibleByRole('manager');
        const isNowVisibleManager = visibleManagers.some(m => m.id === user.id);
        
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');
        console.log('- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –≤–∏–¥–∏–º—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', isNowVisibleManager);
        console.log('- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', visibleManagers.length);
        
        // –¢–µ–ø–µ—Ä—å —Å–∏–º—É–ª–∏—Ä—É–µ–º —Å–º–µ–Ω—É —Ä–æ–ª–∏ –Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞
        console.log('\nüîÑ –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–º–µ–Ω—É —Ä–æ–ª–∏ –Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞...');
        const updatedUser2 = await User.updateMainRole(user.telegram_id, 'customer');
        
        console.log('‚úÖ –†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:', updatedUser2.main_role);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        const visibleManagersAfter = await User.findVisibleByRole('manager');
        const isStillVisibleManager = visibleManagersAfter.some(m => m.id === user.id);
        
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');
        console.log('- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –≤ —Å–ø–∏—Å–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', isStillVisibleManager);
        console.log('- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã:', visibleManagersAfter.length);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç 39
        const project = await Project.findById(39);
        if (project) {
            const ProjectManager = require('./src/db/models/ProjectManager');
            const projectManagers = await ProjectManager.findByProject(project.id);
            
            console.log('\nüìã –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ 39:');
            console.log('- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ:', projectManagers.length);
            
            for (const m of projectManagers) {
                const managerUser = await User.findById(m.manager_id);
                console.log(`  - @${managerUser?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: ${m.manager_id}) - —Ä–æ–ª—å: ${managerUser?.main_role} - —Å—Ç–∞—Ç—É—Å: ${m.status}`);
            }
        }
        
        console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–º–µ–Ω—ã —Ä–æ–ª–∏:', error);
    }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
async function testManagerDisplay() {
    try {
        console.log('\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ ===');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤–∏–¥–∏–º—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        const managers = await User.findVisibleByRole('manager');
        console.log(`–ù–∞–π–¥–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: ${managers.length}`);
        
        for (const m of managers) {
            console.log(`\n--- –ú–µ–Ω–µ–¥–∂–µ—Ä: @${m.username} ---`);
            console.log(`–ò–º—è: ${m.first_name || ''} ${m.last_name || ''}`);
            console.log(`–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${m.specialization || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
            console.log(`–û–ø—ã—Ç: ${m.experience || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
            console.log(`–ù–∞–≤—ã–∫–∏: ${m.skills || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}`);
            console.log(`–ó–∞—Ä–ø–ª–∞—Ç–∞: ${m.salary_range || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
            console.log(`–ö–æ–Ω—Ç–∞–∫—Ç—ã: ${m.contacts || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}`);
            console.log(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${m.achievements || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}`);
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
        console.log('\n=== –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ ===');
        let list = 'üë®‚Äçüíº <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b>\n\n';
        for (const m of managers) {
            let desc = [];
            if (m.specialization) desc.push(m.specialization);
            if (m.experience) desc.push(m.experience);
            if (m.skills) {
                let skills = m.skills;
                if (typeof skills === 'string') {
                    try {
                        const arr = JSON.parse(skills);
                        if (Array.isArray(arr)) skills = arr.join(', ');
                    } catch { /* ignore */ }
                }
                desc.push(`–ù–∞–≤—ã–∫–∏: ${skills}`);
            }
            list += `‚Ä¢ @${m.username} ‚Äî ${m.first_name || ''} ${m.last_name || ''}`;
            if (desc.length) list += `\n   ${desc.join(' | ')}`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            let additionalInfo = [];
            if (m.salary_range) additionalInfo.push(`üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${m.salary_range}`);
            if (m.contacts) additionalInfo.push(`üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${m.contacts}`);
            
            if (additionalInfo.length > 0) {
                list += `\n   ${additionalInfo.join(' | ')}`;
            }
            
            list += '\n';
        }
        
        console.log(list);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', error);
    }
}

// –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const projectId = process.argv[2] ? parseInt(process.argv[2]) : 39;

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
debugProject(projectId)
    .then(() => {
        console.log('\n=== –û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===');
        return testProjectPreview();
    })
    .then(() => {
        console.log('\n=== –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ ===');
        return testProjectFields();
    })
    .then(() => {
        console.log('\n=== –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ ===');
        return testManagerDecline();
    })
    .then(() => {
        console.log('\n=== –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ ===');
        return testManagerDuplicationFix();
    })
    .then(() => {
        console.log('\n=== –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ ===');
        return testManagerLeaveProject();
    })
    .then(() => {
        console.log('\n=== –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ ===');
        return testDynamicRoleCheck();
    })
    .then(() => {
        console.log('\n=== –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ ===');
        return testRoleChangeSimulation();
    })
    .then(() => {
        console.log('\n=== –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ ===');
        return testManagerDisplay();
    })
    .then(() => {
        console.log('\n=== –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ ===');
        process.exit(0);
    })
    .catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        process.exit(1);
    }); 