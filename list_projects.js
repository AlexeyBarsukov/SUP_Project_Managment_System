const pool = require('./src/db/connection');

async function listProjects() {
    try {
        console.log('=== –°–ü–ò–°–û–ö –í–°–ï–• –ü–†–û–ï–ö–¢–û–í ===');
        
        const query = `
            SELECT 
                p.id,
                p.name,
                p.status,
                p.customer_id,
                u.username as customer_username,
                COUNT(pm.id) as total_managers
            FROM projects p
            LEFT JOIN users u ON p.customer_id = u.id
            LEFT JOIN project_managers pm ON p.id = pm.project_id
            GROUP BY p.id, p.name, p.status, p.customer_id, u.username
            ORDER BY p.id DESC
            LIMIT 20
        `;
        
        const result = await pool.query(query);
        
        if (result.rows.length === 0) {
            console.log('‚ùå –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
            return;
        }
        
        console.log('üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã:');
        result.rows.forEach((project, index) => {
            console.log(`   ${index + 1}. ID: ${project.id} | "${project.name}" | –°—Ç–∞—Ç—É—Å: ${project.status} | –ó–∞–∫–∞–∑—á–∏–∫: @${project.customer_username} | –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: ${project.total_managers}`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    } finally {
        await pool.end();
    }
}

listProjects(); 