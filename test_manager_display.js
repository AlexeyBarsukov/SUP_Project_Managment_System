const pool = require('./src/db/connection');
const User = require('./src/db/models/User');

async function testAllManagerDisplays() {
    try {
        console.log('=== –¢–ï–°–¢ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ú–ï–ù–ï–î–ñ–ï–†–û–í –í–û –í–°–ï–• –ú–ï–°–¢–ê–• ===\n');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤–∏–¥–∏–º—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        const managers = await User.findVisibleByRole('manager');
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: ${managers.length}\n`);
        
        for (const m of managers) {
            console.log(`üë®‚Äçüíº –ú–ï–ù–ï–î–ñ–ï–†: @${m.username}`);
            console.log(`   –ò–º—è: ${m.first_name || ''} ${m.last_name || ''}`);
            console.log(`   –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${m.specialization || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
            console.log(`   –û–ø—ã—Ç: ${m.experience || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
            console.log(`   –ù–∞–≤—ã–∫–∏: ${m.skills || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}`);
            console.log(`   üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${m.salary_range || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
            console.log(`   üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${m.contacts || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}`);
            console.log(`   –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${m.achievements || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}`);
            console.log('');
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        console.log('=== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –†–ê–ó–ù–´–• –°–¶–ï–ù–ê–†–ò–ï–í ===\n');
        
        // 1. –í—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        console.log('1Ô∏è‚É£ –í–´–ë–û–† –û–°–ù–û–í–ù–û–ì–û –ú–ï–ù–ï–î–ñ–ï–†–ê:');
        let list1 = 'üë®‚Äçüíº <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b>\n\n';
        for (const m of managers) {
            let desc = [];
            if (m.specialization) desc.push(m.specialization);
            if (m.experience) desc.push(m.experience);
            if (m.skills) {
                let skills = m.skills;
                if (typeof skills === 'string') {
                    try {
                        const arr = JSON.parse(skills);
                        if (Array.isArray(arr)) skills = arr.join(', ');
                    } catch { /* ignore */ }
                }
                desc.push(`–ù–∞–≤—ã–∫–∏: ${skills}`);
            }
            list1 += `‚Ä¢ @${m.username} ‚Äî ${m.first_name || ''} ${m.last_name || ''}`;
            if (desc.length) list1 += `\n   ${desc.join(' | ')}`;
            
            let additionalInfo = [];
            if (m.salary_range) additionalInfo.push(`üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${m.salary_range}`);
            if (m.contacts) additionalInfo.push(`üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${m.contacts}`);
            
            if (additionalInfo.length > 0) {
                list1 += `\n   ${additionalInfo.join(' | ')}`;
            }
            
            list1 += '\n';
        }
        console.log(list1);
        
        // 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        console.log('2Ô∏è‚É£ –î–û–ë–ê–í–õ–ï–ù–ò–ï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ì–û –ú–ï–ù–ï–î–ñ–ï–†–ê:');
        let list2 = '‚ûï <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b>\n\n';
        for (const m of managers) {
            let desc = [];
            if (m.specialization) desc.push(m.specialization);
            if (m.experience) desc.push(m.experience);
            if (m.skills) {
                let skills = m.skills;
                if (typeof skills === 'string') {
                    try {
                        const arr = JSON.parse(skills);
                        if (Array.isArray(arr)) skills = arr.join(', ');
                    } catch { /* ignore */ }
                }
                desc.push(`–ù–∞–≤—ã–∫–∏: ${skills}`);
            }
            list2 += `‚Ä¢ @${m.username} ‚Äî ${m.first_name || ''} ${m.last_name || ''}`;
            if (desc.length) list2 += `\n   ${desc.join(' | ')}`;
            
            let additionalInfo = [];
            if (m.salary_range) additionalInfo.push(`üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${m.salary_range}`);
            if (m.contacts) additionalInfo.push(`üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${m.contacts}`);
            
            if (additionalInfo.length > 0) {
                list2 += `\n   ${additionalInfo.join(' | ')}`;
            }
            
            list2 += '\n';
        }
        console.log(list2);
        
        // 3. –°–º–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        console.log('3Ô∏è‚É£ –°–ú–ï–ù–ê –ú–ï–ù–ï–î–ñ–ï–†–ê:');
        let list3 = `üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã @old_manager:</b>\n\n`;
        for (const m of managers) {
            let desc = [];
            if (m.specialization) desc.push(m.specialization);
            if (m.experience) desc.push(m.experience);
            if (m.skills) {
                let skills = m.skills;
                if (typeof skills === 'string') {
                    try {
                        const arr = JSON.parse(skills);
                        if (Array.isArray(arr)) skills = arr.join(', ');
                    } catch { /* ignore */ }
                }
                desc.push(`–ù–∞–≤—ã–∫–∏: ${skills}`);
            }
            list3 += `‚Ä¢ @${m.username} ‚Äî ${m.first_name || ''} ${m.last_name || ''}`;
            if (desc.length) list3 += `\n   ${desc.join(' | ')}`;
            
            let additionalInfo = [];
            if (m.salary_range) additionalInfo.push(`üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${m.salary_range}`);
            if (m.contacts) additionalInfo.push(`üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${m.contacts}`);
            
            if (additionalInfo.length > 0) {
                list3 += `\n   ${additionalInfo.join(' | ')}`;
            }
            
            list3 += '\n';
        }
        console.log(list3);
        
        // 4. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        console.log('4Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê:');
        let list4 = '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:\n';
        for (const m of managers) {
            let desc = [];
            if (m.specialization) desc.push(m.specialization);
            if (m.experience) desc.push(m.experience);
            if (m.skills) {
                let skills = m.skills;
                if (typeof skills === 'string') {
                    try {
                        const arr = JSON.parse(skills);
                        if (Array.isArray(arr)) skills = arr.join(', ');
                    } catch { /* ignore */ }
                }
                desc.push(`–ù–∞–≤—ã–∫–∏: ${skills}`);
            }
            if (m.achievements) desc.push(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${m.achievements}`);
            list4 += `‚Ä¢ @${m.username} ‚Äî ${m.first_name || ''} ${m.last_name || ''}`;
            if (desc.length) list4 += `\n   ${desc.join(' | ')}`;
            
            let additionalInfo = [];
            if (m.salary_range) additionalInfo.push(`üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${m.salary_range}`);
            if (m.contacts) additionalInfo.push(`üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${m.contacts}`);
            
            if (additionalInfo.length > 0) {
                list4 += `\n   ${additionalInfo.join(' | ')}`;
            }
            
            list4 += '\n';
        }
        console.log(list4);
        
        console.log('‚úÖ –í–°–ï –§–û–†–ú–ê–¢–´ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´ –£–°–ü–ï–®–ù–û!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAllManagerDisplays(); 