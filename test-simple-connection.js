#!/usr/bin/env node

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Pool
require('dotenv').config();
const { Client } = require('pg');

async function testSimpleConnection() {
    console.log('üîç –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    if (!process.env.DB_URL) {
        console.error('‚ùå DB_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
        process.exit(1);
    }
    
    console.log('DB_URL:', process.env.DB_URL.substring(0, 30) + '...');
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const connectionMethods = [
        {
            name: '–° connectionString',
            config: {
                connectionString: process.env.DB_URL,
                ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
            }
        },
        {
            name: '–° —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏',
            config: (() => {
                try {
                    const url = new URL(process.env.DB_URL);
                    return {
                        host: url.hostname,
                        port: url.port || 5432,
                        database: url.pathname.substring(1),
                        user: url.username,
                        password: url.password,
                        ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
                    };
                } catch (error) {
                    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å URL –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
                    return null;
                }
            })()
        }
    ];
    
    for (const method of connectionMethods) {
        if (!method.config) continue;
        
        console.log(`\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${method.name}`);
        
        const client = new Client(method.config);
        
        try {
            await client.connect();
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
            
            const result = await client.query('SELECT version()');
            console.log('üìä –í–µ—Ä—Å–∏—è PostgreSQL:', result.rows[0].version.split(' ')[0]);
            
            await client.end();
            console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            return;
            
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
            console.log('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
            
            if (error.message.includes('searchParams')) {
                console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ searchParams - –ø–æ–ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Ç–æ–¥');
            }
        }
    }
    
    console.log('\n‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DB_URL');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL');
    console.log('4. –í–æ–∑–º–æ–∂–Ω–æ, –≤ –ø–∞—Ä–æ–ª–µ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã');
    
    process.exit(1);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    testSimpleConnection()
        .catch((error) => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = testSimpleConnection;
