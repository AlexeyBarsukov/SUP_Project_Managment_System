const { Pool } = require('pg');
const pool = new Pool({
    host: 'localhost',
    port: 5432,
    database: 'project_management',
    user: 'postgres',
    password: 'password'
});

async function testDeclineProject() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞ –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞...\n');
    
    try {
        const client = await pool.connect();
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
        const customerResult = await client.query(`
            SELECT id, telegram_id, username, first_name, last_name, main_role 
            FROM users 
            WHERE main_role = 'customer' 
            LIMIT 1
        `);
        
        if (customerResult.rows.length === 0) {
            console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é customer');
            return;
        }
        
        const customer = customerResult.rows[0];
        console.log('‚úÖ –ó–∞–∫–∞–∑—á–∏–∫:', customer.username);
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        const managerResult = await client.query(`
            SELECT id, telegram_id, username, first_name, last_name, main_role
            FROM users 
            WHERE username = 'Aleksey_Barsukov_development'
        `);
        
        if (managerResult.rows.length === 0) {
            console.log('‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä @Aleksey_Barsukov_development –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        const manager = managerResult.rows[0];
        console.log('‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä:', manager.username);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        console.log('\nüìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç...');
        const projectData = {
            name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç–∫–∞–∑–∞',
            description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–∞–∑–∞',
            customer_id: customer.id,
            status: 'searching_manager',
            deadline: '1 –º–µ—Å—è—Ü',
            budget: '50 000 —Ä—É–±–ª–µ–π',
            manager_requirements: '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã',
            work_conditions: '–£–¥–∞–ª–µ–Ω–Ω–æ',
            additional_notes: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç'
        };
        
        const createProjectQuery = `
            INSERT INTO projects (name, description, customer_id, status, deadline, budget, manager_requirements, work_conditions, additional_notes)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
            RETURNING *
        `;
        
        const createProjectValues = [
            projectData.name,
            projectData.description,
            projectData.customer_id,
            projectData.status,
            projectData.deadline,
            projectData.budget,
            projectData.manager_requirements,
            projectData.work_conditions,
            projectData.additional_notes
        ];
        
        const projectResult = await client.query(createProjectQuery, createProjectValues);
        const project = projectResult.rows[0];
        console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID:', project.id);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –∫–∞–∫ customer (–ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ addUserToProjectRoles)
        console.log('üë§ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –∫–∞–∫ customer (–ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è)...');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –ø—Ä–æ–µ–∫—Ç
        console.log('üë®‚Äçüíº –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –ø—Ä–æ–µ–∫—Ç...');
        const addManagerQuery = `
            INSERT INTO project_members (user_id, project_id, role)
            VALUES ($1, $2, $3)
            ON CONFLICT (project_id, user_id) DO UPDATE SET role = $3
        `;
        await client.query(addManagerQuery, [manager.id, project.id, 'manager']);
        console.log('‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ project_members');
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        console.log('üì® –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞...');
        const inviteQuery = `
            INSERT INTO project_managers (project_id, manager_id, status)
            VALUES ($1, $2, $3)
            ON CONFLICT (project_id, manager_id) DO UPDATE SET status = $3
            RETURNING *
        `;
        const inviteResult = await client.query(inviteQuery, [project.id, manager.id, 'pending']);
        console.log('‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', inviteResult.rows[0].id);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        console.log('\nüìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
        const initialQuery = `
            SELECT 
                p.id,
                p.name,
                p.status,
                array_agg(DISTINCT pm.role) as member_roles,
                array_agg(DISTINCT pm2.status) as manager_statuses,
                array_agg(DISTINCT pm2.manager_id) as manager_ids
            FROM projects p
            LEFT JOIN project_members pm ON p.id = pm.project_id
            LEFT JOIN project_managers pm2 ON p.id = pm2.project_id
            WHERE p.id = $1
            GROUP BY p.id, p.name, p.status
        `;
        const initialResult = await client.query(initialQuery, [project.id]);
        console.log('–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', initialResult.rows[0]);
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        console.log('\n‚ùå –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...');
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞
        const hasMemberQuery = `
            SELECT 1 FROM project_members 
            WHERE project_id = $1 AND user_id = $2
        `;
        const hasMemberResult = await client.query(hasMemberQuery, [project.id, manager.id]);
        const isMember = hasMemberResult.rows.length > 0;
        console.log('–ú–µ–Ω–µ–¥–∂–µ—Ä —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞:', isMember);
        
        if (!isMember) {
            console.log('‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞');
            return;
        }
        
        // 2. –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        const getMembersQuery = `
            SELECT u.*, pm.role as member_role
            FROM project_members pm
            JOIN users u ON pm.user_id = u.id
            WHERE pm.project_id = $1
        `;
        const membersResult = await client.query(getMembersQuery, [project.id]);
        const managerMember = membersResult.rows.find(m => m.id === manager.id);
        console.log('–†–æ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ:', managerMember?.member_role);
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–∫–∞–∑—á–∏–∫–æ–º
        if (project.customer_id === manager.id) {
            console.log('‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —è–≤–ª—è–µ—Ç—Å—è –∑–∞–∫–∞–∑—á–∏–∫–æ–º, –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è');
            return;
        }
        
        // 4. –£–¥–∞–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ project_members
        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ project_members...');
        const removeMemberQuery = `
            DELETE FROM project_members 
            WHERE project_id = $1 AND user_id = $2
        `;
        await client.query(removeMemberQuery, [project.id, manager.id]);
        console.log('‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —É–¥–∞–ª–µ–Ω –∏–∑ project_members');
        
        // 5. –£–¥–∞–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ project_managers
        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ project_managers...');
        const removeManagerQuery = `
            DELETE FROM project_managers 
            WHERE project_id = $1 AND manager_id = $2
        `;
        await client.query(removeManagerQuery, [project.id, manager.id]);
        console.log('‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —É–¥–∞–ª–µ–Ω –∏–∑ project_managers');
        
        // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        const remainingManagersQuery = `
            SELECT * FROM project_managers WHERE project_id = $1
        `;
        const remainingManagersResult = await client.query(remainingManagersQuery, [project.id]);
        const acceptedManagers = remainingManagersResult.rows.filter(m => m.status === 'accepted');
        console.log('–û—Å—Ç–∞–≤—à–∏–µ—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä—ã:', acceptedManagers.length);
        
        // 7. –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∑–∞–∫–∞–∑—á–∏–∫—É
        if (acceptedManagers.length === 0) {
            console.log('üîÑ –ù–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∑–∞–∫–∞–∑—á–∏–∫—É...');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            await client.query(addManagerQuery, [customer.id, project.id, 'manager']);
            console.log('‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä');
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ project_managers
            await client.query(inviteQuery, [project.id, customer.id, 'accepted']);
            console.log('‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ project_managers');
            
            // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
            const updateStatusQuery = `
                UPDATE projects SET status = $1 WHERE id = $2
            `;
            await client.query(updateStatusQuery, ['searching_executors', project.id]);
            console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ searching_executors');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
        const finalResult = await client.query(initialQuery, [project.id]);
        console.log('–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', finalResult.rows[0]);
        
        // –û—á–∏—Å—Ç–∫–∞
        console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç...');
        await client.query('DELETE FROM project_managers WHERE project_id = $1', [project.id]);
        await client.query('DELETE FROM project_members WHERE project_id = $1', [project.id]);
        await client.query('DELETE FROM projects WHERE id = $1', [project.id]);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω');
        
        console.log('\nüéâ –¢–µ—Å—Ç –æ—Ç–∫–∞–∑–∞ –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–∫–∞–∑–∞ –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞:', error);
        console.error('Stack trace:', error.stack);
    } finally {
        await pool.end();
    }
}

testDeclineProject(); 