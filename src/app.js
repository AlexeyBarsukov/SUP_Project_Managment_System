const { Telegraf, session } = require('telegraf');
require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç middleware
const { roleCheck, customerOnly, managerOnly, executorOnly } = require('./bot/middlewares/roleCheck');
const { standardRateLimit, joinProjectRateLimit, createProjectLimit, redisClient } = require('./bot/middlewares/rateLimit');

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥
const { startCommand, handleRoleSelection } = require('./bot/commands/start');
const { 
    createProject, 
    handleProjectName, 
    handleProjectDescription,
    myProjects,
    projectDetails,
    joinProject,
    availableProjects,
    startCreateProject,
    handleCreateProjectStep,
    deleteProject,
    handleDeleteConfirmation
} = require('./bot/commands/projects');

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Ñ–∏–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const {
    handleProfileCommand,
    handleSpecialization,
    handleExperience,
    handleSkills,
    handleSkillsDone,
    handleSkillsClear,
    handleProfileBack,
    handleAchievements,
    handleSalary,
    handleSalaryRange,
    handleContacts,
    handleTextInput,
    handleFillAchievements,
    handleFillSalary,
    handleFillContacts
} = require('./bot/commands/profile');

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
const {
    handleManagersCommand,
    handleManagerProfile,
    handleBackToManagers
} = require('./bot/commands/managers');

// –ò–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä
const { getKeyboardByRole, roleSelectionKeyboard, profileKeyboard, getManagerMenuKeyboard } = require('./bot/keyboards');

// –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç
const { notifyAdminError } = require('./utils/notifications');
const { validateRole } = require('./utils/validation');
const User = require('./db/models/User');
const Project = require('./db/models/Project');
const ManagerInvitation = require('./db/models/ManagerInvitation');
const ProjectManager = require('./db/models/ProjectManager');
const ProjectMessage = require('./db/models/ProjectMessage');
const AuditLog = require('./db/models/AuditLog');

const ADMIN_ID = process.env.ADMIN_ID;

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_TOKEN);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
bot.use(session());

// Middleware –¥–ª—è –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
bot.use(async (ctx, next) => {
    console.log('Middleware 1 - start');
    if (!ctx.user && ctx.from && ctx.from.id) {
        ctx.user = await User.findByTelegramId(ctx.from.id);
    }
    await next();
    console.log('Middleware 1 - end');
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error('Bot error:', err);
    notifyAdminError(bot, err, `Command: ${ctx.message?.text || 'Unknown'}`);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(startCommand);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
bot.hears(['üë§ –ó–∞–∫–∞–∑—á–∏–∫', 'üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä', 'üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'], handleRoleSelection);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–æ–ª–µ–π
bot.hears(/^\s*üìã\s*–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã\s*$/i,
    async (ctx, next) => {
      console.log('hears start');
      await next();
    },
    roleCheck(['customer','manager','executor']),
    async (ctx, next) => {
      console.log('before myProjects');
      ctx.message.handled = true;
      await next();
    },
    myProjects
  );
  
bot.hears('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã', roleCheck(['manager', 'executor']), availableProjects);
bot.hears('üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã', roleCheck(['executor']), availableProjects);

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
bot.hears('‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', 
    async (ctx, next) => {
        console.log('1. –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç" –Ω–∞–∂–∞—Ç–∞');
        await next();
    },
    customerOnly,
    async (ctx, next) => {
        console.log('2. –ü–æ—Å–ª–µ customerOnly');
        await next();
    },
    createProjectLimit(2),
    async (ctx, next) => {
        console.log('3. –ü–æ—Å–ª–µ createProjectLimit');
        await next();
    },
    startCreateProject
);
bot.hears('üîç –ù–∞–π—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤', customerOnly, handleManagersCommand);
bot.hears('üîç –ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π', customerOnly, async (ctx) => {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    await ctx.reply('üîç <b>–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', { parse_mode: 'HTML' });
});

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot.hears(['üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'], managerOnly, handleProfileCommand);
bot.hears('üîç –ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π', managerOnly, async (ctx) => {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    await ctx.reply('üîç <b>–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', { parse_mode: 'HTML' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å" —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö
bot.hears('‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å', roleCheck(), async (ctx) => {
    const roleNames = {
        'customer': '–ó–∞–∫–∞–∑—á–∏–∫',
        'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
        'executor': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'
    };
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö
    const projectRoles = await User.getProjectRoles(ctx.from.id);
    let rolesInfo = '';
    if (projectRoles.length > 0) {
        rolesInfo = '\n\n<b>–í–∞—à–∏ —Ä–æ–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö:</b>\n';
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–æ–ª–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç—É
        const projectsMap = {};
        projectRoles.forEach(role => {
            if (!projectsMap[role.project_id]) {
                projectsMap[role.project_id] = { name: role.project_name, roles: [] };
            }
            projectsMap[role.project_id].roles.push(role.role);
        });
        for (const projectId in projectsMap) {
            const { name, roles } = projectsMap[projectId];
            let roleStr = '';
            if (roles.includes('customer')) {
                roleStr = '–ó–∞–∫–∞–∑—á–∏–∫-–º–µ–Ω–µ–¥–∂–µ—Ä';
            } else if (roles.includes('manager')) {
                roleStr = '–ú–µ–Ω–µ–¥–∂–µ—Ä';
            } else if (roles.includes('executor')) {
                roleStr = '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å';
            }
            rolesInfo += `- ${name}: ${roleStr}\n`;
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
    let projectLimitInfo = '';
    if (ctx.user.main_role === 'customer') {
        const userProjects = await Project.findByCustomerId(ctx.user.id);
        const currentProjects = userProjects.length;
        const maxProjects = 2;
        projectLimitInfo = `\nüìä <b>–õ–∏–º–∏—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤:</b> ${currentProjects}/${maxProjects}\n`;
        if (currentProjects >= maxProjects) {
            projectLimitInfo += `‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –£–¥–∞–ª–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.\n`;
        } else {
            projectLimitInfo += `‚úÖ –ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ ${maxProjects - currentProjects} –ø—Ä–æ–µ–∫—Ç(–æ–≤).\n`;
        }
    }
    
    // –ï—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä, –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª "–û —Å–µ–±–µ"
    let aboutMe = '';
    if (ctx.user.main_role === 'manager') {
        const profile = await User.getManagerProfile(ctx.user.telegram_id);
        if (profile && (profile.specialization || profile.experience || profile.skills || profile.achievements || profile.salary_range || profile.contacts)) {
            aboutMe += '\n\n<b>–û —Å–µ–±–µ:</b>\n';
            if (profile.specialization) aboutMe += `‚Ä¢ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> ${profile.specialization}\n`;
            if (profile.experience) aboutMe += `‚Ä¢ <b>–û–ø—ã—Ç:</b> ${profile.experience}\n`;
            if (profile.skills && profile.skills.length > 0) {
                let skills = Array.isArray(profile.skills) ? profile.skills.join(', ') : profile.skills;
                aboutMe += `‚Ä¢ <b>–ù–∞–≤—ã–∫–∏:</b> ${skills}\n`;
            }
            if (profile.achievements) aboutMe += `‚Ä¢ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b> ${profile.achievements}\n`;
            if (profile.salary_range) aboutMe += `‚Ä¢ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> ${profile.salary_range}\n`;
            if (profile.contacts) aboutMe += `‚Ä¢ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> ${profile.contacts}\n`;
        }
    }
    await ctx.reply(
        `üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n` +
        `–ò–º—è: ${ctx.user.first_name} ${ctx.user.last_name || ''}\n` +
        `–û—Å–Ω–æ–≤–Ω–∞—è —Ä–æ–ª—å: ${roleNames[ctx.user.main_role] || ctx.user.main_role}\n` +
        `Username: @${ctx.user.username || '–Ω–µ—Ç'}\n` +
        `–í–∏–¥–∏–º–æ—Å—Ç—å: ${ctx.user.is_visible ? '–û—Ç–∫—Ä—ã—Ç—ã–π' : '–ó–∞–∫—Ä—ã—Ç—ã–π'}` +
        projectLimitInfo +
        aboutMe +
        rolesInfo,
        {
            parse_mode: 'HTML',
            reply_markup: ctx.user.main_role === 'manager'
                ? getManagerMenuKeyboard(!!aboutMe).reply_markup
                : profileKeyboard(ctx.user.main_role, ctx.user.telegram_id, ADMIN_ID).reply_markup
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"
bot.hears('üë§ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å', roleCheck(), async (ctx) => {
    ctx.session = ctx.session || {};
    ctx.session.changingRole = true;
    await ctx.reply(
        'üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:</b>',
        {
            parse_mode: 'HTML',
            reply_markup: roleSelectionKeyboard.reply_markup
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ä–æ–ª–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
bot.hears(['üë§ –ó–∞–∫–∞–∑—á–∏–∫', 'üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä', 'üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'], async (ctx, next) => {
    if (ctx.session && ctx.session.changingRole) {
        const roleMap = {
            'üë§ –ó–∞–∫–∞–∑—á–∏–∫': 'customer',
            'üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä': 'manager',
            'üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å': 'executor'
        };
        const selectedRole = roleMap[ctx.message.text];
        if (!selectedRole) {
            return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ä–æ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–º–µ–Ω—ã —Ä–æ–ª–∏
        const { canChange, error } = await User.canChangeRole(ctx.from.id, selectedRole);
        if (!canChange) {
            ctx.session.changingRole = false;
            return ctx.reply(`‚ùå ${error}`);
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ä–æ–ª—å
        const user = await User.updateMainRole(ctx.from.id, selectedRole);
        if (!user) {
            ctx.session.changingRole = false;
            return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º ctx.user –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ñ–∏–ª—è
        ctx.user = await User.findByTelegramId(ctx.from.id);
        const roleNames = {
            'customer': '–ó–∞–∫–∞–∑—á–∏–∫',
            'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
            'executor': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'
        };
        ctx.session.changingRole = false;
        await ctx.reply(
            `‚úÖ <b>–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!</b>\n\n` +
            `–í–∞—à–∞ –Ω–æ–≤–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–æ–ª—å: <b>${roleNames[selectedRole]}</b>\n\n` +
            `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏.`,
            {
                parse_mode: 'HTML',
                reply_markup: profileKeyboard(selectedRole, ctx.user.telegram_id, ADMIN_ID).reply_markup
            }
        );
    } else {
        return next();
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
bot.on('text', async (ctx, next) => {
    console.log('User text:', ctx.message.text);
    if (ctx.session?.createProject) {
        return handleCreateProjectStep(ctx);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    if (ctx.session?.pendingDelete) {
        const handled = await handleDeleteConfirmation(ctx);
        if (handled) return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if (ctx.session?.profileState || 
        ctx.session?.waitingForSalaryInput || 
        ctx.session?.waitingForContactsInput || 
        ctx.session?.waitingForAchievementsInput ||
        ctx.session?.waitingForSpecializationInput ||
        ctx.session?.waitingForSkillsInput) {
        return handleTextInput(ctx);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É
    const chatMatch = ctx.message.text.match(/^#chat_(\d+)/);
    if (chatMatch) {
        const projectId = chatMatch[1];
        if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
        const project = await Project.findById(projectId);
        if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        const pm = await ProjectManager.findActiveChat(projectId, ctx.user.id);
        if (!pm) return ctx.reply('–ß–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫.');
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        let peerId;
        if (ctx.user.id === project.customer_id) peerId = pm.manager_id;
        else peerId = project.customer_id;
        const peer = await User.findById(peerId);
        if (!peer) return ctx.reply('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ProjectMessage.create({ project_id: projectId, sender_id: ctx.user.id, text: ctx.message.text });
        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
        await ctx.telegram.sendMessage(
            peer.telegram_id,
            `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${ctx.message.text}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ #chat_${projectId} –∏ —Ç–µ–∫—Å—Ç)`
        );
        await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
        return;
    }
    
    return next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
bot.hears(/^\/delete_project_(\d+)$/, roleCheck(['customer']), deleteProject);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
bot.command('cancel', async (ctx) => {
    if (ctx.session?.createProject) {
        delete ctx.session.createProject;
        await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    } else {
        await ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
bot.command('project', async (ctx) => {
    const projectId = ctx.message.text.split(' ')[1];
    if (projectId) {
        ctx.params = [projectId];
        return projectDetails(ctx);
    }
    return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–æ–µ–∫—Ç–∞: /project [ID]');
});

bot.command('join', async (ctx) => {
    const projectId = ctx.message.text.split(' ')[1];
    if (projectId) {
        ctx.params = [projectId];
        return joinProject(ctx);
    }
    return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–æ–µ–∫—Ç–∞: /join [ID]');
});

// –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–∞–≤ –∑–∞–∫–∞–∑—á–∏–∫–∞
bot.command('transfer_owner', customerOnly, async (ctx) => {
    const args = ctx.message.text.split(' ').slice(1);
    const [projectId, username] = args;
    if (!projectId || !username) {
        return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /transfer_owner [projectId] [username]');
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞
    const isOwner = await Project.isOwner(ctx.from.id, projectId);
    if (!isOwner) {
        return ctx.reply('‚ùå –í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!');
    }
    try {
        await Project.transferOwnership(projectId, username);
        await ctx.reply(`‚úÖ –ü—Ä–∞–≤–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω—ã @${username}`);
    } catch (error) {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.action(/project_members_(\d+)/, async (ctx) => {
    const projectId = ctx.match[1];
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    await ctx.answerCbQuery();
    await ctx.reply(`üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`, { parse_mode: 'HTML' });
});

bot.action(/project_audit_(\d+)/, async (ctx) => {
    const projectId = ctx.match[1];
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∞—É–¥–∏—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
    await ctx.answerCbQuery();
    await ctx.reply(`üìä <b>–ê—É–¥–∏—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`, { parse_mode: 'HTML' });
});

bot.action(/project_status_(\d+)/, async (ctx) => {
    const projectId = ctx.match[1];
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞
    await ctx.answerCbQuery();
    await ctx.reply(`üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`, { parse_mode: 'HTML' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
bot.action(/project_delete_(\d+)/, async (ctx) => {
    const projectId = ctx.match[1];
    await ctx.answerCbQuery();
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ deleteProject
    const mockCtx = {
        user: ctx.user,
        from: ctx.from,
        message: { text: `/delete_project_${projectId}` },
        reply: ctx.reply.bind(ctx),
        session: ctx.session
    };
    
    await deleteProject(mockCtx);
});

bot.action(/join_project_(\d+)/, async (ctx) => {
    const projectId = ctx.match[1];
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—Ä–æ–µ–∫—Ç—É
    await ctx.answerCbQuery();
    await ctx.reply(`‚úÖ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É ${projectId}</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`, { parse_mode: 'HTML' });
});

bot.action(/reject_join_(\d+)/, async (ctx) => {
    const projectId = ctx.match[1];
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await ctx.answerCbQuery();
    await ctx.reply(`‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É ${projectId}</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`, { parse_mode: 'HTML' });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot.action(/^spec_/, handleSpecialization);
bot.action(/^exp_/, handleExperience);
bot.action(/^skill_/, handleSkills);
bot.action('skills_done', handleSkillsDone);
bot.action('skills_clear', handleSkillsClear);
bot.action('profile_back', handleProfileBack);
bot.action('fill_achievements', handleFillAchievements);
bot.action('skip_optional', handleAchievements);
bot.action(/^salary_/, handleSalary);
bot.action(/^manager_/, handleManagerProfile);
bot.action('back_to_managers', handleBackToManagers);
bot.action('fill_salary', handleFillSalary);
bot.action('fill_contacts', handleFillContacts);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ 'üîô –ù–∞–∑–∞–¥'
bot.hears('üîô –ù–∞–∑–∞–¥', roleCheck(), async (ctx) => {
    await ctx.reply(
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        {
            reply_markup: getKeyboardByRole(ctx.user.main_role).reply_markup
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ 'üßπ –°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç'
bot.hears('üßπ –°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç', roleCheck(), async (ctx) => {
    if (String(ctx.user.telegram_id) !== String(ADMIN_ID)) {
        return ctx.reply('‚õî –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userProjects = await Project.findByCustomerId(ctx.user.id);
    const currentProjects = userProjects.length;
    const maxProjects = 2;
    
    let message = `üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n`;
    message += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${ctx.user.username || ctx.user.first_name}\n`;
    message += `üìã –¢–µ–∫—É—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: ${currentProjects}/${maxProjects}\n`;
    
    if (currentProjects > 0) {
        message += `\n<b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:</b>\n`;
        for (const project of userProjects) {
            message += `‚Ä¢ ${project.name} (ID: ${project.id})\n`;
        }
    }
    
    if (currentProjects >= maxProjects) {
        message += `\n‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤.`;
    } else {
        message += `\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –µ—â–µ ${maxProjects - currentProjects} –ø—Ä–æ–µ–∫—Ç(–æ–≤).`;
    }
    
    await ctx.reply(message, { parse_mode: 'HTML' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
bot.action(/^accept_invite_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    const project = await Project.findById(projectId);
    if (!project) {
        await ctx.reply('–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω –∑–∞–∫–∞–∑—á–∏–∫–æ–º.');
        return ctx.answerCbQuery();
    }
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å project_managers
    const pm = await ProjectManager.findByProjectAndManager(projectId, ctx.user.id);
    if (!pm) {
        await ctx.reply('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.');
        return ctx.answerCbQuery();
    }
    // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    await ProjectManager.updateStatus(pm.id, 'accepted', pm.offer);
    // 1.1. –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ project_members
    await Project.addMember(projectId, ctx.user.id, 'manager');
    // 2. –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
    await Project.updateStatus(projectId, 'searching_executors');
    // 3. –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
    const customer = await User.findById(project.customer_id);
    if (customer) {
        await ctx.telegram.sendMessage(
            customer.telegram_id,
            `‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä @${ctx.user.username || ''} –ø—Ä–∏–Ω—è–ª –≤–∞—à –ø—Ä–æ–µ–∫—Ç ¬´${project.name}¬ª.`
        );
    }
    // 4. –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    await AuditLog.create(
        ctx.user.id,
        'MANAGER_ACCEPTED',
        projectId,
        { managerUsername: ctx.user.username, projectName: project.name }
    );
    // 5. –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–µ–∫—Ç–∞
    ctx.params = [projectId];
    await projectDetails(ctx);
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot.action(/^decline_invite_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    const project = await Project.findById(projectId);
    if (!project) {
        await ctx.reply('–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω –∑–∞–∫–∞–∑—á–∏–∫–æ–º.');
        return ctx.answerCbQuery();
    }
    const managerTelegramId = ctx.from.id;
    const invitation = await ManagerInvitation.findPending(managerTelegramId, projectId);
    if (!invitation) {
        await ctx.reply('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.');
        return ctx.answerCbQuery();
    }
    await ManagerInvitation.updateStatus(invitation.id, 'declined');
    await ctx.reply('–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.');
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
    await ctx.telegram.sendMessage(
        invitation.customer_telegram_id,
        `–ú–µ–Ω–µ–¥–∂–µ—Ä @${ctx.from.username || ''} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç.`
    );
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
bot.action(/^project_details_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    const project = await Project.findById(projectId);
    if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
    const customer = await User.findById(project.customer_id);
    let msg = `<b>${project.name}</b>\n`;
    msg += `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${project.description}\n`;
    msg += `üë§ <b>–ó–∞–∫–∞–∑—á–∏–∫:</b> @${customer?.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
    msg += `üÜî <b>ID –ø—Ä–æ–µ–∫—Ç–∞:</b> ${project.id}\n`;
    msg += `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${new Date(project.created_at).toLocaleDateString('ru-RU')}\n`;
    msg += `–ë—é–¥–∂–µ—Ç: ${project.budget || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
    msg += `–°—Ä–æ–∫: ${project.deadline || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
    msg += `\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É: ...\n–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã: ...\n–î–æ–ø. –ø–æ–∂–µ–ª–∞–Ω–∏—è: ...\n`;
    await ctx.reply(msg, {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '–ü—Ä–∏–Ω—è—Ç—å', callback_data: `project_accept_${project.id}` },
                    { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `project_decline_${project.id}` }
                ],
                [
                    { text: '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—Å–ª–æ–≤–∏—è', callback_data: `project_offer_${project.id}` }
                ]
            ]
        }
    });
    await ctx.answerCbQuery();
});

// –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç
bot.action(/^project_accept_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    const project = await Project.findById(projectId);
    if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª–∏–∫–∞–ª—Å—è –ª–∏ —É–∂–µ
    const existing = await ProjectManager.findByProjectAndManager(projectId, ctx.user.id);
    if (existing) return ctx.reply('–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç.');
    await ProjectManager.create({ project_id: projectId, manager_id: ctx.user.id, status: 'accepted' });
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
    const customer = await User.findById(project.customer_id);
    if (customer) {
        await ctx.telegram.sendMessage(
            customer.telegram_id,
            `–ú–µ–Ω–µ–¥–∂–µ—Ä @${ctx.user.username || ''} –ø—Ä–∏–Ω—è–ª –≤–∞—à –ø—Ä–æ–µ–∫—Ç "${project.name}"!`
        );
    }
    await ctx.reply('–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–æ–µ–∫—Ç! –ó–∞–∫–∞–∑—á–∏–∫ —É–≤–µ–¥–æ–º–ª—ë–Ω.');
    await ctx.answerCbQuery();
});

// –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –ø—Ä–æ–µ–∫—Ç
bot.action(/^project_decline_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    const project = await Project.findById(projectId);
    if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    const existing = await ProjectManager.findByProjectAndManager(projectId, ctx.user.id);
    if (existing) return ctx.reply('–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç.');
    await ProjectManager.create({ project_id: projectId, manager_id: ctx.user.id, status: 'declined' });
    await ctx.reply('–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–æ–µ–∫—Ç.');
    await ctx.answerCbQuery();
});

// –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É—Å–ª–æ–≤–∏—è
bot.action(/^project_offer_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    const project = await Project.findById(projectId);
    if (!project) {
        await ctx.reply('–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω –∑–∞–∫–∞–∑—á–∏–∫–æ–º.');
        return ctx.answerCbQuery();
    }
    ctx.session = ctx.session || {};
    ctx.session.projectOffer = { projectId };
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —É—Å–ª–æ–≤–∏—è/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ì–æ—Ç–æ–≤ –∑–∞ 40 —Ç—ã—Å., —Å—Ä–æ–∫ 3 –Ω–µ–¥–µ–ª–∏"):');
    await ctx.answerCbQuery();
});

// –ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å, –æ—Ç–∫–ª–æ–Ω–∏—Ç—å, –æ–±—Å—É–¥–∏—Ç—å
bot.on('callback_query', async (ctx, next) => {
    if (ctx.callbackQuery.data.startsWith('customer_offer_action_')) {
        const parts = ctx.callbackQuery.data.split('_');
        const action = parts[3];
        const projectId = parts[4];
        const managerId = parts[5];
        const project = await Project.findById(projectId);
        const manager = await User.findById(managerId);
        if (!project || !manager) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        const pm = await ProjectManager.findByProjectAndManager(projectId, managerId);
        if (!pm) return ctx.reply('–û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        if (action === 'accept') {
            await ProjectManager.updateStatus(pm.id, 'accepted', pm.offer);
            await ProjectManager.activateChat(pm.id);
            await ctx.telegram.sendMessage(manager.telegram_id, `–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–µ–∫—Ç—É "${project.name}" –ø—Ä–∏–Ω—è—Ç–æ! –û—Ç–∫—Ä—ã—Ç —á–∞—Ç —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º.`);
            await ctx.reply('–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –û—Ç–∫—Ä—ã—Ç —á–∞—Ç.');
        } else if (action === 'decline') {
            await ProjectManager.updateStatus(pm.id, 'declined', pm.offer);
            await ctx.telegram.sendMessage(manager.telegram_id, `–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–µ–∫—Ç—É "${project.name}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.`);
            await ctx.reply('–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.');
        } else if (action === 'discuss') {
            await ctx.telegram.sendMessage(manager.telegram_id, `–ó–∞–∫–∞–∑—á–∏–∫ —Ö–æ—á–µ—Ç –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç—É "${project.name}". –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É –≤ —á–∞—Ç–µ.`);
            await ctx.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ. –û—Ç–∫—Ä–æ–π—Ç–µ —á–∞—Ç –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏.', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç', callback_data: `open_chat_${project.id}` }
                        ]
                    ]
                }
            });
        }
        await ctx.answerCbQuery();
        return;
    }
    return next();
});

// –ö–æ–≥–¥–∞ –∑–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –∫–Ω–æ–ø–∫–∏
async function notifyCustomerOffer(customer, manager, project, offer) {
    await bot.telegram.sendMessage(
        customer.telegram_id,
        `–ú–µ–Ω–µ–¥–∂–µ—Ä @${manager.username || ''} –ø—Ä–µ–¥–ª–æ–∂–∏–ª —É—Å–ª–æ–≤–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç—É "${project.name}":\n${offer}`,
        {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–ü—Ä–∏–Ω—è—Ç—å', callback_data: `customer_offer_action_accept_${project.id}_${manager.id}` },
                        { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `customer_offer_action_decline_${project.id}_${manager.id}` }
                    ],
                    [
                        { text: '–û–±—Å—É–¥–∏—Ç—å', callback_data: `customer_offer_action_discuss_${project.id}_${manager.id}` }
                    ]
                ]
            }
        }
    );
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—Ç—å notifyCustomerOffer
bot.on('text', async (ctx, next) => {
    if (ctx.session?.projectOffer) {
        const { projectId } = ctx.session.projectOffer;
        if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
        const project = await Project.findById(projectId);
        if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        const existing = await ProjectManager.findByProjectAndManager(projectId, ctx.user.id);
        if (existing) return ctx.reply('–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç.');
        await ProjectManager.create({ project_id: projectId, manager_id: ctx.user.id, status: 'negotiating', offer: ctx.message.text });
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        const customer = await User.findById(project.customer_id);
        if (customer) {
            await notifyCustomerOffer(customer, ctx.user, project, ctx.message.text);
        }
        await ctx.reply('–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É.');
        delete ctx.session.projectOffer;
        return;
    }
    return next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
bot.on('message', async (ctx, next) => {
    console.log('Raw message:', ctx.message.text);
    if (ctx.message.handled) return next();
    
    if (ctx.message.text && !ctx.message.text.startsWith('/')) {
        await ctx.reply('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞...');
    }
    return next();
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
bot.command(/history_(\d+)/, async (ctx) => {
    const projectId = ctx.match[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    const project = await Project.findById(projectId);
    if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –∏ –¥–æ—Å—Ç—É–ø
    const pm = await ProjectManager.findActiveChat(projectId, ctx.user.id);
    if (!pm) return ctx.reply('–ß–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫.');
    const messages = await ProjectMessage.findByProject(projectId);
    if (!messages.length) return ctx.reply('–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞.');
    let history = `<b>–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}:</b>\n\n`;
    for (const msg of messages) {
        const sender = await User.findById(msg.sender_id);
        if (msg.attachment_url) {
            history += `<b>${sender?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}:</b> [—Ñ–∞–π–ª] <code>${msg.attachment_url}</code> ${msg.text ? '‚Äî ' + msg.text : ''}\n`;
        } else {
            history += `<b>${sender?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}:</b> ${msg.text}\n`;
        }
    }
    await ctx.reply(history, { parse_mode: 'HTML' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–∞—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
bot.on(['document', 'photo', 'audio', 'video'], async (ctx, next) => {
    let caption = ctx.message.caption || '';
    const chatMatch = caption.match(/^#chat_(\d+)/);
    if (!chatMatch) return next();
    const projectId = chatMatch[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    const project = await Project.findById(projectId);
    if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    const pm = await ProjectManager.findActiveChat(projectId, ctx.user.id);
    if (!pm) return ctx.reply('–ß–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫.');
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    let peerId;
    if (ctx.user.id === project.customer_id) peerId = pm.manager_id;
    else peerId = project.customer_id;
    const peer = await User.findById(peerId);
    if (!peer) return ctx.reply('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º file_id –∏ —Ç–∏–ø
    let file_id = null, file_type = null;
    if (ctx.message.document) {
        file_id = ctx.message.document.file_id;
        file_type = 'document';
    } else if (ctx.message.photo) {
        file_id = ctx.message.photo[ctx.message.photo.length-1].file_id;
        file_type = 'photo';
    } else if (ctx.message.audio) {
        file_id = ctx.message.audio.file_id;
        file_type = 'audio';
    } else if (ctx.message.video) {
        file_id = ctx.message.video.file_id;
        file_type = 'video';
    }
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ProjectMessage.create({ project_id: projectId, sender_id: ctx.user.id, text: caption, attachment_url: file_id });
    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–∞–π–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
    if (file_type === 'document') {
        await ctx.telegram.sendDocument(peer.telegram_id, file_id, { caption: `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${caption}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ #chat_${projectId} –∏ —Ç–µ–∫—Å—Ç)` });
    } else if (file_type === 'photo') {
        await ctx.telegram.sendPhoto(peer.telegram_id, file_id, { caption: `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${caption}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ #chat_${projectId} –∏ —Ç–µ–∫—Å—Ç)` });
    } else if (file_type === 'audio') {
        await ctx.telegram.sendAudio(peer.telegram_id, file_id, { caption: `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${caption}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ #chat_${projectId} –∏ —Ç–µ–∫—Å—Ç)` });
    } else if (file_type === 'video') {
        await ctx.telegram.sendVideo(peer.telegram_id, file_id, { caption: `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${caption}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ #chat_${projectId} –∏ —Ç–µ–∫—Å—Ç)` });
    }
    await ctx.reply('–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç"
bot.action(/^open_chat_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    ctx.session = ctx.session || {};
    ctx.session.activeChatProjectId = projectId;
    await ctx.reply(`–ß–∞—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É ‚Ññ${projectId} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª—ã ‚Äî –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–∞—à–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –ø–æ –ø—Ä–æ–µ–∫—Ç—É.\n\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /stopchat.\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: /history_${projectId}`);
    await ctx.answerCbQuery();
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
bot.on('text', async (ctx, next) => {
    if (ctx.session?.activeChatProjectId) {
        const projectId = ctx.session.activeChatProjectId;
        if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
        const project = await Project.findById(projectId);
        if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        const pm = await ProjectManager.findActiveChat(projectId, ctx.user.id);
        if (!pm) return ctx.reply('–ß–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫.');
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        let peerId;
        if (ctx.user.id === project.customer_id) peerId = pm.manager_id;
        else peerId = project.customer_id;
        const peer = await User.findById(peerId);
        if (!peer) return ctx.reply('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ProjectMessage.create({ project_id: projectId, sender_id: ctx.user.id, text: ctx.message.text });
        await ctx.telegram.sendMessage(peer.telegram_id, `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${ctx.message.text}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–Ω–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É)`);
        await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞.');
        return;
    }
    return next();
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
bot.on(['document', 'photo', 'audio', 'video'], async (ctx, next) => {
    if (ctx.session?.activeChatProjectId) {
        const projectId = ctx.session.activeChatProjectId;
        if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
        const project = await Project.findById(projectId);
        if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        const pm = await ProjectManager.findActiveChat(projectId, ctx.user.id);
        if (!pm) return ctx.reply('–ß–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫.');
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        let peerId;
        if (ctx.user.id === project.customer_id) peerId = pm.manager_id;
        else peerId = project.customer_id;
        const peer = await User.findById(peerId);
        if (!peer) return ctx.reply('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º file_id –∏ —Ç–∏–ø
        let file_id = null, file_type = null;
        if (ctx.message.document) {
            file_id = ctx.message.document.file_id;
            file_type = 'document';
        } else if (ctx.message.photo) {
            file_id = ctx.message.photo[ctx.message.photo.length-1].file_id;
            file_type = 'photo';
        } else if (ctx.message.audio) {
            file_id = ctx.message.audio.file_id;
            file_type = 'audio';
        } else if (ctx.message.video) {
            file_id = ctx.message.video.file_id;
            file_type = 'video';
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ProjectMessage.create({ project_id: projectId, sender_id: ctx.user.id, text: ctx.message.caption || '', attachment_url: file_id });
        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–∞–π–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
        if (file_type === 'document') {
            await ctx.telegram.sendDocument(peer.telegram_id, file_id, { caption: `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${ctx.message.caption || ''}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ)` });
        } else if (file_type === 'photo') {
            await ctx.telegram.sendPhoto(peer.telegram_id, file_id, { caption: `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${ctx.message.caption || ''}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ)` });
        } else if (file_type === 'audio') {
            await ctx.telegram.sendAudio(peer.telegram_id, file_id, { caption: `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${ctx.message.caption || ''}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ)` });
        } else if (file_type === 'video') {
            await ctx.telegram.sendVideo(peer.telegram_id, file_id, { caption: `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${ctx.message.caption || ''}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ)` });
        }
        await ctx.reply('–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞.');
        return;
    }
    return next();
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞
bot.command('stopchat', async (ctx) => {
    if (ctx.session?.activeChatProjectId) {
        delete ctx.session.activeChatProjectId;
        await ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞.');
    } else {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.');
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const startBot = async () => {
    try {
        console.log('üöÄ Starting Telegram bot...');
        await bot.launch();
        console.log('‚úÖ Bot started successfully!');
        
        // Graceful stop
        process.once('SIGINT', () => bot.stop('SIGINT'));
        process.once('SIGTERM', () => bot.stop('SIGTERM'));
        
    } catch (error) {
        console.error('‚ùå Error starting bot:', error);
        process.exit(1);
    }
};

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    startBot();
}

module.exports = { bot, startBot }; 