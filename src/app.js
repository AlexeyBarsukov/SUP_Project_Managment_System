const { Telegraf, session } = require('telegraf');
require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç middleware
const { roleCheck, customerOnly, managerOnly, executorOnly } = require('./bot/middlewares/roleCheck');
const { standardRateLimit, joinProjectRateLimit, createProjectLimit, redisClient } = require('./bot/middlewares/rateLimit');

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥
const { startCommand, handleRoleSelection } = require('./bot/commands/start');
const { 
    createProject, 
    handleProjectName, 
    handleProjectDescription,
    myProjects,
    projectDetails,
    joinProject,
    availableProjects,
    startCreateProject,
    handleCreateProjectStep,
    deleteProject,
    handleDeleteConfirmation,
    performProjectDeletion,
    projectPreview,
    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
} = require('./bot/commands/projects');

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Ñ–∏–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const {
    handleProfileCommand,
    handleSpecialization,
    handleExperience,
    handleSkills,
    handleSkillsDone,
    handleSkillsClear,
    handleProfileBack,
    handleAchievements,
    handleSalary,
    handleSalaryRange,
    handleContacts,
    handleTextInput,
    handleFillAchievements,
    handleFillSalary,
    handleFillContacts,
    showEditProfileMenu,
    showEditFieldList,
    handleEditFieldInput,
    handleEditFieldValue
} = require('./bot/commands/profile');

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
const {
    handleManagersCommand,
    handleManagerProfile,
    handleBackToManagers
} = require('./bot/commands/managers');

// –ò–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä
const { getKeyboardByRole, roleSelectionKeyboard, profileKeyboard, getManagerMenuKeyboard } = require('./bot/keyboards');

// –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç
const { notifyAdminError } = require('./utils/notifications');
const { validateRole } = require('./utils/validation');
const User = require('./db/models/User');
const Project = require('./db/models/Project');
const ManagerInvitation = require('./db/models/ManagerInvitation');
const ProjectManager = require('./db/models/ProjectManager');
const ProjectMessage = require('./db/models/ProjectMessage');
const AuditLog = require('./db/models/AuditLog');

const ADMIN_ID = process.env.ADMIN_ID;

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_TOKEN);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
bot.use(session());

// Middleware –¥–ª—è –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
bot.use(async (ctx, next) => {
    console.log('Middleware 1 - start');
    if (!ctx.user && ctx.from && ctx.from.id) {
        ctx.user = await User.findByTelegramId(ctx.from.id);
    }
    await next();
    console.log('Middleware 1 - end');
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error('Bot error:', err);
    notifyAdminError(bot, err, `Command: ${ctx.message?.text || 'Unknown'}`);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(startCommand);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
bot.hears(['üë§ –ó–∞–∫–∞–∑—á–∏–∫', 'üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä', 'üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'], handleRoleSelection);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–æ–ª–µ–π
bot.hears(/^\s*üìã\s*–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã\s*$/i,
    async (ctx, next) => {
      console.log('hears start');
      await next();
    },
    roleCheck(['customer','manager','executor']),
    async (ctx, next) => {
      console.log('before myProjects');
      ctx.message.handled = true;
      await next();
    },
    myProjects
  );
  
bot.hears('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã', roleCheck(['manager', 'executor']), availableProjects);
bot.hears('üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã', roleCheck(['executor']), availableProjects);

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
bot.hears('‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', 
    async (ctx, next) => {
        console.log('1. –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç" –Ω–∞–∂–∞—Ç–∞');
        await next();
    },
    customerOnly,
    async (ctx, next) => {
        console.log('2. –ü–æ—Å–ª–µ customerOnly');
        await next();
    },
    createProjectLimit(2),
    async (ctx, next) => {
        console.log('3. –ü–æ—Å–ª–µ createProjectLimit');
        await next();
    },
    startCreateProject
);
bot.hears('üîç –ù–∞–π—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤', customerOnly, handleManagersCommand);
bot.hears('üîç –ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π', customerOnly, async (ctx) => {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    await ctx.reply('üîç <b>–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', { parse_mode: 'HTML' });
});

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot.hears(['üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'], managerOnly, async (ctx) => {
    await showEditProfileMenu(ctx);
});
bot.hears('üîç –ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π', managerOnly, async (ctx) => {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    await ctx.reply('üîç <b>–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', { parse_mode: 'HTML' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å" —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö
bot.hears('‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å', roleCheck(), async (ctx) => {
    const roleNames = {
        'customer': '–ó–∞–∫–∞–∑—á–∏–∫',
        'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
        'executor': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'
    };
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö
    const projectRoles = await User.getProjectRoles(ctx.from.id);
    let rolesInfo = '';
    if (projectRoles.length > 0) {
        rolesInfo = '\n\n<b>–í–∞—à–∏ —Ä–æ–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö:</b>\n';
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–æ–ª–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç—É
        const projectsMap = {};
        projectRoles.forEach(role => {
            if (!projectsMap[role.project_id]) {
                projectsMap[role.project_id] = { name: role.project_name, roles: [] };
            }
            projectsMap[role.project_id].roles.push(role.role);
        });
        for (const projectId in projectsMap) {
            const { name, roles } = projectsMap[projectId];
            let roleStr = '';
            if (roles.includes('customer')) {
                roleStr = '–ó–∞–∫–∞–∑—á–∏–∫-–º–µ–Ω–µ–¥–∂–µ—Ä';
            } else if (roles.includes('manager')) {
                roleStr = '–ú–µ–Ω–µ–¥–∂–µ—Ä';
            } else if (roles.includes('executor')) {
                roleStr = '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å';
            }
            rolesInfo += `- ${name}: ${roleStr}\n`;
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
    let projectLimitInfo = '';
    if (ctx.user.main_role === 'customer') {
        const userProjects = await Project.findByCustomerId(ctx.user.id);
        const currentProjects = userProjects.length;
        const maxProjects = 2;
        projectLimitInfo = `\nüìä <b>–õ–∏–º–∏—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤:</b> ${currentProjects}/${maxProjects}\n`;
        if (currentProjects >= maxProjects) {
            projectLimitInfo += `‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –£–¥–∞–ª–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.\n`;
        } else {
            projectLimitInfo += `‚úÖ –ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ ${maxProjects - currentProjects} –ø—Ä–æ–µ–∫—Ç(–æ–≤).\n`;
        }
    }
    
    // –ï—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä, –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª "–û —Å–µ–±–µ"
    let aboutMe = '';
    if (ctx.user.main_role === 'manager') {
        const profile = await User.getManagerProfile(ctx.user.telegram_id);
        if (profile && (profile.specialization || profile.experience || profile.skills || profile.achievements || profile.salary_range || profile.contacts)) {
            aboutMe += '\n\n<b>–û —Å–µ–±–µ:</b>\n';
            if (profile.specialization) aboutMe += `‚Ä¢ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> ${profile.specialization}\n`;
            if (profile.experience) aboutMe += `‚Ä¢ <b>–û–ø—ã—Ç:</b> ${profile.experience}\n`;
            if (profile.skills && profile.skills.length > 0) {
                let skills = Array.isArray(profile.skills) ? profile.skills.join(', ') : profile.skills;
                aboutMe += `‚Ä¢ <b>–ù–∞–≤—ã–∫–∏:</b> ${skills}\n`;
            }
            if (profile.achievements) aboutMe += `‚Ä¢ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b> ${profile.achievements}\n`;
            if (profile.salary_range) aboutMe += `‚Ä¢ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> ${profile.salary_range}\n`;
            if (profile.contacts) aboutMe += `‚Ä¢ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> ${profile.contacts}\n`;
        }
    }
    await ctx.reply(
        `üë§ <b>–í—ã - ${roleNames[ctx.user.main_role] || ctx.user.main_role}</b>\n\n` +
        `–ò–º—è: ${ctx.user.first_name} ${ctx.user.last_name || ''}\n` +
        `–û—Å–Ω–æ–≤–Ω–∞—è —Ä–æ–ª—å: ${roleNames[ctx.user.main_role] || ctx.user.main_role}\n` +
        `Username: @${ctx.user.username || '–Ω–µ—Ç'}\n` +
        `–í–∏–¥–∏–º–æ—Å—Ç—å: ${ctx.user.is_visible ? '–û—Ç–∫—Ä—ã—Ç—ã–π' : '–ó–∞–∫—Ä—ã—Ç—ã–π'}` +
        projectLimitInfo +
        aboutMe +
        rolesInfo,
        {
            parse_mode: 'HTML',
            reply_markup: ctx.user.main_role === 'manager'
                ? getManagerMenuKeyboard(!!aboutMe).reply_markup
                : profileKeyboard(ctx.user.main_role, ctx.user.telegram_id, ADMIN_ID).reply_markup
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"
bot.hears('üë§ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å', roleCheck(), async (ctx) => {
    ctx.session = ctx.session || {};
    ctx.session.changingRole = true;
    await ctx.reply(
        'üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:</b>',
        {
            parse_mode: 'HTML',
            reply_markup: roleSelectionKeyboard.reply_markup
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ä–æ–ª–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
bot.hears(['üë§ –ó–∞–∫–∞–∑—á–∏–∫', 'üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä', 'üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'], async (ctx, next) => {
    if (ctx.session && ctx.session.changingRole) {
        const roleMap = {
            'üë§ –ó–∞–∫–∞–∑—á–∏–∫': 'customer',
            'üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä': 'manager',
            'üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å': 'executor'
        };
        const selectedRole = roleMap[ctx.message.text];
        if (!selectedRole) {
            return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ä–æ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–º–µ–Ω—ã —Ä–æ–ª–∏
        const { canChange, error } = await User.canChangeRole(ctx.from.id, selectedRole);
        if (!canChange) {
            ctx.session.changingRole = false;
            return ctx.reply(`‚ùå ${error}`);
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ä–æ–ª—å
        const user = await User.updateMainRole(ctx.from.id, selectedRole);
        if (!user) {
            ctx.session.changingRole = false;
            return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏
        await AuditLog.create(
            ctx.from.id,
            'ROLE_CHANGE',
            null,
            { 
                oldRole: ctx.user?.main_role || 'unknown', 
                newRole: selectedRole,
                username: user.username 
            }
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º ctx.user –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ñ–∏–ª—è
        ctx.user = await User.findByTelegramId(ctx.from.id);
        const roleNames = {
            'customer': '–ó–∞–∫–∞–∑—á–∏–∫',
            'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
            'executor': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'
        };
        ctx.session.changingRole = false;
        await ctx.reply(
            `‚úÖ <b>–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!</b>\n\n` +
            `–í–∞—à–∞ –Ω–æ–≤–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–æ–ª—å: <b>${roleNames[selectedRole]}</b>\n\n` +
            `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏.`,
            {
                parse_mode: 'HTML',
                reply_markup: profileKeyboard(selectedRole, ctx.user.telegram_id, ADMIN_ID).reply_markup
            }
        );
    } else {
        return next();
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
bot.on('text', async (ctx, next) => {
    console.log('User text:', ctx.message.text);
    if (ctx.session?.createProject) {
        return handleCreateProjectStep(ctx);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    if (ctx.session?.pendingDelete) {
        const handled = await handleDeleteConfirmation(ctx);
        if (handled) return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if (ctx.session?.profileState || 
        ctx.session?.waitingForSalaryInput || 
        ctx.session?.waitingForContactsInput || 
        ctx.session?.waitingForAchievementsInput ||
        ctx.session?.waitingForSpecializationInput ||
        ctx.session?.waitingForSkillsInput) {
        return handleTextInput(ctx);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É
    const chatMatch = ctx.message.text.match(/^#chat_(\d+)/);
    if (chatMatch) {
        const projectId = chatMatch[1];
        if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
        const project = await Project.findById(projectId);
        if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        const pm = await ProjectManager.findActiveChat(projectId, ctx.user.id);
        if (!pm) return ctx.reply('–ß–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫.');
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        let peerId;
        if (ctx.user.id === project.customer_id) peerId = pm.manager_id;
        else peerId = project.customer_id;
        const peer = await User.findById(peerId);
        if (!peer) return ctx.reply('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ProjectMessage.create({ project_id: projectId, sender_id: ctx.user.id, text: ctx.message.text });
        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
        await ctx.telegram.sendMessage(
            peer.telegram_id,
            `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${ctx.message.text}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ #chat_${projectId} –∏ —Ç–µ–∫—Å—Ç)`
        );
        await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
        return;
    }
    
    if (ctx.session?.editProfileMode === 'one_field' && !ctx.session.editProfileField) {
        // –û–∂–∏–¥–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–ª—è
        const user = await User.findByTelegramId(ctx.from.id);
        return handleEditFieldInput(ctx, user);
    }
    if (ctx.session?.editProfileMode === 'one_field' && ctx.session.editProfileField) {
        // –û–∂–∏–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        const user = await User.findByTelegramId(ctx.from.id);
        await handleEditFieldValue(ctx, user);
        return;
    }
    
    return next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
bot.hears(/^\/delete_project_(\d+)$/, roleCheck(['customer']), deleteProject);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
bot.command('cancel', async (ctx) => {
    if (ctx.session?.createProject) {
        delete ctx.session.createProject;
        await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    } else {
        await ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
bot.command('project', async (ctx) => {
    const projectId = ctx.message.text.split(' ')[1];
    if (projectId) {
        ctx.params = [projectId];
        return projectDetails(ctx);
    }
    return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–æ–µ–∫—Ç–∞: /project [ID]');
});

bot.command('join', async (ctx) => {
    const projectId = ctx.message.text.split(' ')[1];
    if (projectId) {
        ctx.params = [projectId];
        return joinProject(ctx);
    }
    return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–æ–µ–∫—Ç–∞: /join [ID]');
});

// –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–∞–≤ –∑–∞–∫–∞–∑—á–∏–∫–∞
bot.command('transfer_owner', customerOnly, async (ctx) => {
    const args = ctx.message.text.split(' ').slice(1);
    const [projectId, username] = args;
    if (!projectId || !username) {
        return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /transfer_owner [projectId] [username]');
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞
    const isOwner = await Project.isOwner(ctx.from.id, projectId);
    if (!isOwner) {
        return ctx.reply('‚ùå –í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!');
    }
    try {
        await Project.transferOwnership(projectId, username);
        await ctx.reply(`‚úÖ –ü—Ä–∞–≤–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω—ã @${username}`);
    } catch (error) {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.action(/project_members_(\d+)/, async (ctx) => {
    const projectId = ctx.match[1];
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    await ctx.answerCbQuery();
    await ctx.reply(`üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`, { parse_mode: 'HTML' });
});

bot.action(/project_audit_(\d+)/, async (ctx) => {
    const projectId = ctx.match[1];
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∞—É–¥–∏—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
    await ctx.answerCbQuery();
    await ctx.reply(`üìä <b>–ê—É–¥–∏—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`, { parse_mode: 'HTML' });
});

bot.action(/project_status_(\d+)/, async (ctx) => {
    const projectId = ctx.match[1];
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞
    await ctx.answerCbQuery();
    await ctx.reply(`üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`, { parse_mode: 'HTML' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
bot.action(/project_delete_(\d+)/, async (ctx) => {
    const projectId = ctx.match[1];
    await ctx.answerCbQuery();
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ deleteProject
    const mockCtx = {
        user: ctx.user,
        from: ctx.from,
        message: { text: `/delete_project_${projectId}` },
        reply: ctx.reply.bind(ctx),
        session: ctx.session
    };
    
    await deleteProject(mockCtx);
});

bot.action(/join_project_(\d+)/, async (ctx) => {
    const projectId = ctx.match[1];
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—Ä–æ–µ–∫—Ç—É
    await ctx.answerCbQuery();
    await ctx.reply(`‚úÖ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É ${projectId}</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`, { parse_mode: 'HTML' });
});

bot.action(/reject_join_(\d+)/, async (ctx) => {
    const projectId = ctx.match[1];
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await ctx.answerCbQuery();
    await ctx.reply(`‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É ${projectId}</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`, { parse_mode: 'HTML' });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot.action(/^spec_/, handleSpecialization);
bot.action(/^exp_/, handleExperience);
bot.action(/^skill_/, handleSkills);
bot.action('skills_done', handleSkillsDone);
bot.action('skills_clear', handleSkillsClear);
bot.action('profile_back', handleProfileBack);
bot.action('fill_achievements', handleFillAchievements);
bot.action('skip_optional', handleAchievements);
bot.action(/^salary_/, handleSalary);
bot.action(/^manager_/, handleManagerProfile);
bot.action('back_to_managers', handleBackToManagers);
bot.action('fill_salary', handleFillSalary);
bot.action('fill_contacts', handleFillContacts);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ 'üîô –ù–∞–∑–∞–¥'
bot.hears('üîô –ù–∞–∑–∞–¥', roleCheck(), async (ctx) => {
    await ctx.reply(
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        {
            reply_markup: getKeyboardByRole(ctx.user.main_role).reply_markup
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ 'üßπ –°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç'
bot.hears('üßπ –°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç', roleCheck(), async (ctx) => {
    if (String(ctx.user.telegram_id) !== String(ADMIN_ID)) {
        return ctx.reply('‚õî –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userProjects = await Project.findByCustomerId(ctx.user.id);
    const currentProjects = userProjects.length;
    const maxProjects = 2;
    
    let message = `üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n`;
    message += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${ctx.user.username || ctx.user.first_name}\n`;
    message += `üìã –¢–µ–∫—É—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: ${currentProjects}/${maxProjects}\n`;
    
    if (currentProjects > 0) {
        message += `\n<b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:</b>\n`;
        for (const project of userProjects) {
            message += `‚Ä¢ ${project.name} (ID: ${project.id})\n`;
        }
    }
    
    if (currentProjects >= maxProjects) {
        message += `\n‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤.`;
    } else {
        message += `\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –µ—â–µ ${maxProjects - currentProjects} –ø—Ä–æ–µ–∫—Ç(–æ–≤).`;
    }
    
    await ctx.reply(message, { parse_mode: 'HTML' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
bot.action(/^accept_invite_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    const project = await Project.findById(projectId);
    if (!project) {
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω –∑–∞–∫–∞–∑—á–∏–∫–æ–º.');
        return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å project_managers
    const pm = await ProjectManager.findByProjectAndManager(projectId, ctx.user.id);
    if (!pm) {
        await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç
    if (pm.status === 'accepted') {
        await ctx.answerCbQuery('‚úÖ –í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –æ—Ç–∫–∞–∑–∞–ª—Å—è
    if (pm.status === 'declined') {
        await ctx.answerCbQuery('‚ùå –í—ã —É–∂–µ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —ç—Ç–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.');
        return;
    }
    
    try {
        // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await ProjectManager.updateStatus(pm.id, 'accepted', pm.offer);
        
        // 2. –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ project_members (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã)
        const hasMember = await Project.hasMember(projectId, ctx.user.id, 'manager');
        
        if (!hasMember) {
            await Project.addMember(projectId, ctx.user.id, 'manager');
        }
        
        // 3. –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
        await Project.updateStatus(projectId, 'searching_executors');
        
        // 4. –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
        const customer = await User.findById(project.customer_id);
        if (customer) {
            await ctx.telegram.sendMessage(
                customer.telegram_id,
                `‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä @${ctx.user.username || ''} –ø—Ä–∏–Ω—è–ª –≤–∞—à –ø—Ä–æ–µ–∫—Ç ¬´${project.name}¬ª.`
            );
        }
        
        // 5. –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await AuditLog.create(
            ctx.user.id,
            'MANAGER_ACCEPTED',
            projectId,
            { managerUsername: ctx.user.username, projectName: project.name }
        );
        
        // 6. –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–µ–∫—Ç–∞
        ctx.params = [projectId];
        await projectDetails(ctx);
        
        await ctx.answerCbQuery('‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!');
        
    } catch (error) {
        console.error('Error in accept_invite:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot.action(/^decline_invite_(\d+)$/, async (ctx) => {
    try {
        console.log('[decline_invite] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:', ctx.match[1]);
        console.log('[decline_invite] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', ctx.from?.id, ctx.from?.username);
        
        const projectId = ctx.match[1];
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!ctx.user) {
            ctx.user = await User.findByTelegramId(ctx.from.id);
            if (!ctx.user) {
                await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
                return;
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
        const project = await Project.findById(projectId);
        if (!project) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω –∑–∞–∫–∞–∑—á–∏–∫–æ–º.');
            return;
        }
        
        console.log('[decline_invite] –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω:', project.name);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–∫–∞–∑—á–∏–∫–æ–º
        if (project.customer_id === ctx.user.id) {
            console.log('[decline_invite] –ó–∞–∫–∞–∑—á–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞');
            await ctx.answerCbQuery('‚ùå –ó–∞–∫–∞–∑—á–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.');
            return;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å project_managers (–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ)
        const pm = await ProjectManager.findByProjectAndManager(projectId, ctx.user.id);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞
        const projectMember = await Project.hasMember(projectId, ctx.user.id);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–∫–∞–∑–∞
        let declineType = 'none';
        let userRole = 'unknown';
        
        if (pm) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ project_managers
            if (pm.status === 'declined') {
                await ctx.answerCbQuery('‚ùå –í—ã —É–∂–µ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —ç—Ç–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.');
                return;
            }
            
            if (pm.status === 'pending') {
                declineType = 'invitation';
                userRole = 'manager';
                console.log('[decline_invite] –û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (pending)');
            } else if (pm.status === 'accepted') {
                declineType = 'accepted_manager';
                userRole = 'manager';
                console.log('[decline_invite] –û—Ç–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (accepted)');
            }
        } else if (projectMember) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–æ –Ω–µ –≤ project_managers)
            const members = await Project.getMembers(projectId);
            const userMember = members.find(m => m.id === ctx.user.id);
            if (userMember) {
                declineType = 'project_member';
                userRole = userMember.member_role;
                console.log('[decline_invite] –û—Ç–∫–∞–∑ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:', userRole);
            }
        }
        
        if (declineType === 'none') {
            console.log('[decline_invite] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É');
            await ctx.answerCbQuery('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.');
            return;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–∞–∑ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if (declineType === 'invitation') {
            // –û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ declined
            console.log('[decline_invite] –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ declined');
            await ProjectManager.updateStatus(pm.id, 'declined');
            
        } else if (declineType === 'accepted_manager') {
            // –û—Ç–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - —É–¥–∞–ª—è–µ–º –∏–∑ project_members –∏ project_managers
            console.log('[decline_invite] –£–¥–∞–ª—è–µ–º –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
            await Project.removeMember(projectId, ctx.user.id);
            await ProjectManager.deleteByProjectAndManager(projectId, ctx.user.id);
            
        } else if (declineType === 'project_member') {
            // –û—Ç–∫–∞–∑ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ - —É–¥–∞–ª—è–µ–º –∏–∑ project_members
            console.log('[decline_invite] –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞');
            await Project.removeMember(projectId, ctx.user.id);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
        const remainingManagers = await ProjectManager.findByProject(projectId);
        const acceptedManagers = remainingManagers.filter(m => m.status === 'accepted');
        
        console.log('[decline_invite] –û—Å—Ç–∞–≤—à–∏–µ—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä—ã:', acceptedManagers.length);
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∫ –∑–∞–∫–∞–∑—á–∏–∫—É
        if (acceptedManagers.length === 0) {
            console.log('[decline_invite] –ù–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∑–∞–∫–∞–∑—á–∏–∫—É');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            await Project.addMember(projectId, project.customer_id, 'manager');
            await ProjectManager.create({ 
                project_id: projectId, 
                manager_id: project.customer_id, 
                status: 'accepted' 
            });
            
            // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 'searching_executors'
            await Project.updateStatus(projectId, 'searching_executors');
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
        const customer = await User.findById(project.customer_id);
        if (customer) {
            let message;
            if (declineType === 'invitation') {
                message = `‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä @${ctx.user.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç ¬´${project.name}¬ª.`;
            } else {
                const roleText = userRole === 'manager' ? '–º–µ–Ω–µ–¥–∂–µ—Ä' : '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å';
                message = `‚ùå ${roleText.charAt(0).toUpperCase() + roleText.slice(1)} @${ctx.user.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ ¬´${project.name}¬ª.`;
            }
            
            console.log('[decline_invite] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É:', customer.telegram_id);
            await ctx.telegram.sendMessage(customer.telegram_id, message);
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await AuditLog.create(
            ctx.user.id,
            'PROJECT_DECLINED',
            projectId,
            { 
                username: ctx.user.username, 
                projectName: project.name,
                role: userRole,
                declineType: declineType
            }
        );
        
        console.log('[decline_invite] –û—Ç–∫–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        
        // –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç–∫–∞–∑–∞
        let responseMessage;
        if (declineType === 'invitation') {
            responseMessage = '‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.';
        } else {
            responseMessage = '‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ.';
        }
        
        await ctx.answerCbQuery(responseMessage);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–µ–∫—Ç–∞ (–µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ)
        try {
            ctx.params = [projectId];
            await projectDetails(ctx);
        } catch (error) {
            console.log('[decline_invite] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:', error.message);
        }
        
    } catch (error) {
        console.error('[decline_invite] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–∞–∑–∞:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
bot.action(/^project_details_(\d+)$/, async (ctx) => {
    console.log('=== PROJECT DETAILS ACTION TRIGGERED ===');
    console.log('User:', ctx.user?.id, ctx.user?.username);
    console.log('Match:', ctx.match);
    
    const projectId = ctx.match[1];
    console.log('=== PROJECT DETAILS ACTION ===');
    console.log('Project ID from action:', projectId);
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ projectDetails
    ctx.params = [projectId];
    
    try {
        await projectDetails(ctx);
    } catch (error) {
        console.error('Error in project_details action:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–∞.');
    }
    
    await ctx.answerCbQuery();
});

// –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç
bot.action(/^project_accept_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    const project = await Project.findById(projectId);
    if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª–∏–∫–∞–ª—Å—è –ª–∏ —É–∂–µ
    const existing = await ProjectManager.findByProjectAndManager(projectId, ctx.user.id);
    if (existing) return ctx.reply('–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç.');
    await ProjectManager.create({ project_id: projectId, manager_id: ctx.user.id, status: 'accepted' });
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
    const customer = await User.findById(project.customer_id);
    if (customer) {
        await ctx.telegram.sendMessage(
            customer.telegram_id,
            `–ú–µ–Ω–µ–¥–∂–µ—Ä @${ctx.user.username || ''} –ø—Ä–∏–Ω—è–ª –≤–∞—à –ø—Ä–æ–µ–∫—Ç "${project.name}"!`
        );
    }
    await ctx.reply('–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–æ–µ–∫—Ç! –ó–∞–∫–∞–∑—á–∏–∫ —É–≤–µ–¥–æ–º–ª—ë–Ω.');
    await ctx.answerCbQuery();
});

// –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –ø—Ä–æ–µ–∫—Ç
bot.action(/^project_decline_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    const project = await Project.findById(projectId);
    if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    const existing = await ProjectManager.findByProjectAndManager(projectId, ctx.user.id);
    if (existing) return ctx.reply('–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç.');
    await ProjectManager.create({ project_id: projectId, manager_id: ctx.user.id, status: 'declined' });
    await ctx.reply('–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–æ–µ–∫—Ç.');
    await ctx.answerCbQuery();
});

// –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É—Å–ª–æ–≤–∏—è
bot.action(/^project_offer_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    const project = await Project.findById(projectId);
    if (!project) {
        await ctx.reply('–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω –∑–∞–∫–∞–∑—á–∏–∫–æ–º.');
        return ctx.answerCbQuery();
    }
    ctx.session = ctx.session || {};
    ctx.session.projectOffer = { projectId };
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —É—Å–ª–æ–≤–∏—è/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ì–æ—Ç–æ–≤ –∑–∞ 40 —Ç—ã—Å., —Å—Ä–æ–∫ 3 –Ω–µ–¥–µ–ª–∏"):');
    await ctx.answerCbQuery();
});

// –ó–∞–∫–∞–∑—á–∏–∫ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot.action(/^assign_manager_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    const project = await Project.findById(projectId);
    if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (project.customer_id !== ctx.user.id) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
    const allowedStatuses = ['active', 'searching_executors'];
    if (!allowedStatuses.includes(project.status)) {
        const statusNames = {
            'draft': '—á–µ—Ä–Ω–æ–≤–∏–∫',
            'archived': '–∞—Ä—Ö–∏–≤',
            'searching_manager': '–ø–æ–∏—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
            'in_progress': '–≤ —Ä–∞–±–æ—Ç–µ'
        };
        const statusName = statusNames[project.status] || project.status;
        await ctx.reply(`‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ "${statusName}".\n\n–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ "–ê–∫—Ç–∏–≤–Ω—ã–π" –∏–ª–∏ "–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π".`);
        return ctx.answerCbQuery();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    const managers = await User.findVisibleByRole('manager');
    if (!managers || managers.length === 0) {
        await ctx.reply('‚ùå –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º.');
        return ctx.answerCbQuery();
    }
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    const availableManagers = managers.filter(m => m.id !== ctx.user.id);
    if (availableManagers.length === 0) {
        await ctx.reply('‚ùå –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –∫—Ä–æ–º–µ –≤–∞—Å.');
        return ctx.answerCbQuery();
    }
    
    let list = 'üë®‚Äçüíº <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b>\n\n';
    for (const m of availableManagers) {
        let desc = [];
        if (m.specialization) desc.push(m.specialization);
        if (m.experience) desc.push(m.experience);
        if (m.skills) {
            let skills = m.skills;
            if (typeof skills === 'string') {
                try {
                    const arr = JSON.parse(skills);
                    if (Array.isArray(arr)) skills = arr.join(', ');
                } catch { /* ignore */ }
            }
            desc.push(`–ù–∞–≤—ã–∫–∏: ${skills}`);
        }
        list += `‚Ä¢ @${m.username} ‚Äî ${m.first_name || ''} ${m.last_name || ''}`;
        if (desc.length) list += `\n   ${desc.join(' | ')}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        let additionalInfo = [];
        if (m.salary_range) additionalInfo.push(`üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${m.salary_range}`);
        if (m.contacts) additionalInfo.push(`üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${m.contacts}`);
        
        if (additionalInfo.length > 0) {
            list += `\n   ${additionalInfo.join(' | ')}`;
        }
        
        list += '\n';
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    const buttons = availableManagers.map(m => [{
        text: `@${m.username}`,
        callback_data: `select_manager_${projectId}_${m.id}`
    }]);
    
    await ctx.reply(list, {
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: buttons }
    });
    await ctx.answerCbQuery();
});

// –ó–∞–∫–∞–∑—á–∏–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot.action(/^select_manager_(\d+)_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    const managerId = ctx.match[2];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    
    const project = await Project.findById(projectId);
    const manager = await User.findById(managerId);
    if (!project || !manager) {
        await ctx.reply('‚ùå –ü—Ä–æ–µ–∫—Ç –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return ctx.answerCbQuery();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (project.customer_id !== ctx.user.id) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.');
        return ctx.answerCbQuery();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    if (manager.main_role !== 'manager') {
        await ctx.reply(
            `‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${manager.username} –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.`
        );
        return ctx.answerCbQuery();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ –µ—â–µ –≤–∏–¥–∏–º—ã–π
    if (!manager.is_visible) {
        await ctx.reply(
            `‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${manager.username} –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.`
        );
        return ctx.answerCbQuery();
    }
    
    try {
        // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏–∑ —Ä–æ–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await ProjectManager.deleteByProjectAndManager(projectId, ctx.user.id);
        await Project.removeUserFromProjectRoles(ctx.user.id, projectId, 'manager');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await Project.addUserToProjectRoles(managerId, projectId, 'manager');
        await ProjectManager.create({ project_id: projectId, manager_id: managerId, status: 'pending' });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await ctx.telegram.sendMessage(
            manager.telegram_id,
            `–í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}" –æ—Ç ${ctx.user.first_name} ${ctx.user.last_name || ''}`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ —É—Å–ª–æ–≤–∏—è—Ö', callback_data: `project_preview_${project.id}` }
                        ],
                        [
                            { text: '‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è', callback_data: `accept_invite_${project.id}` },
                            { text: '‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data: `decline_invite_${project.id}` }
                        ]
                    ]
                }
            }
        );
        
        await ctx.reply(`‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä @${manager.username} –Ω–∞–∑–Ω–∞—á–µ–Ω –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω!`);
        
    } catch (error) {
        console.error('Error in select_manager:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
    
    await ctx.answerCbQuery();
});

// –ó–∞–∫–∞–∑—á–∏–∫ —É–±–∏—Ä–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot.action(/^remove_manager_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    const project = await Project.findById(projectId);
    if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (project.customer_id !== ctx.user.id) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    const managers = await ProjectManager.findByProject(projectId);
    const acceptedManagers = managers.filter(m => m.status === 'accepted');
    
    if (acceptedManagers.length === 0) {
        await ctx.reply('‚ùå –í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
        return ctx.answerCbQuery();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    let list = '‚ùå <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n';
    const buttons = [];
    
    for (const m of acceptedManagers) {
        const user = await User.findById(m.manager_id);
        if (user) {
            list += `‚Ä¢ @${user.username} ‚Äî ${user.first_name || ''} ${user.last_name || ''}\n`;
            buttons.push([{
                text: `–£–¥–∞–ª–∏—Ç—å @${user.username}`,
                callback_data: `confirm_remove_manager_${projectId}_${m.manager_id}`
            }]);
        }
    }
    
    await ctx.reply(list, {
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: buttons }
    });
    await ctx.answerCbQuery();
});

// –ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot.action(/^confirm_remove_manager_(\d+)_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    const managerId = ctx.match[2];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    
    const project = await Project.findById(projectId);
    const manager = await User.findById(managerId);
    if (!project || !manager) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (project.customer_id !== ctx.user.id) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    const allManagers = await ProjectManager.findByProject(projectId);
    const acceptedManagers = allManagers.filter(m => m.status === 'accepted');
    
    // –£–¥–∞–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    await ProjectManager.deleteByProjectAndManager(projectId, managerId);
    await Project.removeUserFromProjectRoles(managerId, projectId, 'manager');
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    await ctx.telegram.sendMessage(
        manager.telegram_id,
        `–í–∞—Å —É–¥–∞–ª–∏–ª–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"`
    );
    
    let responseMessage = `‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä @${manager.username} —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞!`;
    
    // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–∏–Ω—è—Ç—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
    if (acceptedManagers.length === 1) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await Project.addUserToProjectRoles(ctx.user.id, projectId, 'manager');
        await ProjectManager.create({ 
            project_id: projectId, 
            manager_id: ctx.user.id, 
            status: 'accepted' 
        });
        
        responseMessage += '\n\nüë®‚Äçüíº <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ü–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ –±—ã–ª –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞.';
    }
    
    await ctx.reply(responseMessage, { parse_mode: 'HTML' });
    await ctx.answerCbQuery();
});

// –ó–∞–∫–∞–∑—á–∏–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot.action(/^add_manager_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    const project = await Project.findById(projectId);
    if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (project.customer_id !== ctx.user.id) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
    const allowedStatuses = ['active', 'searching_executors'];
    if (!allowedStatuses.includes(project.status)) {
        const statusNames = {
            'draft': '—á–µ—Ä–Ω–æ–≤–∏–∫',
            'archived': '–∞—Ä—Ö–∏–≤',
            'searching_manager': '–ø–æ–∏—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
            'in_progress': '–≤ —Ä–∞–±–æ—Ç–µ'
        };
        const statusName = statusNames[project.status] || project.status;
        await ctx.reply(`‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ "${statusName}".\n\n–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ "–ê–∫—Ç–∏–≤–Ω—ã–π" –∏–ª–∏ "–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π".`);
        return ctx.answerCbQuery();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    const managers = await User.findVisibleByRole('manager');
    if (!managers || managers.length === 0) {
        await ctx.reply('‚ùå –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º.');
        return ctx.answerCbQuery();
    }
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    const existingManagers = await ProjectManager.findByProject(projectId);
    const existingManagerIds = existingManagers.map(m => m.manager_id);
    const availableManagers = managers.filter(m => 
        m.id !== ctx.user.id && !existingManagerIds.includes(m.id)
    );
    
    if (availableManagers.length === 0) {
        await ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.');
        return ctx.answerCbQuery();
    }
    
    let list = '‚ûï <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b>\n\n';
    for (const m of availableManagers) {
        let desc = [];
        if (m.specialization) desc.push(m.specialization);
        if (m.experience) desc.push(m.experience);
        if (m.skills) {
            let skills = m.skills;
            if (typeof skills === 'string') {
                try {
                    const arr = JSON.parse(skills);
                    if (Array.isArray(arr)) skills = arr.join(', ');
                } catch { /* ignore */ }
            }
            desc.push(`–ù–∞–≤—ã–∫–∏: ${skills}`);
        }
        list += `‚Ä¢ @${m.username} ‚Äî ${m.first_name || ''} ${m.last_name || ''}`;
        if (desc.length) list += `\n   ${desc.join(' | ')}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        let additionalInfo = [];
        if (m.salary_range) additionalInfo.push(`üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${m.salary_range}`);
        if (m.contacts) additionalInfo.push(`üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${m.contacts}`);
        
        if (additionalInfo.length > 0) {
            list += `\n   ${additionalInfo.join(' | ')}`;
        }
        
        list += '\n';
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    const buttons = availableManagers.map(m => [{
        text: `@${m.username}`,
        callback_data: `add_manager_select_${projectId}_${m.id}`
    }]);
    
    await ctx.reply(list, {
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: buttons }
    });
    await ctx.answerCbQuery();
});

// –ó–∞–∫–∞–∑—á–∏–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot.action(/^add_manager_select_(\d+)_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    const managerId = ctx.match[2];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    
    const project = await Project.findById(projectId);
    const manager = await User.findById(managerId);
    if (!project || !manager) {
        await ctx.reply('‚ùå –ü—Ä–æ–µ–∫—Ç –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return ctx.answerCbQuery();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (project.customer_id !== ctx.user.id) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.');
        return ctx.answerCbQuery();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    if (manager.main_role !== 'manager') {
        await ctx.reply(
            `‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${manager.username} –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.`
        );
        return ctx.answerCbQuery();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ –µ—â–µ –≤–∏–¥–∏–º—ã–π
    if (!manager.is_visible) {
        await ctx.reply(
            `‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${manager.username} –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.`
        );
        return ctx.answerCbQuery();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–º–∞–∫—Å–∏–º—É–º 3)
    const existingManagers = await ProjectManager.findByProject(projectId);
    const totalManagers = existingManagers.length;
    
    if (totalManagers >= 3) {
        await ctx.reply('‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–º–∞–∫—Å–∏–º—É–º 3). –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.');
        return ctx.answerCbQuery();
    }
    
    try {
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await Project.addUserToProjectRoles(managerId, projectId, 'manager');
        await ProjectManager.create({ project_id: projectId, manager_id: managerId, status: 'pending' });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await ctx.telegram.sendMessage(
            manager.telegram_id,
            `–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –ø—Ä–æ–µ–∫—Ç "${project.name}" –æ—Ç ${ctx.user.first_name} ${ctx.user.last_name || ''}`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ —É—Å–ª–æ–≤–∏—è—Ö', callback_data: `project_preview_${project.id}` }
                        ],
                        [
                            { text: '‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è', callback_data: `accept_invite_${project.id}` },
                            { text: '‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data: `decline_invite_${project.id}` }
                        ]
                    ]
                }
            }
        );
        
        await ctx.reply(`‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä @${manager.username} –ø—Ä–∏–≥–ª–∞—à–µ–Ω!`);
        
    } catch (error) {
        console.error('Error in add_manager_select:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
    
    await ctx.answerCbQuery();
});

// –ó–∞–∫–∞–∑—á–∏–∫ –∏—â–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
bot.action(/^search_manager_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    const project = await Project.findById(projectId);
    if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (project.customer_id !== ctx.user.id) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    const existingManagers = await ProjectManager.findByProject(projectId);
    if (existingManagers.length >= 3) {
        await ctx.reply('‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–º–∞–∫—Å–∏–º—É–º 3). –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.');
        return ctx.answerCbQuery();
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
    ctx.session = ctx.session || {};
    ctx.session.searchingManager = true;
    ctx.session.searchProjectId = projectId;
    
    await ctx.reply(
        'üîç <b>–ü–æ–∏—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É</b>\n\n' +
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–±–µ–∑ @):',
        { 
            parse_mode: 'HTML',
            reply_markup: {
                keyboard: [['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫']],
                resize_keyboard: true,
                one_time_keyboard: true
            }
        }
    );
    await ctx.answerCbQuery();
});

// –ó–∞–∫–∞–∑—á–∏–∫ –º–µ–Ω—è–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot.action(/^change_manager_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    const project = await Project.findById(projectId);
    if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (project.customer_id !== ctx.user.id) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    const currentManagers = await ProjectManager.findByProject(projectId);
    const acceptedManagers = currentManagers.filter(m => m.status === 'accepted');
    
    if (acceptedManagers.length === 0) {
        await ctx.reply('‚ùå –í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —Å–º–µ–Ω—ã.');
        return ctx.answerCbQuery();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —Å–º–µ–Ω—ã
    let list = 'üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã:</b>\n\n';
    const buttons = [];
    
    for (const m of acceptedManagers) {
        const user = await User.findById(m.manager_id);
        if (user) {
            list += `‚Ä¢ @${user.username} ‚Äî ${user.first_name || ''} ${user.last_name || ''}\n`;
            buttons.push([{
                text: `–°–º–µ–Ω–∏—Ç—å @${user.username}`,
                callback_data: `change_manager_select_${projectId}_${m.manager_id}`
            }]);
        }
    }
    
    await ctx.reply(list, {
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: buttons }
    });
    await ctx.answerCbQuery();
});

// –ó–∞–∫–∞–∑—á–∏–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã
bot.action(/^change_manager_select_(\d+)_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    const oldManagerId = ctx.match[2];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    
    const project = await Project.findById(projectId);
    const oldManager = await User.findById(oldManagerId);
    if (!project || !oldManager) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (project.customer_id !== ctx.user.id) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
    const allowedStatuses = ['active', 'searching_executors'];
    if (!allowedStatuses.includes(project.status)) {
        const statusNames = {
            'draft': '—á–µ—Ä–Ω–æ–≤–∏–∫',
            'archived': '–∞—Ä—Ö–∏–≤',
            'searching_manager': '–ø–æ–∏—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
            'in_progress': '–≤ —Ä–∞–±–æ—Ç–µ'
        };
        const statusName = statusNames[project.status] || project.status;
        await ctx.reply(`‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ "${statusName}".\n\n–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ "–ê–∫—Ç–∏–≤–Ω—ã–π" –∏–ª–∏ "–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π".`);
        return ctx.answerCbQuery();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã
    const managers = await User.findVisibleByRole('manager');
    if (!managers || managers.length === 0) {
        await ctx.reply('‚ùå –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º.');
        return ctx.answerCbQuery();
    }
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    const availableManagers = managers.filter(m => 
        m.id !== ctx.user.id && m.id !== oldManagerId
    );
    
    if (availableManagers.length === 0) {
        await ctx.reply('‚ùå –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã.');
        return ctx.answerCbQuery();
    }
    
    let list = `üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã @${oldManager.username}:</b>\n\n`;
    for (const m of availableManagers) {
        let desc = [];
        if (m.specialization) desc.push(m.specialization);
        if (m.experience) desc.push(m.experience);
        if (m.skills) {
            let skills = m.skills;
            if (typeof skills === 'string') {
                try {
                    const arr = JSON.parse(skills);
                    if (Array.isArray(arr)) skills = arr.join(', ');
                } catch { /* ignore */ }
            }
            desc.push(`–ù–∞–≤—ã–∫–∏: ${skills}`);
        }
        list += `‚Ä¢ @${m.username} ‚Äî ${m.first_name || ''} ${m.last_name || ''}`;
        if (desc.length) list += `\n   ${desc.join(' | ')}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        let additionalInfo = [];
        if (m.salary_range) additionalInfo.push(`üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${m.salary_range}`);
        if (m.contacts) additionalInfo.push(`üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${m.contacts}`);
        
        if (additionalInfo.length > 0) {
            list += `\n   ${additionalInfo.join(' | ')}`;
        }
        
        list += '\n';
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    const buttons = availableManagers.map(m => [{
        text: `@${m.username}`,
        callback_data: `change_manager_confirm_${projectId}_${oldManagerId}_${m.id}`
    }]);
    
    await ctx.reply(list, {
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: buttons }
    });
    await ctx.answerCbQuery();
});

// –ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–º–µ–Ω—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot.action(/^change_manager_confirm_(\d+)_(\d+)_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    const oldManagerId = ctx.match[2];
    const newManagerId = ctx.match[3];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    
    const project = await Project.findById(projectId);
    const oldManager = await User.findById(oldManagerId);
    const newManager = await User.findById(newManagerId);
    if (!project || !oldManager || !newManager) {
        await ctx.reply('‚ùå –ü—Ä–æ–µ–∫—Ç –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return ctx.answerCbQuery();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (project.customer_id !== ctx.user.id) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.');
        return ctx.answerCbQuery();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ –µ—â–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    if (newManager.main_role !== 'manager') {
        await ctx.reply(
            `‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${newManager.username} –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.`
        );
        return ctx.answerCbQuery();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ –µ—â–µ –≤–∏–¥–∏–º—ã–π
    if (!newManager.is_visible) {
        await ctx.reply(
            `‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${newManager.username} –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.`
        );
        return ctx.answerCbQuery();
    }
    
    try {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await ProjectManager.deleteByProjectAndManager(projectId, oldManagerId);
        await Project.removeUserFromProjectRoles(oldManagerId, projectId, 'manager');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await Project.addUserToProjectRoles(newManagerId, projectId, 'manager');
        await ProjectManager.create({ project_id: projectId, manager_id: newManagerId, status: 'pending' });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await ctx.telegram.sendMessage(
            oldManager.telegram_id,
            `–í–∞—Å –∑–∞–º–µ–Ω–∏–ª–∏ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ "${project.name}"`
        );
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await ctx.telegram.sendMessage(
            newManager.telegram_id,
            `–í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}" –æ—Ç ${ctx.user.first_name} ${ctx.user.last_name || ''}`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ —É—Å–ª–æ–≤–∏—è—Ö', callback_data: `project_preview_${project.id}` }
                        ],
                        [
                            { text: '‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è', callback_data: `accept_invite_${project.id}` },
                            { text: '‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data: `decline_invite_${project.id}` }
                        ]
                    ]
                }
            }
        );
        
        await ctx.reply(`‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä @${oldManager.username} –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ @${newManager.username}!`);
        
    } catch (error) {
        console.error('Error in change_manager_confirm:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
    
    await ctx.answerCbQuery();
});

// –ó–∞–∫–∞–∑—á–∏–∫ –∏–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
bot.action(/^change_status_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    const project = await Project.findById(projectId);
    if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (project.customer_id !== ctx.user.id) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.');
    }
    
    const statusButtons = [
        [
            { text: 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫', callback_data: `set_status_${projectId}_draft` },
            { text: 'üöÄ –ê–∫—Ç–∏–≤–Ω—ã–π', callback_data: `set_status_${projectId}_active` }
        ],
        [
            { text: 'üöß –í —Ä–∞–±–æ—Ç–µ', callback_data: `set_status_${projectId}_in_progress` },
            { text: 'üì¶ –ê—Ä—Ö–∏–≤', callback_data: `set_status_${projectId}_archived` }
        ]
    ];
    
    await ctx.reply('üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:</b>', {
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: statusButtons }
    });
    await ctx.answerCbQuery();
});

// –ó–∞–∫–∞–∑—á–∏–∫ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
bot.action(/^set_status_(\d+)_(.+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    const newStatus = ctx.match[2];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    
    const project = await Project.findById(projectId);
    if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (project.customer_id !== ctx.user.id) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await Project.updateStatus(projectId, newStatus);
    
    const statusNames = {
        'draft': 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫',
        'active': 'üöÄ –ê–∫—Ç–∏–≤–Ω—ã–π',
        'in_progress': 'üöß –í —Ä–∞–±–æ—Ç–µ',
        'archived': 'üì¶ –ê—Ä—Ö–∏–≤'
    };
    
    await ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${statusNames[newStatus] || newStatus}`);
    await ctx.answerCbQuery();
});

// –ó–∞–∫–∞–∑—á–∏–∫ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
bot.action(/^delete_project_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    const project = await Project.findById(projectId);
    if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (project.customer_id !== ctx.user.id) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
    if (project.status === 'active') {
        return ctx.reply('‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç. –°–Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ê—Ä—Ö–∏–≤".');
    }
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await ctx.reply(
        `üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n` +
        `üìã <b>–ü—Ä–æ–µ–∫—Ç:</b> ${project.name}\n` +
        `üÜî <b>ID:</b> ${projectId}\n\n` +
        `‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n` +
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç?`,
        {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `confirm_delete_${projectId}` },
                        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel_delete_${projectId}` }
                    ]
                ]
            }
        }
    );
    await ctx.answerCbQuery();
});

// –ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
bot.action(/^confirm_delete_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    
    const project = await Project.findById(projectId);
    if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (project.customer_id !== ctx.user.id) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.');
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
    const success = await Project.delete(projectId, ctx.user.id);
    
    if (success) {
        await ctx.reply(
            `‚úÖ <b>–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n` +
            `üìã –ü—Ä–æ–µ–∫—Ç: ${project.name}\n` +
            `üÜî ID: ${projectId}\n\n` +
            `üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –±—ã–ª–∏ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã.`,
            { parse_mode: 'HTML' }
        );
    } else {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    await ctx.answerCbQuery();
});

// –ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–º–µ–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
bot.action(/^cancel_delete_(\d+)$/, async (ctx) => {
    await ctx.reply('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    await ctx.answerCbQuery();
});

// –ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å, –æ—Ç–∫–ª–æ–Ω–∏—Ç—å, –æ–±—Å—É–¥–∏—Ç—å
bot.on('callback_query', async (ctx, next) => {
    if (ctx.callbackQuery.data.startsWith('customer_offer_action_')) {
        const parts = ctx.callbackQuery.data.split('_');
        const action = parts[3];
        const projectId = parts[4];
        const managerId = parts[5];
        const project = await Project.findById(projectId);
        const manager = await User.findById(managerId);
        if (!project || !manager) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        const pm = await ProjectManager.findByProjectAndManager(projectId, managerId);
        if (!pm) return ctx.reply('–û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        if (action === 'accept') {
            await ProjectManager.updateStatus(pm.id, 'accepted', pm.offer);
            await ProjectManager.activateChat(pm.id);
            await ctx.telegram.sendMessage(manager.telegram_id, `–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–µ–∫—Ç—É "${project.name}" –ø—Ä–∏–Ω—è—Ç–æ! –û—Ç–∫—Ä—ã—Ç —á–∞—Ç —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º.`);
            await ctx.reply('–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –û—Ç–∫—Ä—ã—Ç —á–∞—Ç.');
        } else if (action === 'decline') {
            await ProjectManager.updateStatus(pm.id, 'declined', pm.offer);
            await ctx.telegram.sendMessage(manager.telegram_id, `–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–µ–∫—Ç—É "${project.name}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.`);
            await ctx.reply('–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.');
        } else if (action === 'discuss') {
            await ctx.telegram.sendMessage(manager.telegram_id, `–ó–∞–∫–∞–∑—á–∏–∫ —Ö–æ—á–µ—Ç –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç—É "${project.name}". –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É –≤ —á–∞—Ç–µ.`);
            await ctx.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ. –û—Ç–∫—Ä–æ–π—Ç–µ —á–∞—Ç –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏.', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç', callback_data: `open_chat_${project.id}` }
                        ]
                    ]
                }
            });
        }
        await ctx.answerCbQuery();
        return;
    }
    return next();
});

// –ö–æ–≥–¥–∞ –∑–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –∫–Ω–æ–ø–∫–∏
async function notifyCustomerOffer(customer, manager, project, offer) {
    await bot.telegram.sendMessage(
        customer.telegram_id,
        `–ú–µ–Ω–µ–¥–∂–µ—Ä @${manager.username || ''} –ø—Ä–µ–¥–ª–æ–∂–∏–ª —É—Å–ª–æ–≤–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç—É "${project.name}":\n${offer}`,
        {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–ü—Ä–∏–Ω—è—Ç—å', callback_data: `customer_offer_action_accept_${project.id}_${manager.id}` },
                        { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `customer_offer_action_decline_${project.id}_${manager.id}` }
                    ],
                    [
                        { text: '–û–±—Å—É–¥–∏—Ç—å', callback_data: `customer_offer_action_discuss_${project.id}_${manager.id}` }
                    ]
                ]
            }
        }
    );
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—Ç—å notifyCustomerOffer
bot.on('text', async (ctx, next) => {
    if (ctx.session?.projectOffer) {
        const { projectId } = ctx.session.projectOffer;
        if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
        const project = await Project.findById(projectId);
        if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        const existing = await ProjectManager.findByProjectAndManager(projectId, ctx.user.id);
        if (existing) return ctx.reply('–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç.');
        await ProjectManager.create({ project_id: projectId, manager_id: ctx.user.id, status: 'negotiating', offer: ctx.message.text });
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        const customer = await User.findById(project.customer_id);
        if (customer) {
            await notifyCustomerOffer(customer, ctx.user, project, ctx.message.text);
        }
        await ctx.reply('–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É.');
        delete ctx.session.projectOffer;
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
    if (ctx.session?.searchingManager) {
        const projectId = ctx.session.searchProjectId;
        const username = ctx.message.text.replace(/^@/, ''); // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞
        if (ctx.message.text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫') {
            delete ctx.session.searchingManager;
            delete ctx.session.searchProjectId;
            await ctx.reply(
                '‚úÖ –ü–æ–∏—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω.',
                {
                    reply_markup: {
                        keyboard: [['üìã –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã']],
                        resize_keyboard: true
                    }
                }
            );
            return;
        }
        
        if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
        const project = await Project.findById(projectId);
        if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (project.customer_id !== ctx.user.id) {
            return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
        const allowedStatuses = ['active', 'searching_executors'];
        if (!allowedStatuses.includes(project.status)) {
            const statusNames = {
                'draft': '—á–µ—Ä–Ω–æ–≤–∏–∫',
                'archived': '–∞—Ä—Ö–∏–≤',
                'searching_manager': '–ø–æ–∏—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
                'in_progress': '–≤ —Ä–∞–±–æ—Ç–µ'
            };
            const statusName = statusNames[project.status] || project.status;
            await ctx.reply(`‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ "${statusName}".\n\n–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ "–ê–∫—Ç–∏–≤–Ω—ã–π" –∏–ª–∏ "–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π".`);
            return ctx.answerCbQuery();
        }
        
        // –ò—â–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
        const manager = await User.findByUsername(username);
        if (!manager) {
            await ctx.reply(
                '‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n' +
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":',
                {
                    reply_markup: {
                        keyboard: [['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫']],
                        resize_keyboard: true,
                        one_time_keyboard: true
                    }
                }
            );
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä
        if (manager.main_role !== 'manager') {
            await ctx.reply(
                '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.\n\n' +
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":',
                {
                    reply_markup: {
                        keyboard: [['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫']],
                        resize_keyboard: true,
                        one_time_keyboard: true
                    }
                }
            );
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∑–∞–∫–∞–∑—á–∏–∫
        if (manager.id === ctx.user.id) {
            await ctx.reply(
                '‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.\n\n' +
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":',
                {
                    reply_markup: {
                        keyboard: [['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫']],
                        resize_keyboard: true,
                        one_time_keyboard: true
                    }
                }
            );
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
        const existingManagers = await ProjectManager.findByProject(projectId);
        const isAlreadyManager = existingManagers.some(m => m.manager_id === manager.id);
        if (isAlreadyManager) {
            await ctx.reply(
                '‚ùå –≠—Ç–æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç.\n\n' +
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":',
                {
                    reply_markup: {
                        keyboard: [['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫']],
                        resize_keyboard: true,
                        one_time_keyboard: true
                    }
                }
            );
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        if (existingManagers.length >= 3) {
            await ctx.reply(
                '‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–º–∞–∫—Å–∏–º—É–º 3).\n\n' +
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":',
                {
                    reply_markup: {
                        keyboard: [['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫']],
                        resize_keyboard: true,
                        one_time_keyboard: true
                    }
                }
            );
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await Project.addUserToProjectRoles(manager.id, projectId, 'manager');
        await ProjectManager.create({ project_id: projectId, manager_id: manager.id, status: 'pending' });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await ctx.telegram.sendMessage(
            manager.telegram_id,
            `–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –ø—Ä–æ–µ–∫—Ç "${project.name}" –æ—Ç ${ctx.user.first_name} ${ctx.user.last_name || ''}`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ —É—Å–ª–æ–≤–∏—è—Ö', callback_data: `project_preview_${project.id}` }
                        ],
                        [
                            { text: '‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è', callback_data: `accept_invite_${project.id}` },
                            { text: '‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data: `decline_invite_${project.id}` }
                        ]
                    ]
                }
            }
        );
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–∏—Å–∫–∞
        delete ctx.session.searchingManager;
        delete ctx.session.searchProjectId;
        
        await ctx.reply(
            `‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä @${manager.username} –Ω–∞–π–¥–µ–Ω –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç!\n\n` +
            `–û–∂–∏–¥–∞–µ–º –µ–≥–æ –æ—Ç–≤–µ—Ç–∞...`,
            {
                reply_markup: {
                    keyboard: [['üìã –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã']],
                    resize_keyboard: true
                }
            }
        );
        return;
    }
    
    return next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
bot.on('message', async (ctx, next) => {
    console.log('Raw message:', ctx.message.text);
    if (ctx.message.handled) return next();
    
    if (ctx.message.text && !ctx.message.text.startsWith('/')) {
        await ctx.reply('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –Ω–∞–∂–º–∏—Ç–µ /start –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
    }
    return next();
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
bot.command(/history_(\d+)/, async (ctx) => {
    const projectId = ctx.match[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    const project = await Project.findById(projectId);
    if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –∏ –¥–æ—Å—Ç—É–ø
    const pm = await ProjectManager.findActiveChat(projectId, ctx.user.id);
    if (!pm) return ctx.reply('–ß–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫.');
    const messages = await ProjectMessage.findByProject(projectId);
    if (!messages.length) return ctx.reply('–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞.');
    let history = `<b>–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}:</b>\n\n`;
    for (const msg of messages) {
        const sender = await User.findById(msg.sender_id);
        if (msg.attachment_url) {
            history += `<b>${sender?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}:</b> [—Ñ–∞–π–ª] <code>${msg.attachment_url}</code> ${msg.text ? '‚Äî ' + msg.text : ''}\n`;
        } else {
            history += `<b>${sender?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}:</b> ${msg.text}\n`;
        }
    }
    await ctx.reply(history, { parse_mode: 'HTML' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–∞—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
bot.on(['document', 'photo', 'audio', 'video'], async (ctx, next) => {
    let caption = ctx.message.caption || '';
    const chatMatch = caption.match(/^#chat_(\d+)/);
    if (!chatMatch) return next();
    const projectId = chatMatch[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    const project = await Project.findById(projectId);
    if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    const pm = await ProjectManager.findActiveChat(projectId, ctx.user.id);
    if (!pm) return ctx.reply('–ß–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫.');
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    let peerId;
    if (ctx.user.id === project.customer_id) peerId = pm.manager_id;
    else peerId = project.customer_id;
    const peer = await User.findById(peerId);
    if (!peer) return ctx.reply('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º file_id –∏ —Ç–∏–ø
    let file_id = null, file_type = null;
    if (ctx.message.document) {
        file_id = ctx.message.document.file_id;
        file_type = 'document';
    } else if (ctx.message.photo) {
        file_id = ctx.message.photo[ctx.message.photo.length-1].file_id;
        file_type = 'photo';
    } else if (ctx.message.audio) {
        file_id = ctx.message.audio.file_id;
        file_type = 'audio';
    } else if (ctx.message.video) {
        file_id = ctx.message.video.file_id;
        file_type = 'video';
    }
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ProjectMessage.create({ project_id: projectId, sender_id: ctx.user.id, text: caption, attachment_url: file_id });
    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–∞–π–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
    if (file_type === 'document') {
        await ctx.telegram.sendDocument(peer.telegram_id, file_id, { caption: `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${caption}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ #chat_${projectId} –∏ —Ç–µ–∫—Å—Ç)` });
    } else if (file_type === 'photo') {
        await ctx.telegram.sendPhoto(peer.telegram_id, file_id, { caption: `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${caption}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ #chat_${projectId} –∏ —Ç–µ–∫—Å—Ç)` });
    } else if (file_type === 'audio') {
        await ctx.telegram.sendAudio(peer.telegram_id, file_id, { caption: `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${caption}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ #chat_${projectId} –∏ —Ç–µ–∫—Å—Ç)` });
    } else if (file_type === 'video') {
        await ctx.telegram.sendVideo(peer.telegram_id, file_id, { caption: `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${caption}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ #chat_${projectId} –∏ —Ç–µ–∫—Å—Ç)` });
    }
    await ctx.reply('–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç"
bot.action(/^open_chat_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    ctx.session = ctx.session || {};
    ctx.session.activeChatProjectId = projectId;
    await ctx.reply(`–ß–∞—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É ‚Ññ${projectId} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª—ã ‚Äî –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–∞—à–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –ø–æ –ø—Ä–æ–µ–∫—Ç—É.\n\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /stopchat.\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: /history_${projectId}`);
    await ctx.answerCbQuery();
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
bot.on('text', async (ctx, next) => {
    if (ctx.session?.activeChatProjectId) {
        const projectId = ctx.session.activeChatProjectId;
        if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
        const project = await Project.findById(projectId);
        if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        const pm = await ProjectManager.findActiveChat(projectId, ctx.user.id);
        if (!pm) return ctx.reply('–ß–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫.');
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        let peerId;
        if (ctx.user.id === project.customer_id) peerId = pm.manager_id;
        else peerId = project.customer_id;
        const peer = await User.findById(peerId);
        if (!peer) return ctx.reply('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ProjectMessage.create({ project_id: projectId, sender_id: ctx.user.id, text: ctx.message.text });
        await ctx.telegram.sendMessage(peer.telegram_id, `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${ctx.message.text}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–Ω–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É)`);
        await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞.');
        return;
    }
    return next();
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
bot.on(['document', 'photo', 'audio', 'video'], async (ctx, next) => {
    if (ctx.session?.activeChatProjectId) {
        const projectId = ctx.session.activeChatProjectId;
        if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
        const project = await Project.findById(projectId);
        if (!project) return ctx.reply('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        const pm = await ProjectManager.findActiveChat(projectId, ctx.user.id);
        if (!pm) return ctx.reply('–ß–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫.');
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        let peerId;
        if (ctx.user.id === project.customer_id) peerId = pm.manager_id;
        else peerId = project.customer_id;
        const peer = await User.findById(peerId);
        if (!peer) return ctx.reply('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º file_id –∏ —Ç–∏–ø
        let file_id = null, file_type = null;
        if (ctx.message.document) {
            file_id = ctx.message.document.file_id;
            file_type = 'document';
        } else if (ctx.message.photo) {
            file_id = ctx.message.photo[ctx.message.photo.length-1].file_id;
            file_type = 'photo';
        } else if (ctx.message.audio) {
            file_id = ctx.message.audio.file_id;
            file_type = 'audio';
        } else if (ctx.message.video) {
            file_id = ctx.message.video.file_id;
            file_type = 'video';
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ProjectMessage.create({ project_id: projectId, sender_id: ctx.user.id, text: ctx.message.caption || '', attachment_url: file_id });
        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–∞–π–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
        if (file_type === 'document') {
            await ctx.telegram.sendDocument(peer.telegram_id, file_id, { caption: `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${ctx.message.caption || ''}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ)` });
        } else if (file_type === 'photo') {
            await ctx.telegram.sendPhoto(peer.telegram_id, file_id, { caption: `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${ctx.message.caption || ''}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ)` });
        } else if (file_type === 'audio') {
            await ctx.telegram.sendAudio(peer.telegram_id, file_id, { caption: `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${ctx.message.caption || ''}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ)` });
        } else if (file_type === 'video') {
            await ctx.telegram.sendVideo(peer.telegram_id, file_id, { caption: `[–ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}]\n${ctx.user.first_name || ''}: ${ctx.message.caption || ''}\n(–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ)` });
        }
        await ctx.reply('–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞.');
        return;
    }
    return next();
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞
bot.command('stopchat', async (ctx) => {
    if (ctx.session?.activeChatProjectId) {
        delete ctx.session.activeChatProjectId;
        await ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞.');
    } else {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
bot.action(/^project_preview_(\d+)$/, async (ctx) => {
    console.log('=== PROJECT PREVIEW ACTION TRIGGERED ===');
    console.log('User:', ctx.user?.id, ctx.user?.username);
    console.log('Match:', ctx.match);
    
    const projectId = ctx.match[1];
    console.log('Project ID from preview action:', projectId);
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ projectPreview
    ctx.params = [projectId];
    
    try {
        await projectPreview(ctx);
    } catch (error) {
        console.error('Error in project_preview action:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ.');
    }
    
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
bot.action(/^leave_project_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    const project = await Project.findById(projectId);
    if (!project) {
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω.');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞
    const pm = await ProjectManager.findByProjectAndManager(projectId, ctx.user.id);
    if (!pm || pm.status !== 'accepted') {
        await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    if (project.status === 'completed' || project.status === 'archived') {
        await ctx.answerCbQuery('‚ùå –ù–µ–ª—å–∑—è –ø–æ–∫–∏–Ω—É—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∏–ª–∏ –∞—Ä—Ö–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç.');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
    const members = await Project.getMembers(projectId);
    const executors = members.filter(m => m.member_role === 'executor');
    const managers = members.filter(m => m.member_role === 'manager');
    
    // –ï—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä —è–≤–ª—è–µ—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞ (–∫—Ä–æ–º–µ –∑–∞–∫–∞–∑—á–∏–∫–∞)
    if (managers.length === 1 && executors.length === 0) {
        await ctx.answerCbQuery('‚ùå –ù–µ–ª—å–∑—è –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–µ–∫—Ç, –µ—Å–ª–∏ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º.');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await ctx.reply(
        `üö™ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n` +
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–µ–∫—Ç "${project.name}"?\n\n` +
        `‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞:\n` +
        `‚Ä¢ –í—ã –±—É–¥–µ—Ç–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞\n` +
        `‚Ä¢ –ó–∞–∫–∞–∑—á–∏–∫ –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≤–∞—à–µ–º –≤—ã—Ö–æ–¥–µ\n` +
        `‚Ä¢ –ï—Å–ª–∏ –≤—ã –±—ã–ª–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –∑–∞–∫–∞–∑—á–∏–∫ —Å—Ç–∞–Ω–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n` +
        `‚Ä¢ –ü—Ä–æ–µ–∫—Ç –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞—Ç—É—Å—É "–ê–∫—Ç–∏–≤–Ω—ã–π"\n\n` +
        `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞.`,
        {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –î–∞, –ø–æ–∫–∏–Ω—É—Ç—å', callback_data: `confirm_leave_project_${projectId}` },
                        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel_leave_project_${projectId}` }
                    ]
                ]
            }
        }
    );
    
    await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
bot.action(/^confirm_leave_project_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    const project = await Project.findById(projectId);
    if (!project) {
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω.');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞
    const pm = await ProjectManager.findByProjectAndManager(projectId, ctx.user.id);
    if (!pm || pm.status !== 'accepted') {
        await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.');
        return;
    }
    
    try {
        // 1. –£–¥–∞–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ project_managers
        await ProjectManager.deleteById(pm.id);
        
        // 2. –£–¥–∞–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ project_members
        await Project.removeMember(projectId, ctx.user.id);
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –ø—Ä–∏–Ω—è—Ç—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        const allManagers = await ProjectManager.findByProject(projectId);
        const acceptedManagers = allManagers.filter(m => m.status === 'accepted');
        
        // 4. –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –Ω–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
        if (acceptedManagers.length === 0) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            await Project.addMember(projectId, project.customer_id, 'manager');
            await ProjectManager.create({ 
                project_id: projectId, 
                manager_id: project.customer_id, 
                status: 'accepted' 
            });
            
            // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 'active' –µ—Å–ª–∏ –æ–Ω –±—ã–ª 'in_progress'
            if (project.status === 'in_progress') {
                await Project.updateStatus(projectId, 'active');
            }
        }
        
        // 5. –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
        const customer = await User.findById(project.customer_id);
        if (customer) {
            await ctx.telegram.sendMessage(
                customer.telegram_id,
                `üîî –ú–µ–Ω–µ–¥–∂–µ—Ä @${ctx.user.username || ''} –ø–æ–∫–∏–Ω—É–ª –≤–∞—à –ø—Ä–æ–µ–∫—Ç ¬´${project.name}¬ª.`
            );
        }
        
        // 6. –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await AuditLog.create(
            ctx.user.id,
            'MANAGER_LEFT_PROJECT',
            projectId,
            { managerUsername: ctx.user.username, projectName: project.name }
        );
        
        // 7. –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–µ–∫—Ç–∞
        ctx.params = [projectId];
        await projectDetails(ctx);
        
        await ctx.answerCbQuery('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –ø—Ä–æ–µ–∫—Ç!');
        
    } catch (error) {
        console.error('Error in confirm_leave_project:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
bot.action(/^cancel_leave_project_(\d+)$/, async (ctx) => {
    const projectId = ctx.match[1];
    if (!ctx.user) ctx.user = await User.findByTelegramId(ctx.from.id);
    
    // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–µ–∫—Ç–∞
    ctx.params = [projectId];
    await projectDetails(ctx);
    
    await ctx.answerCbQuery('‚ùå –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
bot.action('edit_one_field', async (ctx) => {
    const user = await User.findByTelegramId(ctx.from.id);
    await showEditFieldList(ctx, user);
    await ctx.answerCbQuery();
});
bot.action('edit_full_profile', async (ctx) => {
    await handleProfileCommand(ctx); // —Å—Ç–∞—Ä—ã–π flow
    await ctx.answerCbQuery();
});
bot.action('edit_cancel', async (ctx) => {
    await ctx.reply('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    await ctx.answerCbQuery();
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const startBot = async () => {
    try {
        console.log('üöÄ Starting Telegram bot...');
        await bot.launch();
        console.log('‚úÖ Bot started successfully!');
        
        // Graceful stop
        process.once('SIGINT', () => bot.stop('SIGINT'));
        process.once('SIGTERM', () => bot.stop('SIGTERM'));
        
    } catch (error) {
        console.error('‚ùå Error starting bot:', error);
        process.exit(1);
    }
};

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    startBot();
}

module.exports = { bot, startBot }; 