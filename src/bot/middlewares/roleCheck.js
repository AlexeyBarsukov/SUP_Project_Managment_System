const User = require('../../db/models/User');
const { roleSelectionKeyboard } = require('../keyboards');
const { Markup } = require('telegraf');

const roleCheck = (allowedRoles) => {
    return async (ctx, next) => {
        try {
            // –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log('[roleCheck] Start for user:', ctx.from?.id);
            
            if (!ctx.user) {
                ctx.user = await User.findByTelegramId(ctx.from.id);
                if (!ctx.user) {
                    console.log('[roleCheck] User not found');
                    await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start');
                    return; // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ü–µ–ø–æ—á–∫—É
                }
            }

            console.log('[roleCheck] Current user:', ctx.user);
            console.log('[roleCheck] Role:', ctx.user?.main_role);

            if (!ctx.user?.main_role) {
                console.log('[roleCheck] No main role');
                await ctx.reply(
                    '‚ùå –£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏.',
                    { reply_markup: roleSelectionKeyboard.reply_markup }
                );
                return; // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ü–µ–ø–æ—á–∫—É
            }

            if (allowedRoles && !allowedRoles.includes(ctx.user.main_role)) {
                const roleNames = {
                    'customer': '–ó–∞–∫–∞–∑—á–∏–∫',
                    'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
                    'executor': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'
                };
                console.log('[roleCheck] Role not allowed');
                await ctx.reply(
                    `‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–ª–µ–π: ${allowedRoles.map(r => roleNames[r]).join(', ')}\n` +
                    `–í–∞—à–∞ —Ä–æ–ª—å: ${roleNames[ctx.user.main_role]}`,
                    { parse_mode: 'HTML' }
                );
                return; // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ü–µ–ø–æ—á–∫—É
            }

            console.log('[roleCheck] Role check passed');
            return next(); // –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

        } catch (error) {
            console.error('[roleCheck] Error:', error);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–ª–∏');
            return; // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ü–µ–ø–æ—á–∫—É
        }
    };
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–æ–ª–µ–π
const customerOnly = roleCheck(['customer']);
const managerOnly = roleCheck(['manager']);
const executorOnly = roleCheck(['executor']);
const customerOrManager = roleCheck(['customer', 'manager']);

// Middleware: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É
const executorProfileRequired = () => {
    return async (ctx, next) => {
        if (ctx.user && ctx.user.main_role === 'executor') {
            // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É /profile, /fill_profile –∏ –∫–Ω–æ–ø–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
            const allowedCommands = ['/profile', '/fill_profile', '‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å', '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'];
            const projectCommands = [
                '–º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã', '–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã', '–æ—Ç–∫–ª–∏–∫–∏', '–Ω–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã', '–º–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                '/tasks', '/projects', '/responses'
            ];
            const text = (ctx.message?.text || ctx.update?.message?.text || ctx.callbackQuery?.data || '').toLowerCase();

            // --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º /fill_profile –∏ callback 'fill_profile' ---
            // 1. –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /fill_profile
            if (ctx.message && ctx.message.text && ctx.message.text.trim().toLowerCase().startsWith('/fill_profile')) {
                return next();
            }
            // 2. –ï—Å–ª–∏ —ç—Ç–æ callback 'fill_profile'
            if (ctx.callbackQuery && ctx.callbackQuery.data === 'fill_profile') {
                return next();
            }
            // 3. –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ callback-–∫–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–ª—è —à–∞–≥–æ–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            const allowedProfileStepCallbacks = [
                /^spec_/, /^exp_/, /^skill_/, 'skills_done', 'skills_clear', 'profile_back',
                'fill_achievements', 'skip_optional', 'fill_salary', 'fill_contacts', /^salary_/, 'fill_profile_yes', 'fill_profile_no'
            ];
            if (ctx.callbackQuery && ctx.callbackQuery.data) {
                for (const pattern of allowedProfileStepCallbacks) {
                    if (typeof pattern === 'string' && ctx.callbackQuery.data === pattern) return next();
                    if (pattern instanceof RegExp && pattern.test(ctx.callbackQuery.data)) return next();
                }
            }
            // 4. –†–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            if (ctx.session && ctx.session.executorProfile && ctx.session.executorProfile.step) {
                if (ctx.message && ctx.message.text) {
                    return next();
                }
            }
            // ------------------------------------------------------

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è
            const isComplete = await User.isExecutorProfileFullyComplete(ctx.user.telegram_id);

            // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
            if (isComplete) {
                return next();
            }

            // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç–∞–º
            if (projectCommands.some(cmd => text.includes(cmd))) {
                await ctx.reply(
                    'üîí –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç! –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.\n–ù–∞–∂–º–∏—Ç–µ /fill_profile –∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
                    Markup.inlineKeyboard([
                        [Markup.button.callback('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'fill_profile')]
                    ])
                );
                return;
            }

            // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ñ–∏–ª—è
            if (!allowedCommands.some(cmd => text && text.includes(cmd))) {
                await ctx.reply(
                    'üîí –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç! –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.\n–ù–∞–∂–º–∏—Ç–µ /fill_profile –∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
                    Markup.inlineKeyboard([
                        [Markup.button.callback('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'fill_profile')]
                    ])
                );
                return;
            }
        }
        return next();
    };
};

module.exports = {
    roleCheck,
    customerOnly,
    managerOnly,
    executorOnly,
    customerOrManager,
    executorProfileRequired
}; 