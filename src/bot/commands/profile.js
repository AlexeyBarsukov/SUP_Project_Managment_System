const { Markup } = require('telegraf');
const User = require('../../db/models/User');
const { 
    MANAGER_SPECIALIZATIONS, 
    MANAGER_SKILLS, 
    EXPERIENCE_RANGES, 
    SALARY_RANGES 
} = require('../../utils/constants');
const { 
    validateProfileField, 
    formatFieldCounter, 
    validateProfileData,
    PROFILE_VALIDATION 
} = require('../../utils/validation');
const { Telegraf } = require('telegraf');

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
const PROFILE_STATES = {
    SPECIALIZATION: 'profile_specialization',
    EXPERIENCE: 'profile_experience',
    SKILLS: 'profile_skills',
    ACHIEVEMENTS: 'profile_achievements',
    SALARY: 'profile_salary',
    CONTACTS: 'profile_contacts'
};

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
const profileData = new Map();

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const profileNavigation = new Map();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —à–∞–≥–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
const NAVIGATION_STEPS = {
    SPECIALIZATION: 'specialization',
    EXPERIENCE: 'experience',
    SKILLS: 'skills',
    ACHIEVEMENTS: 'achievements',
    SALARY: 'salary',
    CONTACTS: 'contacts'
};


// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function createSpecializationKeyboard() {
    const buttons = MANAGER_SPECIALIZATIONS.map(spec => [Markup.button.callback(spec, `spec_${spec}`)]);
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'profile_back')]);
    return Markup.inlineKeyboard(buttons);
}

function createExperienceKeyboard() {
    const buttons = EXPERIENCE_RANGES.map(exp => [Markup.button.callback(exp, `exp_${exp}`)]);
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'profile_back')]);
    return Markup.inlineKeyboard(buttons);
}

function createSkillsKeyboard() {
    const buttons = MANAGER_SKILLS.map(skill => [Markup.button.callback(skill, `skill_${skill}`)]);
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'profile_back')]);
    return Markup.inlineKeyboard(buttons);
}

function createSalaryKeyboard() {
    const buttons = SALARY_RANGES.map(salary => [Markup.button.callback(salary, `salary_${salary}`)]);
    buttons.push([Markup.button.callback('‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', 'fill_salary')]);
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'profile_back')]);
    return Markup.inlineKeyboard(buttons);
}

function createOptionalKeyboard(type) {
    let callback;
    if (type === 'achievements') callback = 'fill_achievements';
    else if (type === 'salary') callback = 'fill_salary';
    else if (type === 'contacts') callback = 'fill_contacts';
    else callback = 'fill_optional';

    return Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback)],
        [Markup.button.callback('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip_optional')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'profile_back')]
    ]);
}

function createSkillsKeyboardWithSelected(selectedSkills) {
    const buttons = [];
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞–≤—ã–∫–∏ –ø–æ 2 –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    for (let i = 0; i < MANAGER_SKILLS.length; i += 2) {
        const row = [];
        const skill1 = MANAGER_SKILLS[i];
        const skill2 = MANAGER_SKILLS[i + 1];
        
        // –ü–µ—Ä–≤—ã–π –Ω–∞–≤—ã–∫ –≤ —Ä—è–¥—É
        const isSelected1 = selectedSkills.includes(skill1);
        row.push(Markup.button.callback(
            isSelected1 ? `‚úÖ ${skill1}` : skill1,
            `skill_${skill1}`
        ));
        
        // –í—Ç–æ—Ä–æ–π –Ω–∞–≤—ã–∫ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (skill2) {
            const isSelected2 = selectedSkills.includes(skill2);
            row.push(Markup.button.callback(
                isSelected2 ? `‚úÖ ${skill2}` : skill2,
                `skill_${skill2}`
            ));
        }
        
        buttons.push(row);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons.push([
        Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'skills_done'),
        Markup.button.callback('üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ', 'skills_clear')
    ]);
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'profile_back')]);
    
    return Markup.inlineKeyboard(buttons);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async function handleProfileCommand(ctx) {
    ctx.session = ctx.session || {};
    ctx.session.executorProfile = ctx.session.executorProfile || { step: 'specialization', data: {} };
    

    const user = await User.findByTelegramId(ctx.from.id);
    
    if (!user) {
        return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start');
    }
    
    if (user.main_role === 'manager') {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ...
        return;
    }
    
    if (user.main_role === 'executor') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await showEditProfileMenu(ctx, user);
        return;
    }
    
    return ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º.');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
async function handleSpecialization(ctx) {
    const data = ctx.callbackQuery.data;
    const specialization = data.replace('spec_', '');
    const userId = ctx.from.id;
    
    if (!profileData.has(userId)) {
        profileData.set(userId, {});
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!ctx.session) {
        ctx.session = {};
    }
    
    if (specialization === '–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç') {
        ctx.session = { 
            ...ctx.session, 
            profileState: PROFILE_STATES.SPECIALIZATION,
            waitingForSpecializationInput: true  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
        };
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:');
        await ctx.answerCbQuery();
        return;
    }
    
    profileData.get(userId).specialization = specialization;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
    if (!ctx.session.skippedSteps) {
        ctx.session.skippedSteps = {};
    }
    
    // –Ø–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø—ã—Ç—É
    setCurrentStep(userId, NAVIGATION_STEPS.EXPERIENCE);
    await showCurrentStep(ctx, NAVIGATION_STEPS.EXPERIENCE);
    await ctx.answerCbQuery();
}

async function handleExperience(ctx) {
    const data = ctx.callbackQuery.data;
    const experience = data.replace('exp_', '');
    const userId = ctx.from.id;
    
    profileData.get(userId).experience = experience;
    
    // –Ø–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞–≤—ã–∫–∞–º
    setCurrentStep(userId, NAVIGATION_STEPS.SKILLS);
    await showCurrentStep(ctx, NAVIGATION_STEPS.SKILLS);
    await ctx.answerCbQuery();
}

async function handleSkills(ctx) {
    const data = ctx.callbackQuery.data;
    const skill = data.replace('skill_', '');
    const userId = ctx.from.id;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!profileData.has(userId)) {
        profileData.set(userId, {});
    }
    
    if (!profileData.get(userId).skills) {
        profileData.get(userId).skills = [];
    }
    
    if (skill === '–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç') {
        ctx.session = { 
            ...ctx.session, 
            profileState: PROFILE_STATES.SKILLS,
            waitingForSkillsInput: true  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
        };
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:');
        await ctx.answerCbQuery();
        return;
    }
    
    const skills = profileData.get(userId).skills;
    const skillIndex = skills.indexOf(skill);
    
    if (skillIndex > -1) {
        skills.splice(skillIndex, 1);
    } else {
        skills.push(skill);
    }
    
    await ctx.reply(
        `–í—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: ${skills.join(', ')}\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–≤—ã–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –µ–≥–æ):',
        createSkillsKeyboardWithSelected(skills)
    );
    await ctx.answerCbQuery();
}

async function handleSkillsDone(ctx) {
    const userId = ctx.from.id;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!profileData.has(userId)) {
        profileData.set(userId, {});
    }
    
    const skills = profileData.get(userId).skills || [];
    
    if (skills.length === 0) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞–≤—ã–∫.');
        await ctx.answerCbQuery();
        return;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
    if (!ctx.session.skippedSteps) {
        ctx.session.skippedSteps = {};
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    setCurrentStep(userId, NAVIGATION_STEPS.ACHIEVEMENTS);
    await showCurrentStep(ctx, NAVIGATION_STEPS.ACHIEVEMENTS);
    
    await ctx.answerCbQuery();
}

async function handleSkillsClear(ctx) {
    const userId = ctx.from.id;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!profileData.has(userId)) {
        profileData.set(userId, {});
    }
    
    profileData.get(userId).skills = [];
    
    await ctx.reply(
        '–í—Å–µ –Ω–∞–≤—ã–∫–∏ –æ—á–∏—â–µ–Ω—ã.\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫–∏:',
        createSkillsKeyboardWithSelected([])
    );
    await ctx.answerCbQuery();
}

async function handleProfileBack(ctx) {
    const userId = ctx.from.id;
    const previousStep = goToPreviousStep(userId);
    
    if (previousStep) {
        await showCurrentStep(ctx, previousStep);
    } else {
        // –ï—Å–ª–∏ –º—ã –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        profileData.delete(userId);
        profileNavigation.delete(userId);
        delete ctx.session.profileState;
        
        await ctx.reply(
            '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å" –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.'
        );
    }
    await ctx.answerCbQuery();
}

async function handleAchievements(ctx) {
    const data = ctx.callbackQuery.data;
    const userId = ctx.from.id;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!profileData.has(userId)) {
        profileData.set(userId, {});
    }
    
    if (data === 'skip_optional') {
        profileData.get(userId).achievements = null;
        
        // –û—Ç–º–µ—á–∞–µ–º —à–∞–≥ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π
        if (!ctx.session.skippedSteps) {
            ctx.session.skippedSteps = {};
        }
        ctx.session.skippedSteps.achievements = true;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        if (ctx.session) {
            delete ctx.session.waitingForAchievementsInput;
            // –ù–ï —É–¥–∞–ª—è–µ–º profileState, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        }
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–æ–ø—É—Å–∫
        await ctx.reply('‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ).');
        
        // –Ø–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞—Ä–ø–ª–∞—Ç–µ
        setCurrentStep(userId, NAVIGATION_STEPS.SALARY);
        await showCurrentStep(ctx, NAVIGATION_STEPS.SALARY);
    } else {
        ctx.session = { 
            ...ctx.session, 
            profileState: PROFILE_STATES.ACHIEVEMENTS,
            waitingForAchievementsInput: true  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
        };
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–£–≤–µ–ª–∏—á–∏–ª –ø—Ä–∏–±—ã–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 30% –∑–∞ –ø–æ–ª–≥–æ–¥–∞"):');
    }
    await ctx.answerCbQuery();
}

async function handleSalary(ctx) {
    const data = ctx.callbackQuery.data;
    const userId = ctx.from.id;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!profileData.has(userId)) {
        profileData.set(userId, {});
    }

    if (data.startsWith('salary_')) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
        const salary = data.replace('salary_', '');
        profileData.get(userId).salary_range = salary;
        
        // –Ø–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
        setCurrentStep(userId, NAVIGATION_STEPS.CONTACTS);
        await showCurrentStep(ctx, NAVIGATION_STEPS.CONTACTS);
        
    } else if (data === 'fill_salary') {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—É –≤—Ä—É—á–Ω—É—é
        ctx.session = { 
            ...ctx.session, 
            profileState: PROFILE_STATES.SALARY,
            waitingForSalaryInput: true
        };
        await ctx.reply(
            '–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä—ã:\n' +
            '‚Ä¢ –æ—Ç 120 —Ç—ã—Å —Ä—É–±\n' +
            '‚Ä¢ 150 000 —Ä—É–±\n' +
            '‚Ä¢ $2000\n' +
            '‚Ä¢ 100 000 - 150 000 —Ä—É–±'
        );
        await ctx.answerCbQuery();
        return;
    }

    await ctx.answerCbQuery();
}

async function handleSalaryRange(ctx) {
    const data = ctx.callbackQuery.data;
    const salary = data.replace('salary_', '');
    const userId = ctx.from.id;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!profileData.has(userId)) {
        profileData.set(userId, {});
    }
    
    profileData.get(userId).salary_range = salary;
    
    // –Ø–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
    setCurrentStep(userId, NAVIGATION_STEPS.CONTACTS);
    await showCurrentStep(ctx, NAVIGATION_STEPS.CONTACTS);
    await ctx.answerCbQuery();
}

async function handleContacts(ctx) {
    const data = ctx.callbackQuery.data;
    const userId = ctx.from.id;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!profileData.has(userId)) {
        profileData.set(userId, {});
    }
    
    if (data === 'skip_optional') {
        profileData.get(userId).contacts = null;
        
        // –û—Ç–º–µ—á–∞–µ–º —à–∞–≥ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π
        if (!ctx.session.skippedSteps) {
            ctx.session.skippedSteps = {};
        }
        ctx.session.skippedSteps.contacts = true;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        if (ctx.session) {
            delete ctx.session.waitingForContactsInput;
            // –ù–ï —É–¥–∞–ª—è–µ–º profileState, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        }
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        await ctx.reply('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ).');
        await saveProfile(ctx);
    } else {
        ctx.session = { 
            ...ctx.session, 
            profileState: PROFILE_STATES.CONTACTS,
            waitingForContactsInput: true  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
        };
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):');
    }
    await ctx.answerCbQuery();
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
async function saveProfile(ctx) {
    const userId = ctx.from.id;
    const data = profileData.get(userId);
    
    if (!data) {
        await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.');
        return;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    const validation = validateProfileData(data);
    if (!validation.canSave) {
        let errorMessage = '‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n';
        validation.errors.forEach(error => {
            errorMessage += `‚Ä¢ ${error}\n`;
        });
        errorMessage += '\n–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        await ctx.reply(errorMessage);
        return;
    }
    
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        await User.updateManagerProfile(userId, data);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await User.setManagerProfileCompleted(userId);
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        profileData.delete(userId);
        profileNavigation.delete(userId);
        if (ctx.session) {
            delete ctx.session.profileState;
            delete ctx.session.waitingForSpecializationInput;
            delete ctx.session.waitingForSkillsInput;
            delete ctx.session.waitingForAchievementsInput;
            delete ctx.session.waitingForSalaryInput;
            delete ctx.session.waitingForContactsInput;
            delete ctx.session.skippedSteps; // –û—á–∏—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        const finalProfile = formatFinalProfile(data);
        await ctx.reply(
            `‚úÖ <b>–ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n${finalProfile}`,
            { parse_mode: 'HTML' }
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        const { getKeyboardByRole } = require('../keyboards');
        await ctx.reply(
            'üéâ <b>–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞!</b>\n\n' +
            '–í—ã –º–æ–∂–µ—Ç–µ:\n' +
            '‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã\n' +
            '‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞–º–∏\n' +
            '‚Ä¢ –ò—Å–∫–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π\n' +
            '‚Ä¢ –í–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n' +
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞:',
            {
                parse_mode: 'HTML',
                reply_markup: getKeyboardByRole('manager', true).reply_markup
            }
        );
        
    } catch (error) {
        console.error('Error saving profile:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

function formatFinalProfile(data) {
    let text = 'üéâ *–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω!*\n\n';
    text += 'üìã *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n';
    
    text += `üéØ *–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:* ${data.specialization || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    text += `‚è± *–û–ø—ã—Ç:* ${data.experience || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    
    if (data.skills && data.skills.length > 0) {
        const skillsText = Array.isArray(data.skills) ? data.skills.join(', ') : data.skills;
        text += `üõ† *–ù–∞–≤—ã–∫–∏:* ${skillsText}\n`;
    } else {
        text += `üõ† *–ù–∞–≤—ã–∫–∏:* –ù–µ —É–∫–∞–∑–∞–Ω–æ\n`;
    }
    
    text += `üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:* ${data.achievements || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    text += `üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* ${data.salary_range || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    text += `üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* ${data.contacts || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;
    
    text += '–¢–µ–ø–µ—Ä—å –∑–∞–∫–∞–∑—á–∏–∫–∏ —Å–º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞.';
    
    return text;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
async function handleTextInput(ctx) {
    const session = ctx.session;
    if (!session) return false;

    const text = ctx.message.text.trim();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (session.profileState === PROFILE_STATES.SPECIALIZATION && session.waitingForSpecializationInput) {
        const validation = validateProfileField('specialization', text);
        if (!validation.isValid) {
            const counter = formatFieldCounter('specialization', text);
            await ctx.reply(`${validation.error}${counter}\n\n–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑:`);
            return true;
        }
        
        const userId = ctx.from.id;
        if (!profileData.has(userId)) {
            profileData.set(userId, {});
        }
        profileData.get(userId).specialization = text;
        
        session.waitingForSpecializationInput = false;
        setCurrentStep(userId, NAVIGATION_STEPS.EXPERIENCE);
        await showCurrentStep(ctx, NAVIGATION_STEPS.EXPERIENCE);
        return true;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–≤—ã–∫–æ–≤
    if (session.profileState === PROFILE_STATES.SKILLS && session.waitingForSkillsInput) {
        const validation = validateProfileField('skills', text);
        if (!validation.isValid) {
            const counter = formatFieldCounter('skills', text);
            await ctx.reply(`${validation.error}${counter}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ –µ—â–µ —Ä–∞–∑:`);
            return true;
        }
        
        const userId = ctx.from.id;
        if (!profileData.has(userId)) {
            profileData.set(userId, {});
        }
        if (!profileData.get(userId).skills) {
            profileData.get(userId).skills = [];
        }
        
        const skills = text.split(',').map(s => s.trim()).filter(Boolean);
        profileData.get(userId).skills = skills;
        
        session.waitingForSkillsInput = false;
        setCurrentStep(userId, NAVIGATION_STEPS.ACHIEVEMENTS);
        await showCurrentStep(ctx, NAVIGATION_STEPS.ACHIEVEMENTS);
        return true;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    if (session.profileState === PROFILE_STATES.ACHIEVEMENTS && session.waitingForAchievementsInput) {
        const validation = validateProfileField('achievements', text);
        if (!validation.isValid) {
            const counter = formatFieldCounter('achievements', text);
            await ctx.reply(`${validation.error}${counter}\n\n–í–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑:`);
            return true;
        }
        
        const userId = ctx.from.id;
        if (!profileData.has(userId)) {
            profileData.set(userId, {});
        }
        profileData.get(userId).achievements = text;
        
        session.waitingForAchievementsInput = false;
        setCurrentStep(userId, NAVIGATION_STEPS.SALARY);
        await showCurrentStep(ctx, NAVIGATION_STEPS.SALARY);
        return true;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
    if (session.profileState === PROFILE_STATES.SALARY && session.waitingForSalaryInput) {
        const validation = validateProfileField('salary_range', text);
        if (!validation.isValid) {
            const counter = formatFieldCounter('salary_range', text);
            await ctx.reply(`${validation.error}${counter}\n\n–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É –µ—â–µ —Ä–∞–∑:`);
            return true;
        }
        
        const userId = ctx.from.id;
        if (!profileData.has(userId)) {
            profileData.set(userId, {});
        }
        profileData.get(userId).salary_range = text;
        
        session.waitingForSalaryInput = false;
        setCurrentStep(userId, NAVIGATION_STEPS.CONTACTS);
        await showCurrentStep(ctx, NAVIGATION_STEPS.CONTACTS);
        return true;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    if (session.profileState === PROFILE_STATES.CONTACTS && session.waitingForContactsInput) {
        const validation = validateProfileField('contacts', text);
        if (!validation.isValid) {
            const counter = formatFieldCounter('contacts', text);
            await ctx.reply(`${validation.error}${counter}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –µ—â–µ —Ä–∞–∑:`);
            return true;
        }
        
        const userId = ctx.from.id;
        if (!profileData.has(userId)) {
            profileData.set(userId, {});
        }
        profileData.get(userId).contacts = text;
        
        session.waitingForContactsInput = false;
        await saveProfile(ctx);
        return true;
    }
    
    return false;
}

// –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function getCurrentStep(userId) {
    return profileNavigation.get(userId) || NAVIGATION_STEPS.SPECIALIZATION;
}

function setCurrentStep(userId, step) {
    profileNavigation.set(userId, step);
}

function goToPreviousStep(userId) {
    const steps = Object.values(NAVIGATION_STEPS);
    const currentIndex = steps.indexOf(getCurrentStep(userId));
    if (currentIndex > 0) {
        setCurrentStep(userId, steps[currentIndex - 1]);
        return steps[currentIndex - 1];
    }
    return null;
}

function goToNextStep(userId) {
    const steps = Object.values(NAVIGATION_STEPS);
    const currentStep = getCurrentStep(userId);
    const currentIndex = steps.indexOf(currentStep);
    
    if (currentIndex < steps.length - 1) {
        const nextStep = steps[currentIndex + 1];
        setCurrentStep(userId, nextStep);
        return nextStep;
    }
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
async function showCurrentStep(ctx, step) {
    const userId = ctx.from.id;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!profileData.has(userId)) {
        profileData.set(userId, {});
    }
    
    const data = profileData.get(userId) || {};
    
    switch (step) {
        case NAVIGATION_STEPS.SPECIALIZATION:
            await ctx.reply(
                '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "–û —Å–µ–±–µ":\n\n' +
                '1. ‚è≥ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ______\n' +
                '2. üìù –û–ø—ã—Ç: [1-3 –≥–æ–¥–∞]\n' +
                '3. üõ† –ù–∞–≤—ã–∫–∏: [Agile, Kanban]\n' +
                '4. üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: "–£–≤–µ–ª–∏—á–∏–ª –ø—Ä–∏–±—ã–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 30% –∑–∞ –ø–æ–ª–≥–æ–¥–∞."\n' +
                '5. üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: [100 000 ‚Äì 150 000 —Ä—É–±./–º–µ—Å]\n' +
                '6. üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: @username\n\n' +
                '–ù–∞—á–Ω–µ–º —Å –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:',
                createSpecializationKeyboard()
            );
            break;
            
        case NAVIGATION_STEPS.EXPERIENCE:
            const specText = data.specialization || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ';
            await ctx.reply(
                `1. ‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${specText}\n` +
                '2. ‚è≥ –û–ø—ã—Ç: [1-3 –≥–æ–¥–∞]\n' +
                '3. üìù –ù–∞–≤—ã–∫–∏: [Agile, Kanban]\n' +
                '4. üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: "–£–≤–µ–ª–∏—á–∏–ª –ø—Ä–∏–±—ã–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 30% –∑–∞ –ø–æ–ª–≥–æ–¥–∞."\n' +
                '5. üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: [100 000 ‚Äì 150 000 —Ä—É–±./–º–µ—Å]\n' +
                '6. üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: @username\n\n' +
                '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:',
                createExperienceKeyboard()
            );
            break;
            
        case NAVIGATION_STEPS.SKILLS:
            const expText = data.experience || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ';
            await ctx.reply(
                `1. ‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${data.specialization || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n` +
                `2. ‚úÖ –û–ø—ã—Ç: ${expText}\n` +
                '3. ‚è≥ –ù–∞–≤—ã–∫–∏: [Agile, Kanban]\n' +
                '4. üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: "–£–≤–µ–ª–∏—á–∏–ª –ø—Ä–∏–±—ã–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 30% –∑–∞ –ø–æ–ª–≥–æ–¥–∞."\n' +
                '5. üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: [100 000 ‚Äì 150 000 —Ä—É–±./–º–µ—Å]\n' +
                '6. üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: @username\n\n' +
                '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫–∏:',
                createSkillsKeyboardWithSelected(data.skills || [])
            );
            break;
            
        case NAVIGATION_STEPS.ACHIEVEMENTS:
            const skillsText = data.skills && data.skills.length > 0 ? data.skills.join(', ') : '–ù–µ –≤—ã–±—Ä–∞–Ω–æ';
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ achievements, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (data.achievements === undefined) {
                profileData.get(userId).achievements = undefined;
            }
            
            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã (–Ω–µ undefined –∏ –Ω–µ null), —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞—Ä–ø–ª–∞—Ç–µ
            if (data.achievements !== undefined && data.achievements !== null) {
                setCurrentStep(userId, NAVIGATION_STEPS.SALARY);
                await showCurrentStep(ctx, NAVIGATION_STEPS.SALARY);
                break;
            }
            // –ï—Å–ª–∏ —è–≤–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ (null), —Ç–æ–∂–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞—Ä–ø–ª–∞—Ç–µ
            if (data.achievements === null) {
                setCurrentStep(userId, NAVIGATION_STEPS.SALARY);
                await showCurrentStep(ctx, NAVIGATION_STEPS.SALARY);
                break;
            }
            
            await ctx.reply(
                `üèó –®–∞–≥ 4/6: –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n` +
                `1. ‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${data.specialization || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n` +
                `2. ‚úÖ –û–ø—ã—Ç: ${data.experience || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n` +
                `3. ‚úÖ –ù–∞–≤—ã–∫–∏: ${skillsText}\n` +
                '4. ‚è≥ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: "–£–≤–µ–ª–∏—á–∏–ª –ø—Ä–∏–±—ã–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 30% –∑–∞ –ø–æ–ª–≥–æ–¥–∞."\n' +
                '5. üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: [100 000 ‚Äì 150 000 —Ä—É–±./–º–µ—Å]\n' +
                '6. üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: @username\n\n' +
                '*–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è?*',
                {
                    parse_mode: 'Markdown',
                    reply_markup: createOptionalKeyboard('achievements').reply_markup
                }
            );
            break;
            
        case NAVIGATION_STEPS.SALARY:
            const achievementsText = data.achievements || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ salary_range, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (data.salary_range === undefined) {
                profileData.get(userId).salary_range = undefined;
            }

            // –ï—Å–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ (–Ω–µ undefined –∏ –Ω–µ null), —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
            if (data.salary_range !== undefined && data.salary_range !== null) {
                setCurrentStep(userId, NAVIGATION_STEPS.CONTACTS);
                await showCurrentStep(ctx, NAVIGATION_STEPS.CONTACTS);
                break;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω—ã
            const achievementsStatus = ctx.session?.skippedSteps?.achievements ? '–ù–µ —É–∫–∞–∑–∞–Ω–æ' : achievementsText;

            await ctx.reply(
                `üèó –®–∞–≥ 5/6: –ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è\n\n` +
                `1. ‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${data.specialization || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n` +
                `2. ‚úÖ –û–ø—ã—Ç: ${data.experience || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n` +
                `3. ‚úÖ –ù–∞–≤—ã–∫–∏: ${data.skills && data.skills.length > 0 ? data.skills.join(', ') : '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n` +
                `4. ‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${achievementsStatus}\n` +
                '5. ‚è≥ –ó–∞—Ä–ø–ª–∞—Ç–∞: [100 000 ‚Äì 150 000 —Ä—É–±./–º–µ—Å]\n' +
                '6. üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: @username\n\n' +
                '*–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:*',
                createSalaryKeyboard()
            );
            break;
            
        case NAVIGATION_STEPS.CONTACTS:
            const salaryText = data.salary_range || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ contacts, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (data.contacts === undefined) {
                profileData.get(userId).contacts = undefined;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω—ã
            const achievementsStatusFinal = ctx.session?.skippedSteps?.achievements ? '–ù–µ —É–∫–∞–∑–∞–Ω–æ' : (data.achievements || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
            const salaryStatusFinal = ctx.session?.skippedSteps?.salary ? '–ù–µ —É–∫–∞–∑–∞–Ω–æ' : salaryText;
            
            await ctx.reply(
                `üèó –®–∞–≥ 6/6: –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n` +
                `1. ‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${data.specialization || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n` +
                `2. ‚úÖ –û–ø—ã—Ç: ${data.experience || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n` +
                `3. ‚úÖ –ù–∞–≤—ã–∫–∏: ${data.skills && data.skills.length > 0 ? data.skills.join(', ') : '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n` +
                `4. ‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${achievementsStatusFinal}\n` +
                `5. ‚úÖ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${salaryStatusFinal}\n` +
                '6. ‚è≥ –ö–æ–Ω—Ç–∞–∫—Ç—ã: @username\n\n' +
                '*–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?*',
                {
                    parse_mode: 'Markdown',
                    reply_markup: createOptionalKeyboard('contacts').reply_markup
                }
            );
            break;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö callback'–æ–≤ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å"
async function handleFillAchievements(ctx) {
    ctx.session = {
        ...ctx.session,
        profileState: PROFILE_STATES.ACHIEVEMENTS,
        waitingForAchievementsInput: true
    };
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–£–≤–µ–ª–∏—á–∏–ª –ø—Ä–∏–±—ã–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 30% –∑–∞ –ø–æ–ª–≥–æ–¥–∞"):');
    await ctx.answerCbQuery();
}

async function handleFillSalary(ctx) {
    ctx.session = {
        ...ctx.session,
        profileState: PROFILE_STATES.SALARY,
        waitingForSalaryInput: true
    };
    await ctx.reply(
        '–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä—ã:\n' +
        '‚Ä¢ –æ—Ç 120 —Ç—ã—Å —Ä—É–±\n' +
        '‚Ä¢ 150 000 —Ä—É–±\n' +
        '‚Ä¢ $2000\n' +
        '‚Ä¢ 100 000 - 150 000 —Ä—É–±'
    );
    await ctx.answerCbQuery();
}

async function handleFillContacts(ctx) {
    ctx.session = {
        ...ctx.session,
        profileState: PROFILE_STATES.CONTACTS,
        waitingForContactsInput: true
    };
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username –∏–ª–∏ –º–æ–±. –Ω–æ–º–µ—Ä):');
    await ctx.answerCbQuery();
}

// --- –ù–æ–≤—ã–π –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è ---

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)
async function showEditProfileMenu(ctx, user) {
    const isExecutor = user.main_role === 'executor';
    await ctx.reply(
        '‚úèÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>',
        {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [ { text: '1. –ò–∑–º–µ–Ω–∏—Ç—å –æ–¥–Ω–æ –ø–æ–ª–µ', callback_data: 'edit_one_field' } ],
                    [ { text: '2. –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'edit_full_profile' } ],
                    [ { text: '3. –û—Ç–º–µ–Ω–∞', callback_data: 'edit_cancel' } ]
                ]
            }
        }
    );
    ctx.session = ctx.session || {};
    ctx.session.editProfileUserType = isExecutor ? 'executor' : 'manager';
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ)
async function showEditFieldList(ctx, user) {
    let skills = user.skills;
    if (Array.isArray(skills)) skills = skills.join(', ');
    if (!skills) skills = '';
    const isExecutor = ctx.session.editProfileUserType === 'executor';
    let text = `<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n`;
    let fields = [];
    if (isExecutor) {
        fields = [
            `1. –°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: <b>${user.specialization || '‚Äî'}</b>`,
            `2. –ù–∞–≤—ã–∫–∏: <b>${skills || '‚Äî'}</b>`,
            `3. –ö–æ–Ω—Ç–∞–∫—Ç—ã: <b>${user.contacts || '‚Äî'}</b>`,
            `4. –û —Å–µ–±–µ: <b>${user.achievements || '‚Äî'}</b>`
        ];
        text += fields.join('\n');
        text += '\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (1-4):';
    } else {
        fields = [
            `1. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: <b>${user.specialization || '‚Äî'}</b>`,
            `2. –û–ø—ã—Ç: <b>${user.experience || '‚Äî'}</b>`,
            `3. –ù–∞–≤—ã–∫–∏: <b>${skills || '‚Äî'}</b>`,
            `4. –ó–∞—Ä–ø–ª–∞—Ç–∞: <b>${user.salary_range || '‚Äî'}</b>`,
            `5. –ö–æ–Ω—Ç–∞–∫—Ç—ã: <b>${user.contacts || '‚Äî'}</b>`
        ];
        text += fields.join('\n');
        text += '\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (1-5):';
    }
    await ctx.reply(text, { parse_mode: 'HTML' });
    ctx.session = ctx.session || {};
    ctx.session.editProfileMode = 'one_field';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ)
async function handleEditFieldInput(ctx, user) {
    const num = (ctx.message.text || '').trim();
    ctx.session = ctx.session || {};
    let field = null;
    const isExecutor = ctx.session.editProfileUserType === 'executor';
    if (isExecutor) {
        if (num === '1') field = 'specialization';
        if (num === '2') field = 'skills';
        if (num === '3') field = 'contacts';
        if (num === '4') field = 'achievements';
        if (!field) {
            await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è –æ—Ç 1 –¥–æ 4.');
            return;
        }
    } else {
        if (num === '1') field = 'specialization';
        if (num === '2') field = 'experience';
        if (num === '3') field = 'skills';
        if (num === '4') field = 'salary_range';
        if (num === '5') field = 'contacts';
        if (!field) {
            await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è –æ—Ç 1 –¥–æ 5.');
            return;
        }
    }
    ctx.session.editProfileField = field;
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    let prompt = '';
    if (field === 'specialization') prompt = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:';
    if (field === 'skills') prompt = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:';
    if (field === 'contacts') prompt = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:';
    if (field === 'achievements') prompt = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ:';
    if (field === 'experience') prompt = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ–ø—ã—Ç:';
    if (field === 'salary_range') prompt = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞—Ä–ø–ª–∞—Ç—É:';
    await ctx.reply(prompt);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ)
async function handleEditFieldValue(ctx, user) {
    const field = ctx.session.editProfileField;
    let value = ctx.message.text.trim();
    const isExecutor = ctx.session.editProfileUserType === 'executor';
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è
    const validation = validateProfileField(field, value);
    if (!validation.isValid) {
        const counter = formatFieldCounter(field, value);
        await ctx.reply(`${validation.error}${counter}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        return;
    }
    
    if (field === 'skills') {
        value = value.split(',').map(s => s.trim()).filter(Boolean);
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    if (isExecutor) {
        await User.updateExecutorProfileField(user.telegram_id, field, value);
        // --- –î–û–ë–ê–í–õ–ï–ù–û: –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ username, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ---
        if (!user.username && ctx.from.username) {
            await User.updateExecutorProfileField(user.telegram_id, 'username', ctx.from.username);
        }
        // ---
        // –ü–æ—Å–ª–µ –ª—é–±–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è ‚Äî –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω, –≤—ã—Å—Ç–∞–≤–ª—è–µ–º profile_completed
        const isComplete = await User.isExecutorProfileFullyComplete(user.telegram_id);
        if (isComplete) {
            await User.setExecutorProfileCompleted(user.telegram_id);
        }
    } else {
        await User.updateProfileField(user.telegram_id, field, value);
    }
    
    await ctx.reply('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!');
    ctx.session.editProfileMode = null;
    ctx.session.editProfileField = null;
}

// –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
async function handleExecutorProfileStep(ctx) {
    if (!ctx.session.executorProfile) return;
    const { step, data } = ctx.session.executorProfile;
    const text = ctx.message?.text;
    if (step === 'specialization') {
        if (!text || !text.trim()) {
            return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.');
        }
        data.specialization = text.trim();
        ctx.session.executorProfile.step = 'skills';
        await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥, –æ—Ç–ø—Ä–∞–≤–∏–≤ "-".');
        return;
    }
    if (step === 'skills') {
        if (text && text.trim() !== '-') {
            data.skills = text.split(',').map(s => s.trim()).filter(Boolean);
        } else {
            data.skills = [];
        }
        ctx.session.executorProfile.step = 'contacts';
        await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã (email, Telegram, –¥—Ä—É–≥–æ–µ) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥, –æ—Ç–ø—Ä–∞–≤–∏–≤ "-".');
        return;
    }
    if (step === 'contacts') {
        if (text && text.trim() !== '-') {
            data.contacts = text.trim();
        } else {
            data.contacts = null;
        }
        ctx.session.executorProfile.step = 'about';
        await ctx.reply('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–∫—Ä–∞—Ç–∫–æ) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥, –æ—Ç–ø—Ä–∞–≤–∏–≤ "-".');
        return;
    }
    if (step === 'about') {
        if (text && text.trim() !== '-') {
            data.achievements = text.trim();
        } else {
            data.achievements = null;
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        await User.updateExecutorProfile(ctx.from.id, data);
        // --- –î–û–ë–ê–í–õ–ï–ù–û: –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ username, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ---
        const user = await User.findByTelegramId(ctx.from.id);
        if (user && !user.username && ctx.from.username) {
            await User.updateExecutorProfileField(ctx.from.id, 'username', ctx.from.username);
        }
        // ---
        await User.setExecutorProfileCompleted(ctx.from.id);
        ctx.session.executorProfile = null;
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const { getKeyboardByRole } = require('../keyboards');
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await ctx.reply(
            '‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã. üöÄ\n\n–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:',
            {
                reply_markup: getKeyboardByRole('executor', await User.isExecutorProfileFullyComplete(ctx.from.id)).reply_markup
            }
        );
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        await ctx.reply(
            'üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:',
            {
                reply_markup: getKeyboardByRole('executor', await User.isExecutorProfileFullyComplete(ctx.from.id)).reply_markup
            }
        );
        return;
    }
}

// –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /fill_profile
async function handleFillProfileCommand(ctx) {
    ctx.session = ctx.session || {};
    const user = await User.findByTelegramId(ctx.from.id);
    if (!user) {
        return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start');
    }
    
    if (user.main_role === 'executor') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å
        const isComplete = await User.isExecutorProfileFullyComplete(ctx.from.id);
        if (isComplete) {
            // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
            return ctx.reply('‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å" –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.');
        }
        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if (ctx.session.executorProfile && ctx.session.executorProfile.step) {
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
            await handleExecutorProfileStep(ctx);
            return;
        }
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –Ω–∞—á–∞–ª–∞
        ctx.session.executorProfile = { step: 'specialization', data: {} };
        await ctx.reply('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!\n\n–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.', {
            reply_markup: {
                keyboard: [["IT"], ["–î–∏–∑–∞–π–Ω"], ["–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"], ["–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"], ["–î—Ä—É–≥–æ–µ"]],
                resize_keyboard: true,
                one_time_keyboard: true
            }
        });
        return;
    } else if (user.main_role === 'manager') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        const isComplete = await User.isManagerProfileFullyComplete(ctx.from.id);
        if (isComplete) {
            // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
            return ctx.reply('‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å" –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.');
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        const userId = ctx.from.id;
        profileData.set(userId, {});
        setCurrentStep(userId, NAVIGATION_STEPS.SPECIALIZATION);
        await showCurrentStep(ctx, NAVIGATION_STEPS.SPECIALIZATION);
        return;
    }
    
    return ctx.reply('–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–î–∞"/"–ù–µ—Ç" –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
async function handleFillProfileYes(ctx) {
    ctx.session = ctx.session || {};
    ctx.session.executorProfile = { step: 'specialization', data: {} };
    await ctx.reply('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ!\n\n–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.', {
        reply_markup: {
            keyboard: [["IT"], ["–î–∏–∑–∞–π–Ω"], ["–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"], ["–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"], ["–î—Ä—É–≥–æ–µ"]],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });
    await ctx.answerCbQuery();
}

async function handleFillProfileNo(ctx) {
    ctx.session = ctx.session || {};
    ctx.session.lastProfileEditDecline = Date.now();
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    const { getKeyboardByRole } = require('../keyboards');
    await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', {
        reply_markup: getKeyboardByRole('executor', await User.isExecutorProfileFullyComplete(ctx.from.id)).reply_markup
    });
    await ctx.answerCbQuery();
}

module.exports = {
    handleProfileCommand,
    handleSpecialization,
    handleExperience,
    handleSkills,
    handleSkillsDone,
    handleSkillsClear,
    handleProfileBack,
    handleAchievements,
    handleSalary,
    handleSalaryRange,
    handleContacts,
    handleTextInput,
    getCurrentStep,
    setCurrentStep,
    goToPreviousStep,
    goToNextStep,
    showCurrentStep,
    handleFillAchievements,
    handleFillSalary,
    handleFillContacts,
    showEditProfileMenu,
    showEditFieldList,
    handleEditFieldInput,
    handleEditFieldValue,
    handleExecutorProfileStep,
    handleFillProfileCommand,
    handleFillProfileYes,
    handleFillProfileNo
};