const { Markup } = require('telegraf');
const User = require('../../db/models/User');
const { 
    MANAGER_SPECIALIZATIONS, 
    MANAGER_SKILLS, 
    EXPERIENCE_RANGES, 
    SALARY_RANGES 
} = require('../../utils/constants');
const { Telegraf } = require('telegraf');

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
const PROFILE_STATES = {
    SPECIALIZATION: 'profile_specialization',
    EXPERIENCE: 'profile_experience',
    SKILLS: 'profile_skills',
    ACHIEVEMENTS: 'profile_achievements',
    SALARY: 'profile_salary',
    CONTACTS: 'profile_contacts'
};

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
const profileData = new Map();

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const profileNavigation = new Map();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —à–∞–≥–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
const NAVIGATION_STEPS = {
    SPECIALIZATION: 'specialization',
    EXPERIENCE: 'experience',
    SKILLS: 'skills',
    ACHIEVEMENTS: 'achievements',
    SALARY: 'salary',
    CONTACTS: 'contacts'
};

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function createSpecializationKeyboard() {
    const buttons = MANAGER_SPECIALIZATIONS.map(spec => [Markup.button.callback(spec, `spec_${spec}`)]);
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'profile_back')]);
    return Markup.inlineKeyboard(buttons);
}

function createExperienceKeyboard() {
    const buttons = EXPERIENCE_RANGES.map(exp => [Markup.button.callback(exp, `exp_${exp}`)]);
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'profile_back')]);
    return Markup.inlineKeyboard(buttons);
}

function createSkillsKeyboard() {
    const buttons = MANAGER_SKILLS.map(skill => [Markup.button.callback(skill, `skill_${skill}`)]);
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'profile_back')]);
    return Markup.inlineKeyboard(buttons);
}

function createSalaryKeyboard() {
    const buttons = SALARY_RANGES.map(salary => [Markup.button.callback(salary, `salary_${salary}`)]);
    buttons.push([Markup.button.callback('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip_optional')]);
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'profile_back')]);
    return Markup.inlineKeyboard(buttons);
}

function createOptionalKeyboard(type) {
    let callback;
    if (type === 'achievements') callback = 'fill_achievements';
    else if (type === 'salary') callback = 'fill_salary';
    else if (type === 'contacts') callback = 'fill_contacts';
    else callback = 'fill_optional';

    return Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback)],
        [Markup.button.callback('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip_optional')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'profile_back')]
    ]);
}

function createSkillsKeyboardWithSelected(selectedSkills) {
    const buttons = [];
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞–≤—ã–∫–∏ –ø–æ 2 –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    for (let i = 0; i < MANAGER_SKILLS.length; i += 2) {
        const row = [];
        const skill1 = MANAGER_SKILLS[i];
        const skill2 = MANAGER_SKILLS[i + 1];
        
        // –ü–µ—Ä–≤—ã–π –Ω–∞–≤—ã–∫ –≤ —Ä—è–¥—É
        const isSelected1 = selectedSkills.includes(skill1);
        row.push(Markup.button.callback(
            isSelected1 ? `‚úÖ ${skill1}` : skill1,
            `skill_${skill1}`
        ));
        
        // –í—Ç–æ—Ä–æ–π –Ω–∞–≤—ã–∫ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (skill2) {
            const isSelected2 = selectedSkills.includes(skill2);
            row.push(Markup.button.callback(
                isSelected2 ? `‚úÖ ${skill2}` : skill2,
                `skill_${skill2}`
            ));
        }
        
        buttons.push(row);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons.push([
        Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'skills_done'),
        Markup.button.callback('üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ', 'skills_clear')
    ]);
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'profile_back')]);
    
    return Markup.inlineKeyboard(buttons);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async function handleProfileCommand(ctx) {
    const user = await User.findByTelegramId(ctx.from.id);
    
    if (!user) {
        return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start');
    }
    
    if (user.main_role !== 'manager') {
        return ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.');
    }
    
    const userId = ctx.from.id;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    profileData.set(userId, {});
    setCurrentStep(userId, NAVIGATION_STEPS.SPECIALIZATION);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
    await showCurrentStep(ctx, NAVIGATION_STEPS.SPECIALIZATION);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
async function handleSpecialization(ctx) {
    const data = ctx.callbackQuery.data;
    const specialization = data.replace('spec_', '');
    const userId = ctx.from.id;
    
    if (!profileData.has(userId)) {
        profileData.set(userId, {});
    }
    
    if (specialization === '–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç') {
        ctx.session = { 
            ...ctx.session, 
            profileState: PROFILE_STATES.SPECIALIZATION,
            waitingForSpecializationInput: true  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
        };
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:');
        await ctx.answerCbQuery();
        return;
    }
    
    profileData.get(userId).specialization = specialization;
    
    // –Ø–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø—ã—Ç—É
    setCurrentStep(userId, NAVIGATION_STEPS.EXPERIENCE);
    await showCurrentStep(ctx, NAVIGATION_STEPS.EXPERIENCE);
    await ctx.answerCbQuery();
}

async function handleExperience(ctx) {
    const data = ctx.callbackQuery.data;
    const experience = data.replace('exp_', '');
    const userId = ctx.from.id;
    
    profileData.get(userId).experience = experience;
    
    // –Ø–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞–≤—ã–∫–∞–º
    setCurrentStep(userId, NAVIGATION_STEPS.SKILLS);
    await showCurrentStep(ctx, NAVIGATION_STEPS.SKILLS);
    await ctx.answerCbQuery();
}

async function handleSkills(ctx) {
    const data = ctx.callbackQuery.data;
    const skill = data.replace('skill_', '');
    const userId = ctx.from.id;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!profileData.has(userId)) {
        profileData.set(userId, {});
    }
    
    if (!profileData.get(userId).skills) {
        profileData.get(userId).skills = [];
    }
    
    if (skill === '–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç') {
        ctx.session = { 
            ...ctx.session, 
            profileState: PROFILE_STATES.SKILLS,
            waitingForSkillsInput: true  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
        };
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:');
        await ctx.answerCbQuery();
        return;
    }
    
    const skills = profileData.get(userId).skills;
    if (skills.includes(skill)) {
        skills.splice(skills.indexOf(skill), 1);
    } else {
        skills.push(skill);
    }
    
    const skillsText = skills.length > 0 ? skills.join(', ') : '–ù–µ –≤—ã–±—Ä–∞–Ω–æ';
    
    await ctx.reply(
        `–ù–∞–≤—ã–∫–∏: ${skillsText}\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–≤—ã–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –µ–≥–æ):',
        createSkillsKeyboardWithSelected(skills)
    );
    await ctx.answerCbQuery();
}

async function handleSkillsDone(ctx) {
    const userId = ctx.from.id;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!profileData.has(userId)) {
        profileData.set(userId, {});
    }
    
    const skills = profileData.get(userId).skills || [];
    
    if (skills.length === 0) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞–≤—ã–∫.');
        await ctx.answerCbQuery();
        return;
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    setCurrentStep(userId, NAVIGATION_STEPS.ACHIEVEMENTS);
    await showCurrentStep(ctx, NAVIGATION_STEPS.ACHIEVEMENTS);
    
    await ctx.answerCbQuery();
}

async function handleSkillsClear(ctx) {
    const userId = ctx.from.id;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!profileData.has(userId)) {
        profileData.set(userId, {});
    }
    
    profileData.get(userId).skills = [];
    
    await ctx.reply(
        '–í—Å–µ –Ω–∞–≤—ã–∫–∏ –æ—á–∏—â–µ–Ω—ã.\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫–∏:',
        createSkillsKeyboardWithSelected([])
    );
    await ctx.answerCbQuery();
}

async function handleProfileBack(ctx) {
    const userId = ctx.from.id;
    const previousStep = goToPreviousStep(userId);
    
    if (previousStep) {
        await showCurrentStep(ctx, previousStep);
    } else {
        // –ï—Å–ª–∏ –º—ã –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        profileData.delete(userId);
        profileNavigation.delete(userId);
        delete ctx.session.profileState;
        
        await ctx.reply(
            '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å" –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.'
        );
    }
    await ctx.answerCbQuery();
}

async function handleAchievements(ctx) {
    const data = ctx.callbackQuery.data;
    const userId = ctx.from.id;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!profileData.has(userId)) {
        profileData.set(userId, {});
    }
    
    if (data === 'skip_optional') {
        profileData.get(userId).achievements = null;
        // –Ø–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞—Ä–ø–ª–∞—Ç–µ
        setCurrentStep(userId, NAVIGATION_STEPS.SALARY);
        await showCurrentStep(ctx, NAVIGATION_STEPS.SALARY);
    } else {
        ctx.session = { 
            ...ctx.session, 
            profileState: PROFILE_STATES.ACHIEVEMENTS,
            waitingForAchievementsInput: true  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
        };
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–£–≤–µ–ª–∏—á–∏–ª –ø—Ä–∏–±—ã–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 30% –∑–∞ –ø–æ–ª–≥–æ–¥–∞"):');
    }
    await ctx.answerCbQuery();
}

async function handleSalary(ctx) {
    const data = ctx.callbackQuery.data;
    const userId = ctx.from.id;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!profileData.has(userId)) {
        profileData.set(userId, {});
    }

    if (data === 'skip_optional') {
        profileData.get(userId).salary_range = null;
    } else if (data.startsWith('salary_')) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
        const salary = data.replace('salary_', '');
        profileData.get(userId).salary_range = salary;
    } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—É –≤—Ä—É—á–Ω—É—é
        ctx.session = { 
            ...ctx.session, 
            profileState: PROFILE_STATES.SALARY,
            waitingForSalaryInput: true
        };
        await ctx.reply(
            '–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä—ã:\n' +
            '‚Ä¢ –æ—Ç 120 —Ç—ã—Å —Ä—É–±\n' +
            '‚Ä¢ 150 000 —Ä—É–±\n' +
            '‚Ä¢ $2000\n' +
            '‚Ä¢ 100 000 - 150 000 —Ä—É–±'
        );
        await ctx.answerCbQuery();
        return;
    }

    // –Ø–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
    setCurrentStep(userId, NAVIGATION_STEPS.CONTACTS);
    await showCurrentStep(ctx, NAVIGATION_STEPS.CONTACTS);

    await ctx.answerCbQuery();
}

async function handleSalaryRange(ctx) {
    const data = ctx.callbackQuery.data;
    const salary = data.replace('salary_', '');
    const userId = ctx.from.id;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!profileData.has(userId)) {
        profileData.set(userId, {});
    }
    
    profileData.get(userId).salary_range = salary;
    
    // –Ø–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
    setCurrentStep(userId, NAVIGATION_STEPS.CONTACTS);
    await showCurrentStep(ctx, NAVIGATION_STEPS.CONTACTS);
    await ctx.answerCbQuery();
}

async function handleContacts(ctx) {
    const data = ctx.callbackQuery.data;
    const userId = ctx.from.id;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!profileData.has(userId)) {
        profileData.set(userId, {});
    }
    
    if (data === 'skip_optional') {
        profileData.get(userId).contacts = null;
        await saveProfile(ctx);
    } else {
        ctx.session = { 
            ...ctx.session, 
            profileState: PROFILE_STATES.CONTACTS,
            waitingForContactsInput: true  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
        };
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):');
    }
    await ctx.answerCbQuery();
}

async function saveProfile(ctx) {
    const userId = ctx.from.id;
    const data = profileData.get(userId);
    
    if (!data) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ.');
        return;
    }
    
    try {
        await User.updateManagerProfile(userId, data);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const resultText = formatFinalProfile(data);
        
        await ctx.reply(
            resultText,
            Markup.inlineKeyboard([
                [Markup.button.callback('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'profile_saved')]
            ])
        );
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        profileData.delete(userId);
        profileNavigation.delete(userId);
        delete ctx.session.profileState;
        
    } catch (error) {
        console.error('Error saving profile:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

function formatFinalProfile(data) {
    let text = 'üéâ *–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω!*\n\n';
    text += 'üìã *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n';
    
    text += `üéØ *–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:* ${data.specialization || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    text += `‚è± *–û–ø—ã—Ç:* ${data.experience || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    
    if (data.skills && data.skills.length > 0) {
        const skillsText = Array.isArray(data.skills) ? data.skills.join(', ') : data.skills;
        text += `üõ† *–ù–∞–≤—ã–∫–∏:* ${skillsText}\n`;
    } else {
        text += `üõ† *–ù–∞–≤—ã–∫–∏:* –ù–µ —É–∫–∞–∑–∞–Ω–æ\n`;
    }
    
    text += `üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:* ${data.achievements || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    text += `üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* ${data.salary_range || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    text += `üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* ${data.contacts || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;
    
    text += '–¢–µ–ø–µ—Ä—å –∑–∞–∫–∞–∑—á–∏–∫–∏ —Å–º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞.';
    
    return text;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleTextInput(ctx) {
    if (!ctx.session?.profileState) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (ctx.message.handled) return;
    
    const userId = ctx.from.id;
    const text = ctx.message.text;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!profileData.has(userId)) {
        profileData.set(userId, {});
    }
    
    // –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
    ctx.message.handled = true;
    
    switch (ctx.session.profileState) {
        case PROFILE_STATES.SPECIALIZATION:
            if (text.length > 100) {
                await ctx.reply('–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.');
                return;
            }
            profileData.get(userId).specialization = text;
            delete ctx.session.profileState;
            delete ctx.session.waitingForSpecializationInput; // –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥
            
            // –Ø–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø—ã—Ç—É
            setCurrentStep(userId, NAVIGATION_STEPS.EXPERIENCE);
            await showCurrentStep(ctx, NAVIGATION_STEPS.EXPERIENCE);
            break;
            
        case PROFILE_STATES.SKILLS:
            if (text.length > 500) {
                await ctx.reply('–°–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.');
                return;
            }
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
            const customSkills = text.split(',').map(s => s.trim()).filter(s => s.length > 0);
            const existingSkills = profileData.get(userId).skills || [];
            profileData.get(userId).skills = [...existingSkills, ...customSkills];
            delete ctx.session.profileState;
            delete ctx.session.waitingForSkillsInput; // –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥
            
            // –Ø–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
            setCurrentStep(userId, NAVIGATION_STEPS.ACHIEVEMENTS);
            await showCurrentStep(ctx, NAVIGATION_STEPS.ACHIEVEMENTS);
            break;
            
        case PROFILE_STATES.ACHIEVEMENTS:
            if (text.length > 500) {
                await ctx.reply('–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.');
                return;
            }
            profileData.get(userId).achievements = text;
            delete ctx.session.profileState;
            delete ctx.session.waitingForAchievementsInput; // –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥

            // –Ø–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞—Ä–ø–ª–∞—Ç–µ
            setCurrentStep(userId, NAVIGATION_STEPS.SALARY);
            await showCurrentStep(ctx, NAVIGATION_STEPS.SALARY);
            break;
            
        case PROFILE_STATES.SALARY:
            console.log('Processing salary input:', text);
            if (text.length > 100) {
                await ctx.reply('–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.');
                return;
            }
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
            const salaryRegex = /^(–æ—Ç\s)?(\d+\s?[—Ç—ã—Å.]*\s?—Ä—É–±|\$?\d+|\d+\s*-\s*\d+\s*—Ä—É–±)/i;
            if (!salaryRegex.test(text)) {
                await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–æ—Ç 120 —Ç—ã—Å —Ä—É–±" –∏–ª–∏ "150 000 —Ä—É–±"');
                return;
            }
            
            profileData.get(userId).salary_range = text;
            delete ctx.session.profileState;
            delete ctx.session.waitingForSalaryInput; // –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥

            // –Ø–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
            setCurrentStep(userId, NAVIGATION_STEPS.CONTACTS);
            await showCurrentStep(ctx, NAVIGATION_STEPS.CONTACTS);
            break;
            
        case PROFILE_STATES.CONTACTS:
            if (text.length > 100) {
                await ctx.reply('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.');
                return;
            }
            profileData.get(userId).contacts = text;
            delete ctx.session.profileState;
            delete ctx.session.waitingForContactsInput; // –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥
            
            await saveProfile(ctx);
            break;
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function getCurrentStep(userId) {
    return profileNavigation.get(userId) || NAVIGATION_STEPS.SPECIALIZATION;
}

function setCurrentStep(userId, step) {
    profileNavigation.set(userId, step);
}

function goToPreviousStep(userId) {
    const steps = Object.values(NAVIGATION_STEPS);
    const currentIndex = steps.indexOf(getCurrentStep(userId));
    if (currentIndex > 0) {
        setCurrentStep(userId, steps[currentIndex - 1]);
        return steps[currentIndex - 1];
    }
    return null;
}

function goToNextStep(userId) {
    const steps = Object.values(NAVIGATION_STEPS);
    const currentStep = getCurrentStep(userId);
    const currentIndex = steps.indexOf(currentStep);
    
    console.log('goToNextStep - Current step:', currentStep, 'Index:', currentIndex);
    
    if (currentIndex < steps.length - 1) {
        const nextStep = steps[currentIndex + 1];
        setCurrentStep(userId, nextStep);
        console.log('goToNextStep - Setting next step:', nextStep);
        return nextStep;
    }
    console.log('goToNextStep - No next step available');
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
async function showCurrentStep(ctx, step) {
    const userId = ctx.from.id;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!profileData.has(userId)) {
        profileData.set(userId, {});
    }
    
    const data = profileData.get(userId) || {};
    
    switch (step) {
        case NAVIGATION_STEPS.SPECIALIZATION:
            await ctx.reply(
                '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "–û —Å–µ–±–µ":\n\n' +
                '1. ‚è≥ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ______\n' +
                '2. üìù –û–ø—ã—Ç: [1-3 –≥–æ–¥–∞]\n' +
                '3. üõ† –ù–∞–≤—ã–∫–∏: [Agile, Kanban]\n' +
                '4. üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: "–£–≤–µ–ª–∏—á–∏–ª –ø—Ä–∏–±—ã–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 30% –∑–∞ –ø–æ–ª–≥–æ–¥–∞."\n' +
                '5. üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: [100 000 ‚Äì 150 000 —Ä—É–±./–º–µ—Å]\n' +
                '6. üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: @username\n\n' +
                '–ù–∞—á–Ω–µ–º —Å –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:',
                createSpecializationKeyboard()
            );
            break;
            
        case NAVIGATION_STEPS.EXPERIENCE:
            const specText = data.specialization || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ';
            await ctx.reply(
                `1. ‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${specText}\n` +
                '2. ‚è≥ –û–ø—ã—Ç: [1-3 –≥–æ–¥–∞]\n' +
                '3. üìù –ù–∞–≤—ã–∫–∏: [Agile, Kanban]\n' +
                '4. üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: "–£–≤–µ–ª–∏—á–∏–ª –ø—Ä–∏–±—ã–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 30% –∑–∞ –ø–æ–ª–≥–æ–¥–∞."\n' +
                '5. üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: [100 000 ‚Äì 150 000 —Ä—É–±./–º–µ—Å]\n' +
                '6. üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: @username\n\n' +
                '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:',
                createExperienceKeyboard()
            );
            break;
            
        case NAVIGATION_STEPS.SKILLS:
            const expText = data.experience || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ';
            await ctx.reply(
                `1. ‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${data.specialization || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n` +
                `2. ‚úÖ –û–ø—ã—Ç: ${expText}\n` +
                '3. ‚è≥ –ù–∞–≤—ã–∫–∏: [Agile, Kanban]\n' +
                '4. üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: "–£–≤–µ–ª–∏—á–∏–ª –ø—Ä–∏–±—ã–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 30% –∑–∞ –ø–æ–ª–≥–æ–¥–∞."\n' +
                '5. üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: [100 000 ‚Äì 150 000 —Ä—É–±./–º–µ—Å]\n' +
                '6. üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: @username\n\n' +
                '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫–∏:',
                createSkillsKeyboardWithSelected(data.skills || [])
            );
            break;
            
        case NAVIGATION_STEPS.ACHIEVEMENTS:
            const skillsText = data.skills && data.skills.length > 0 ? data.skills.join(', ') : '–ù–µ –≤—ã–±—Ä–∞–Ω–æ';
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ achievements, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (data.achievements === undefined) {
                profileData.get(userId).achievements = null;
            }
            
            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã (–Ω–µ null), —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞—Ä–ø–ª–∞—Ç–µ
            if (data.achievements !== null && data.achievements !== undefined) {
                setCurrentStep(userId, NAVIGATION_STEPS.SALARY);
                await showCurrentStep(ctx, NAVIGATION_STEPS.SALARY);
                break;
            }
            
            await ctx.reply(
                `1. ‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${data.specialization || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n` +
                `2. ‚úÖ –û–ø—ã—Ç: ${data.experience || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n` +
                `3. ‚úÖ –ù–∞–≤—ã–∫–∏: ${skillsText}\n` +
                '4. ‚è≥ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: "–£–≤–µ–ª–∏—á–∏–ª –ø—Ä–∏–±—ã–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 30% –∑–∞ –ø–æ–ª–≥–æ–¥–∞."\n' +
                '5. üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: [100 000 ‚Äì 150 000 —Ä—É–±./–º–µ—Å]\n' +
                '6. üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: @username\n\n' +
                '*–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è?*',
                {
                    parse_mode: 'Markdown',
                    reply_markup: createOptionalKeyboard('achievements').reply_markup
                }
            );
            break;
            
        case NAVIGATION_STEPS.SALARY:
            const achievementsText = data.achievements || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ salary_range, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (data.salary_range === undefined) {
                profileData.get(userId).salary_range = null;
            }

            // –ï—Å–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ (–Ω–µ null), —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
            if (data.salary_range !== null && data.salary_range !== undefined) {
                setCurrentStep(userId, NAVIGATION_STEPS.CONTACTS);
                await showCurrentStep(ctx, NAVIGATION_STEPS.CONTACTS);
                break;
            }

            await ctx.reply(
                `1. ‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${data.specialization || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n` +
                `2. ‚úÖ –û–ø—ã—Ç: ${data.experience || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n` +
                `3. ‚úÖ –ù–∞–≤—ã–∫–∏: ${data.skills && data.skills.length > 0 ? data.skills.join(', ') : '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n` +
                `4. ‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${achievementsText}\n` +
                '5. ‚è≥ –ó–∞—Ä–ø–ª–∞—Ç–∞: [100 000 ‚Äì 150 000 —Ä—É–±./–º–µ—Å]\n' +
                '6. üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: @username\n\n' +
                '*–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è?*',
                createOptionalKeyboard('salary')
            );
            break;
            
        case NAVIGATION_STEPS.CONTACTS:
            const salaryText = data.salary_range || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ contacts, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (data.contacts === undefined) {
                profileData.get(userId).contacts = null;
            }
            
            await ctx.reply(
                `1. ‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${data.specialization || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n` +
                `2. ‚úÖ –û–ø—ã—Ç: ${data.experience || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n` +
                `3. ‚úÖ –ù–∞–≤—ã–∫–∏: ${data.skills && data.skills.length > 0 ? data.skills.join(', ') : '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n` +
                `4. ‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${data.achievements || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                `5. ‚úÖ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${salaryText}\n` +
                '6. ‚è≥ –ö–æ–Ω—Ç–∞–∫—Ç—ã: @username\n\n' +
                '*–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?*',
                {
                    parse_mode: 'Markdown',
                    reply_markup: createOptionalKeyboard('contacts').reply_markup
                }
            );
            break;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö callback'–æ–≤ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å"
async function handleFillAchievements(ctx) {
    ctx.session = {
        ...ctx.session,
        profileState: PROFILE_STATES.ACHIEVEMENTS,
        waitingForAchievementsInput: true
    };
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–£–≤–µ–ª–∏—á–∏–ª –ø—Ä–∏–±—ã–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 30% –∑–∞ –ø–æ–ª–≥–æ–¥–∞"):');
    await ctx.answerCbQuery();
}

async function handleFillSalary(ctx) {
    ctx.session = {
        ...ctx.session,
        profileState: PROFILE_STATES.SALARY,
        waitingForSalaryInput: true
    };
    await ctx.reply(
        '–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä—ã:\n' +
        '‚Ä¢ –æ—Ç 120 —Ç—ã—Å —Ä—É–±\n' +
        '‚Ä¢ 150 000 —Ä—É–±\n' +
        '‚Ä¢ $2000\n' +
        '‚Ä¢ 100 000 - 150 000 —Ä—É–±'
    );
    await ctx.answerCbQuery();
}

async function handleFillContacts(ctx) {
    ctx.session = {
        ...ctx.session,
        profileState: PROFILE_STATES.CONTACTS,
        waitingForContactsInput: true
    };
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):');
    await ctx.answerCbQuery();
}

module.exports = {
    handleProfileCommand,
    handleSpecialization,
    handleExperience,
    handleSkills,
    handleSkillsDone,
    handleSkillsClear,
    handleProfileBack,
    handleAchievements,
    handleSalary,
    handleSalaryRange,
    handleContacts,
    handleTextInput,
    getCurrentStep,
    setCurrentStep,
    goToPreviousStep,
    goToNextStep,
    showCurrentStep,
    handleFillAchievements,
    handleFillSalary,
    handleFillContacts
};