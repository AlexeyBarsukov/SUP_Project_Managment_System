const Project = require('../../db/models/Project');
const User = require('../../db/models/User');
const AuditLog = require('../../db/models/AuditLog');
const ManagerInvitation = require('../../db/models/ManagerInvitation');
const ProjectManager = require('../../db/models/ProjectManager');
const { validateProject, validateProjectId, validateProjectName, validateProjectDescription } = require('../../utils/validation');
const { 
    projectManagementKeyboard, 
    projectStatusKeyboard,
    confirmationKeyboard,
    projectActionsInline,
    getKeyboardByRole
} = require('../keyboards');
const { 
    notifyProjectCreated, 
    notifyJoinRequest, 
    notifyAddedToProject,
    notifyRemovedFromProject,
    notifyProjectStatusChanged,
    notifyProjectActivity
} = require('../../utils/notifications');

const cancelKeyboard = { reply_markup: { keyboard: [['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']], resize_keyboard: true, one_time_keyboard: true } };

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤)
const createProject = async (ctx) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–∞–∑—á–∏–∫
        if (ctx.user.main_role !== 'customer') {
            return ctx.reply('‚ùå –°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫–∏.');
        }

        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        ctx.session = ctx.session || {};
        ctx.session.creatingProject = true;
        ctx.session.projectData = {};

        await ctx.reply(
            'üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n' +
            '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤):',
            { parse_mode: 'HTML' }
        );

    } catch (error) {
        console.error('Error in createProject:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.');
    }
};

// –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const myProjects = async (ctx) => {
    console.log('[myProjects] START - message:', ctx.message.text);
    ctx.message.handled = true; // –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
    try {
        console.log('[myProjects] Start handling for user:', ctx.user?.id);
        if (!ctx.user) {
            console.log('[myProjects] No user in context');
            return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
        }
        if (!ctx.user?.main_role) {
            console.log('[myProjects] No main_role for user:', ctx.user?.id);
            return ctx.reply('–£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
        }
        console.log('[myProjects] user main_role:', ctx.user.main_role);
        let projects = [];

        if (ctx.user.main_role === 'customer') {
            projects = await Project.findByCustomerId(ctx.user.id);
        } else if (ctx.user.main_role === 'manager') {
            projects = await Project.findByManagerId(ctx.user.id);
        } else {
            projects = await Project.findByMemberId(ctx.user.id);
        }

        console.log('[myProjects] projects found:', projects.length, projects.map(p => p.id));

        if (projects.length === 0) {
            return ctx.reply(
                'üìã <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤</b>\n\n' +
                (ctx.user.main_role === 'customer' 
                    ? '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É "‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"'
                    : ctx.user.main_role === 'manager'
                        ? '–í—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –Ω–∏ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ'
                        : '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–µ–∫—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É "üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"'),
                { parse_mode: 'HTML' }
            );
        }

        const statusNames = {
            'draft': 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫',
            'active': 'üöÄ –ê–∫—Ç–∏–≤–Ω—ã–π',
            'archived': 'üì¶ –ê—Ä—Ö–∏–≤',
            'searching_manager': 'üîç –ü–æ–∏—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
            'searching_executors': 'üîç –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π',
            'in_progress': 'üöß –í —Ä–∞–±–æ—Ç–µ'
        };

        let message = 'üìã <b>–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:</b>\n\n';
        const buttons = [];
        for (const project of projects) {
            message += `<b>–ü—Ä–æ–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ:</b> ${statusNames[project.status] || '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'}\n`;
            message += `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</b> ${project.projectName || project.name}\n`;
            message += `üÜî ID: ${project.id}\n`;
            if (ctx.user.main_role === 'customer') {
                message += `üë§ –†–æ–ª—å: –ó–∞–∫–∞–∑—á–∏–∫\n`;
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
                const managers = await ProjectManager.findByProject(project.id);
                let acceptedManagers = [];
                let pendingManagers = [];
                
                for (const m of managers) {
                    if (m.status === 'accepted') acceptedManagers.push(m);
                    if (m.status === 'pending') pendingManagers.push(m);
                }
                
                if (acceptedManagers.length > 0) {
                    // –ï—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
                    for (const m of acceptedManagers) {
                        const user = await User.findById(m.manager_id);
                        if (user && user.username) {
                            message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> @${user.username}\n`;
                        } else if (user) {
                            message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
                        }
                    }
                } else if (pendingManagers.length > 0) {
                    // –ï—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
                    for (const m of pendingManagers) {
                        const user = await User.findById(m.manager_id);
                        if (user && user.username) {
                            message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> @${user.username} (–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏)\n`;
                        } else if (user) {
                            message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏)\n`;
                        }
                    }
                } else {
                    // –ù–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ - –∑–∞–∫–∞–∑—á–∏–∫ —Å–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä
                    message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> –í—ã —Å–∞–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ —Å–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ\n`;
                }
            } else if (ctx.user.main_role === 'manager') {
                message += `üë§ –í–∞—à–∞ —Ä–æ–ª—å: –ú–µ–Ω–µ–¥–∂–µ—Ä\n`;
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
                const managers = await ProjectManager.findByProject(project.id);
                // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const otherManagers = managers.filter(m => m.manager_id !== ctx.user.id && (m.status === 'accepted' || m.status === 'pending'));
                if (otherManagers.length > 0) {
                    let nicks = [];
                    for (const m of otherManagers) {
                        const user = await User.findById(m.manager_id);
                        if (user && user.username) nicks.push(`@${user.username}`);
                    }
                    if (nicks.length > 0) {
                        message += `üë®‚Äçüíº –î—Ä—É–≥–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã: ${nicks.join(', ')}\n`;
                    } else {
                        message += `üë®‚Äçüíº –î—Ä—É–≥–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã: –í—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ\n`;
                    }
                } else {
                    message += `üë®‚Äçüíº –í—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ\n`;
                }
                // –ó–∞–∫–∞–∑—á–∏–∫
                const customer = await User.findById(project.customer_id);
                if (customer && customer.username) {
                    message += `üë§ –ó–∞–∫–∞–∑—á–∏–∫: @${customer.username}\n`;
                } else if (customer) {
                    message += `üë§ –ó–∞–∫–∞–∑—á–∏–∫: ${customer.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
                }
            } else if (project.member_role) {
                message += `üë§ –†–æ–ª—å: ${project.member_role === 'manager' ? '–ú–µ–Ω–µ–¥–∂–µ—Ä' : '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'}\n`;
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
                const managers = await ProjectManager.findByProject(project.id);
                let acceptedManagers = [];
                let pendingManagers = [];
                
                for (const m of managers) {
                    if (m.status === 'accepted') acceptedManagers.push(m);
                    if (m.status === 'pending') pendingManagers.push(m);
                }
                
                if (acceptedManagers.length > 0) {
                    // –ï—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
                    for (const m of acceptedManagers) {
                        const user = await User.findById(m.manager_id);
                        if (user && user.username) {
                            message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> @${user.username}\n`;
                        } else if (user) {
                            message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
                        }
                    }
                } else if (pendingManagers.length > 0) {
                    // –ï—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
                    for (const m of pendingManagers) {
                        const user = await User.findById(m.manager_id);
                        if (user && user.username) {
                            message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> @${user.username} (–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏)\n`;
                        } else if (user) {
                            message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏)\n`;
                        }
                    }
                } else {
                    // –ù–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ - –∑–∞–∫–∞–∑—á–∏–∫ —Å–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä
                    const customer = await User.findById(project.customer_id);
                    if (customer && customer.username) {
                        message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> @${customer.username} (–∑–∞–∫–∞–∑—á–∏–∫)\n`;
                    } else if (customer) {
                        message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${customer.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (–∑–∞–∫–∞–∑—á–∏–∫)\n`;
                    }
                }
            }
            message += `üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(project.created_at).toLocaleDateString('ru-RU')}\n\n`;
            // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
            if (ctx.user.main_role === 'customer') {
                message += '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_project_[ID] –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.\n\n';
            }
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            buttons.push([
                { text: `–ü–æ–¥—Ä–æ–±–Ω–µ–µ (${project.name})`, callback_data: `project_details_${project.id}` }
            ]);
        }

        await ctx.reply(message, {
            parse_mode: 'HTML',
            reply_markup: { inline_keyboard: buttons }
        });

    } catch (error) {
        console.error('[myProjects] Error:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤.');
    }
};

// –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
const projectDetails = async (ctx) => {
    try {
        console.log('=== PROJECT DETAILS START ===');
        console.log('Params:', ctx.params);
        
        const projectId = parseInt(ctx.params[0]);
        console.log('Project ID from params:', projectId);
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞
        const validation = validateProjectId(projectId);
        if (!validation.isValid) {
            console.log('Validation failed:', validation.error);
            return ctx.reply(`‚ùå ${validation.error}`);
        }

        const project = await Project.findById(validation.id);
        console.log('Project found:', project ? 'YES' : 'NO');
        
        if (!project) {
            console.log('Project not found');
            return ctx.reply('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        console.log('Project data:', {
            id: project.id,
            name: project.name,
            status: project.status,
            customer_id: project.customer_id
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const hasAccess = project.customer_id === ctx.user.id || 
                         await Project.getMembers(project.id).then(members => 
                             members.some(m => m.id === ctx.user.id)
                         );

        console.log('Has access:', hasAccess);
        console.log('User ID:', ctx.user.id);
        console.log('Customer ID:', project.customer_id);

        if (!hasAccess) {
            console.log('Access denied');
            return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.');
        }

        const statusNames = {
            'draft': 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫',
            'active': 'üöÄ –ê–∫—Ç–∏–≤–Ω—ã–π',
            'archived': 'üì¶ –ê—Ä—Ö–∏–≤',
            'searching_manager': 'üîç –ü–æ–∏—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
            'searching_executors': 'üîç –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π',
            'in_progress': 'üöß –í —Ä–∞–±–æ—Ç–µ'
        };

        const roleNames = {
            'customer': '–ó–∞–∫–∞–∑—á–∏–∫',
            'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
            'executor': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'
        };

        let message = `üìã <b>–ü—Ä–æ–µ–∫—Ç: ${project.name}</b>\n\n`;
        message += `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${project.description}\n`;
        
        // --- –ë–ª–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ---
        const managers = await ProjectManager.findByProject(project.id);
        let acceptedManagers = [];
        let pendingManagers = [];
        
        for (const m of managers) {
            if (m.status === 'accepted') acceptedManagers.push(m);
            if (m.status === 'pending') pendingManagers.push(m);
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä —É –ø—Ä–æ–µ–∫—Ç–∞
        if (acceptedManagers.length > 0) {
            // –ï—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
            for (const m of acceptedManagers) {
                const user = await User.findById(m.manager_id);
                if (user && user.username) {
                    message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> @${user.username}\n`;
                } else if (user) {
                    message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
                }
            }
        } else if (pendingManagers.length > 0) {
            // –ï—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
            for (const m of pendingManagers) {
                const user = await User.findById(m.manager_id);
                if (user && user.username) {
                    message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> @${user.username} (–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏)\n`;
                } else if (user) {
                    message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏)\n`;
                }
            }
        } else {
            // –ù–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ - –∑–∞–∫–∞–∑—á–∏–∫ —Å–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä
            message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> –í—ã —Å–∞–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ —Å–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ\n`;
        }
        
        // --- –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ ---
        let statusText = '';
        if (project.status === 'searching_manager') statusText = '–í –ø–æ–∏—Å–∫–∞—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–∞';
        else if (project.status === 'searching_executors') statusText = '–í –ø–æ–∏—Å–∫–∞—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π';
        else if (project.status === 'active' || project.status === 'in_progress') statusText = '–í —Ä–∞–±–æ—Ç–µ';
        else if (project.status === 'draft') statusText = '–ß–µ—Ä–Ω–æ–≤–∏–∫';
        else statusText = project.status;
        message += `üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${statusText}\n\n`;

        // --- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ---
        function isFilled(val) {
            if (!val) return false;
            const v = String(val).trim().toLowerCase();
            return v && v !== '...' && v !== '–Ω–µ—Ç';
        }
        if (isFilled(project.deadline)) message += `‚è∞ <b>–°—Ä–æ–∫–∏:</b> ${project.deadline}\n`;
        if (isFilled(project.budget)) message += `üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> ${project.budget}\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        if (project.manager_requirements) {
            message += `üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É:</b>\n${project.manager_requirements}\n`;
        } else {
            message += `üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É:</b> –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã
        if (project.work_conditions) {
            message += `‚öôÔ∏è <b>–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã:</b>\n${project.work_conditions}\n`;
        } else {
            message += `‚öôÔ∏è <b>–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã:</b> –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
        if (project.additional_notes) {
            message += `üí° <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</b>\n${project.additional_notes}\n`;
        } else {
            message += `üí° <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</b> –Ω–µ—Ç\n`;
        }
        // --- –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ ---

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        const projectMembers = await Project.getMembers(project.id);
        let executors = projectMembers.filter(m => m.member_role === 'executor');
        if (executors.length > 0) {
            message += 'üë• <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</b>\n';
            for (const member of executors) {
                message += `‚Ä¢ ${member.first_name} ${member.last_name || ''} (@${member.username})\n`;
            }
        } else {
            message += 'üë• <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</b> –ü–æ–∫–∞ –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π\n';
        }

        // --- –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞ (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏) ---
        if (project.customer_id === ctx.user.id) {
            let managerButtons = [];
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
            const allManagers = await ProjectManager.findByProject(project.id);
            const acceptedManagers = allManagers.filter(m => m.status === 'accepted');
            const pendingManagers = allManagers.filter(m => m.status === 'pending');
            const totalManagers = acceptedManagers.length + pendingManagers.length;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
            const isCustomerManager = acceptedManagers.some(m => m.manager_id === ctx.user.id);
            
            // –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
            console.log('=== DEBUG PROJECT DETAILS ===');
            console.log('Project ID:', project.id);
            console.log('Project status:', project.status);
            console.log('Customer ID:', project.customer_id);
            console.log('Current user ID:', ctx.user.id);
            console.log('Is customer?', project.customer_id === ctx.user.id);
            console.log('All managers:', allManagers);
            console.log('Accepted managers:', acceptedManagers);
            console.log('Pending managers:', pendingManagers);
            console.log('Total managers:', totalManagers);
            console.log('Is customer manager?', isCustomerManager);
            
            // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
            const allowedStatuses = ['active', 'searching_executors'];
            if (allowedStatuses.includes(project.status)) {
                
                // –ö–Ω–æ–ø–∫–∞ "–£–±—Ä–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã, –∫—Ä–æ–º–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
                const otherManagers = acceptedManagers.filter(m => m.manager_id !== ctx.user.id);
                if (otherManagers.length > 0) {
                    managerButtons.push([
                        { text: '‚ùå –£–±—Ä–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', callback_data: `remove_manager_${project.id}` }
                    ]);
                }
                
                // –ö–Ω–æ–ø–∫–∞ "–°–º–µ–Ω–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
                if (acceptedManagers.length > 0) {
                    managerButtons.push([
                        { text: 'üîÑ –°–º–µ–Ω–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', callback_data: `change_manager_${project.id}` }
                    ]);
                }
                
                // –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 3 –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
                if (totalManagers < 3) {
                    managerButtons.push([
                        { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', callback_data: `add_manager_${project.id}` }
                    ]);
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
                    managerButtons.push([
                        { text: 'üîç –ù–∞–π—Ç–∏ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É', callback_data: `search_manager_${project.id}` }
                    ]);
                }
                
                // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–∫—Ä–æ–º–µ –∑–∞–∫–∞–∑—á–∏–∫–∞)
                if (otherManagers.length === 0 && totalManagers < 3) {
                    managerButtons.push([
                        { text: 'üë®‚Äçüíº –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', callback_data: `assign_manager_${project.id}` }
                    ]);
                }
                
                // –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –ö–ù–û–ü–û–ö
                console.log('Other managers:', otherManagers);
                console.log('Other managers length:', otherManagers.length);
                console.log('Total managers < 3?', totalManagers < 3);
                console.log('Should show assign button?', otherManagers.length === 0 && totalManagers < 3);
                console.log('Manager buttons:', managerButtons);
                console.log('=== END DEBUG ===');
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
                const statusName = statusNames[project.status] || project.status;
                message += `\n\n‚ÑπÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</b>\n` +
                          `–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ "–ê–∫—Ç–∏–≤–Ω—ã–π" –∏–ª–∏ "–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π".\n` +
                          `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>${statusName}</b>`;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –∑–∞–∫–∞–∑—á–∏–∫—É)
            managerButtons.push([
                { text: 'üìä –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: `change_status_${project.id}` },
                { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç', callback_data: `delete_project_${project.id}` }
            ]);
            
            await ctx.reply(message, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: managerButtons
                }
            });
            return;
        }
        
        // --- –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ---
        if (
            pendingManagers.length > 0 &&
            pendingManagers.some(m => m.manager_id === ctx.user.id)
        ) {
            // –¢–æ–ª—å–∫–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏
            await ctx.reply(message, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ —É—Å–ª–æ–≤–∏—è—Ö', callback_data: `project_preview_${project.id}` }
                        ],
                        [
                            { text: '‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è', callback_data: `accept_invite_${project.id}` },
                            { text: '‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data: `decline_invite_${project.id}` }
                        ]
                    ]
                }
            });
            return;
        }
        
        // --- –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ---
        if (
            acceptedManagers.length > 0 &&
            acceptedManagers.some(m => m.manager_id === ctx.user.id)
        ) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            const canLeave = project.status !== 'completed' && project.status !== 'archived';
            
            let managerButtons = [];
            
            if (canLeave) {
                managerButtons.push([
                    { text: 'üö™ –ü–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–µ–∫—Ç', callback_data: `leave_project_${project.id}` }
                ]);
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
            if (managerButtons.length > 0) {
                await ctx.reply(message, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: managerButtons
                    }
                });
                return;
            }
        }
        
        // --- –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ (–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π) ---
        const userMember = projectMembers.find(m => m.id === ctx.user.id);
        
        if (userMember && userMember.member_role !== 'customer') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–∫–∞–∑—á–∏–∫–æ–º
            if (project.customer_id !== ctx.user.id) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–∞–∑–∞
                const canDecline = project.status !== 'completed' && project.status !== 'archived';
                
                if (canDecline) {
                    const roleText = userMember.member_role === 'manager' ? '–º–µ–Ω–µ–¥–∂–µ—Ä–∞' : '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è';
                    
                    await ctx.reply(message, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: `‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è`, callback_data: `decline_invite_${project.id}` }
                                ]
                            ]
                        }
                    });
                    return;
                }
            }
        }
        
        // --- –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ---
        await ctx.reply(message, { parse_mode: 'HTML' });
        return;

    } catch (error) {
        console.error('Error in projectDetails:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–∞.');
    }
};

// --- –ù–æ–≤—ã–π –ø–æ—à–∞–≥–æ–≤—ã–π workflow —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ---

// –°—Ç–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
const startCreateProject = async (ctx) => {
    try {
        console.log('[startCreateProject] Start - User ID:', ctx.from?.id);
        console.log('[startCreateProject] User:', ctx.user);
        console.log('[startCreateProject] Session:', ctx.session);
        
        ctx.session = ctx.session || {};
        ctx.session.createProject = {
            step: 'name',
            data: {}
        };
        
        console.log('[startCreateProject] Session initialized, sending message');
        await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–æ—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):', cancelKeyboard);
        console.log('[startCreateProject] Message sent successfully');
    } catch (error) {
        console.error('[startCreateProject] Error:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
const handleCreateProjectStep = async (ctx) => {
    if (!ctx.user) {
        ctx.user = await User.findByTelegramId(ctx.from.id);
    }
    ctx.session = ctx.session || {};
    const state = ctx.session.createProject;
    if (!state) return;

    // –û—Ç–º–µ–Ω–∞
    if (ctx.message.text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' || ctx.message.text === '/cancel') {
        delete ctx.session.createProject;
        await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', {
            reply_markup: getKeyboardByRole(ctx.user.main_role).reply_markup
        });
        return;
    }

    switch (state.step) {
        case 'name': {
            const projectName = ctx.message.text.trim();
            const validation = validateProjectName(projectName);
            if (!validation.isValid) {
                return ctx.reply(`‚ùå ${validation.error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:`, cancelKeyboard);
            }
            state.data.projectName = projectName;
            state.step = 'description';
            return ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤):', cancelKeyboard);
        }
        case 'description': {
            const description = ctx.message.text.trim();
            const validation = validateProjectDescription(description);
            if (!validation.isValid) {
                return ctx.reply(`‚ùå ${validation.error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:`, cancelKeyboard);
            }
            state.data.description = description;
            state.step = 'add_executors';
            return ctx.reply('–î–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π? (–î–∞/–ù–µ—Ç)', { ...confirmationKeyboard, ...cancelKeyboard });
        }
        case 'add_executors': {
            const answer = ctx.message.text.toLowerCase();
            if (answer === '–¥–∞' || answer === 'yes') {
                const executors = await User.findVisibleByRole('executor');
                if (!executors || executors.length === 0) {
                    await ctx.reply(
                        '–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º.\n' +
                        '–í—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.',
                        cancelKeyboard
                    );
                    state.data.executors = [];
                    state.step = 'add_manager';
                    return ctx.reply('–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞? (–î–∞/–ù–µ—Ç)', { ...confirmationKeyboard, ...cancelKeyboard });
                } else {
                    let list = '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:\n';
                    for (const e of executors) {
                        list += `‚Ä¢ @${e.username} ‚Äî ${e.first_name || ''} ${e.last_name || ''}\n`;
                    }
                    list += '\n–í–≤–µ–¥–∏—Ç–µ username –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ @ (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –º–∞–∫—Å–∏–º—É–º 10):';
                    state.data.executors = [];
                    state.step = 'executors_input';
                    return ctx.reply(list, cancelKeyboard);
                }
            } else if (answer === '–Ω–µ—Ç' || answer === 'no') {
                state.step = 'add_manager';
                return ctx.reply('–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞? (–î–∞/–ù–µ—Ç)', { ...confirmationKeyboard, ...cancelKeyboard });
            } else {
                return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".', cancelKeyboard);
            }
        }
        case 'executors_input': {
            const usernames = ctx.message.text.split(/\s+/).filter(u => u.startsWith('@'));
            if (usernames.length === 0 || usernames.length > 10) {
                return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ 10 username —á–µ—Ä–µ–∑ @, —Ä–∞–∑–¥–µ–ª—è—è –ø—Ä–æ–±–µ–ª–æ–º.', cancelKeyboard);
            }
            state.data.executors = usernames;
            state.step = 'add_manager';
            return ctx.reply('–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞? (–î–∞/–ù–µ—Ç)', { ...confirmationKeyboard, ...cancelKeyboard });
        }
        case 'add_manager': {
            const answer = ctx.message.text.toLowerCase();
            if (answer === '–¥–∞' || answer === 'yes') {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –∑–∞–∫–∞–∑—á–∏–∫–∞)
                let managers = await User.findVisibleByRole('manager');
                if (!managers || managers.length === 0) {
                    await ctx.reply(
                        '–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º.\n' +
                        '–í—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.',
                        cancelKeyboard
                    );
                    state.step = 'confirm';
                    return showProjectSummary(ctx);
                } else {
                    // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
                    managers = managers.filter(m => m.id !== ctx.user.id);
                    let list = '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:\n';
                    for (const m of managers) {
                        let desc = [];
                        if (m.specialization) desc.push(m.specialization);
                        if (m.experience) desc.push(m.experience);
                        if (m.skills) {
                            let skills = m.skills;
                            if (typeof skills === 'string') {
                                try {
                                    const arr = JSON.parse(skills);
                                    if (Array.isArray(arr)) skills = arr.join(', ');
                                } catch { /* ignore */ }
                            }
                            desc.push(`–ù–∞–≤—ã–∫–∏: ${skills}`);
                        }
                        if (m.achievements) desc.push(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${m.achievements}`);
                        list += `‚Ä¢ @${m.username} ‚Äî ${m.first_name || ''} ${m.last_name || ''}`;
                        if (desc.length) list += `\n   ${desc.join(' | ')}`;
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
                        let additionalInfo = [];
                        if (m.salary_range) additionalInfo.push(`üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${m.salary_range}`);
                        if (m.contacts) additionalInfo.push(`üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${m.contacts}`);
                        
                        if (additionalInfo.length > 0) {
                            list += `\n   ${additionalInfo.join(' | ')}`;
                        }
                        
                        list += '\n';
                    }
                    if (managers.length === 0) {
                        list += '\n–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –∫—Ä–æ–º–µ –≤–∞—Å.\n';
                    }
                    list += '\n–í–≤–µ–¥–∏—Ç–µ username –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–µ—Ä–µ–∑ @:';
                    state.step = 'manager_input';
                    return ctx.reply(list, cancelKeyboard);
                }
            } else if (answer === '–Ω–µ—Ç' || answer === 'no') {
                state.step = 'confirm';
                return showProjectSummary(ctx);
            } else {
                return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".', cancelKeyboard);
            }
        }
        case 'manager_input': {
            const username = ctx.message.text.trim();
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ username
            if (!username.startsWith('@') || username.length < 5 || !/^@[A-Za-z0-9_]+$/.test(username)) {
                return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ username –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–µ—Ä–µ–∑ @ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _).', cancelKeyboard);
            }
            // –ï—Å–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ –≤—ã–±—Ä–∞–ª —Å–µ–±—è –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            if (username.replace('@', '') === ctx.user.username) {
                state.data.manager = username;
                state.data.selfManager = true;
                state.step = 'confirm';
                return showProjectSummary(ctx);
            }
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            let managers = await User.findVisibleByRole('manager');
            managers = managers.filter(m => m.id !== ctx.user.id);
            const found = managers.find(m => m.username && ('@' + m.username.toLowerCase()) === username.toLowerCase());
            if (!found) {
                let list = '‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å —Ç–∞–∫–∏–º username –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.\n\n';
                list += '–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã:\n';
                for (const m of managers) {
                    list += `‚Ä¢ @${m.username} ‚Äî ${m.first_name || ''} ${m.last_name || ''}\n`;
                }
                return ctx.reply(list, cancelKeyboard);
            }
            state.data.manager = username;
            state.data.selfManager = false;
            // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ä–æ–∫–∏
            state.step = 'deadline';
            return ctx.reply('–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–¥–æ 30.07.2025" –∏–ª–∏ "3 –Ω–µ–¥–µ–ª–∏"):', cancelKeyboard);
        }
        case 'deadline': {
            state.data.deadline = ctx.message.text.trim();
            state.step = 'budget';
            return ctx.reply('–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã –ø–ª–∞—Ç–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: "100 000 —Ä—É–±." –∏–ª–∏ "–ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏"):', cancelKeyboard);
        }
        case 'budget': {
            state.data.budget = ctx.message.text.trim();
            state.step = 'manager_requirements';
            return ctx.reply('–û–ø–∏—à–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ–ø—ã—Ç, –Ω–∞–≤—ã–∫–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è):', cancelKeyboard);
        }
        case 'manager_requirements': {
            state.data.manager_requirements = ctx.message.text.trim();
            state.step = 'work_conditions';
            return ctx.reply('–û–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: —É–¥–∞–ª—ë–Ω–Ω–æ, –≥–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫, –æ–ø–ª–∞—Ç–∞ –ø–æ —ç—Ç–∞–ø–∞–º):', cancelKeyboard);
        }
        case 'work_conditions': {
            state.data.work_conditions = ctx.message.text.trim();
            state.step = 'additional_notes';
            return ctx.reply('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å):', cancelKeyboard);
        }
        case 'additional_notes': {
            state.data.additional_notes = ctx.message.text.trim();
            state.step = 'confirm';
            return showProjectSummary(ctx);
        }
        case 'confirm': {
            const answer = ctx.message.text.toLowerCase();
            if (answer === '–¥–∞' || answer === 'yes') {
                await saveProject(ctx);
                delete ctx.session.createProject;
                return;
            } else if (answer === '–Ω–µ—Ç' || answer === 'no') {
                delete ctx.session.createProject;
                await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', {
                    reply_markup: getKeyboardByRole(ctx.user.main_role).reply_markup
                });
                return;
            } else {
                return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".', cancelKeyboard);
            }
        }
    }
};

// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
async function showProjectSummary(ctx) {
    const state = ctx.session.createProject;
    const d = state.data;
    let summary = `üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞:</b>\n\n`;
    summary += `–ù–∞–∑–≤–∞–Ω–∏–µ: <b>${d.projectName}</b>\n`;
    summary += `–û–ø–∏—Å–∞–Ω–∏–µ: ${d.description}\n`;
    if (d.deadline) summary += `–°—Ä–æ–∫–∏: ${d.deadline}\n`;
    if (d.budget) summary += `–ë—é–¥–∂–µ—Ç: ${d.budget}\n`;
    if (d.manager_requirements) summary += `–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É: ${d.manager_requirements}\n`;
    if (d.work_conditions) summary += `–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã: ${d.work_conditions}\n`;
    if (d.additional_notes) summary += `–î–æ–ø. –ø–æ–∂–µ–ª–∞–Ω–∏—è: ${d.additional_notes}\n`;
    if (d.executors && d.executors.length > 0) {
        summary += `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: ${d.executors.join(', ')}\n`;
    }
    if (d.manager) {
        summary += `–î–æ–ø. –º–µ–Ω–µ–¥–∂–µ—Ä: ${d.manager}\n`;
    }
    summary += '\n–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç? (–î–∞/–ù–µ—Ç)';
    await ctx.reply(summary, { parse_mode: 'HTML' });
}

async function processUsers(usernames, role, projectId, ctx) {
    for (const username of usernames) {
        try {
            const cleanUsername = username.replace(/^@/, '');
            const user = await User.findByUsername(cleanUsername);
            if (user) {
                // –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑
                if (role === 'manager' && user.id === (ctx.user.id || ctx.user.telegram_id)) continue;
                await Project.addUserToProjectRoles(user.id, projectId, role);
            } else {
                await ctx.reply(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        } catch (error) {
            console.error(`Error adding ${role} ${username}:`, error);
        }
    }
    // –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
    if (role === 'executor') {
        await Project.checkAndActivateProject(projectId);
    }
}

// TODO: –û–±–µ—Ä–Ω—É—Ç—å saveProject –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ä–æ–ª–µ–π
async function saveProject(ctx) {
    try {
        console.log('[saveProject] –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from?.id);
        console.log('[saveProject] –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞:', JSON.stringify(ctx.session?.createProject?.data, null, 2));
        
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!ctx.user) {
            ctx.user = await User.findByTelegramId(ctx.from.id);
            if (!ctx.user) {
                throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`);
            }
        }
        
        const d = ctx.session.createProject.data;
        const userId = ctx.user.id || ctx.user.telegram_id || ctx.from.id;
        if (!userId) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
        
        console.log('[saveProject] ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        
        if (d.executors && d.executors.length > 10) {
            await ctx.reply('‚ùå –ú–∞–∫—Å–∏–º—É–º 10 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.');
            return;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
        let projectStatus = 'draft';
        if (!d.manager) {
            projectStatus = 'searching_executors'; // –ú–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –∑–∞–∫–∞–∑—á–∏–∫, –∏—â–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        } else {
            projectStatus = 'searching_manager'; // –ñ–¥—ë–º —Å–æ–≥–ª–∞—Å–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        }
        
        console.log('[saveProject] –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º:', projectStatus);
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
        const project = await Project.create(
            d.projectName,
            d.description,
            userId,
            projectStatus,
            {
                deadline: d.deadline,
                budget: d.budget,
                manager_requirements: d.manager_requirements,
                work_conditions: d.work_conditions,
                additional_notes: d.additional_notes
            }
        );
        
        if (!project) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç');
        
        console.log('[saveProject] –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID:', project.id);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª–∏
        console.log('[saveProject] –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å customer –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        await Project.addUserToProjectRoles(userId, project.id, 'customer');
        
        // –ï—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –∑–∞–∫–∞–∑—á–∏–∫ —Å—Ä–∞–∑—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        if (!d.manager) {
            console.log('[saveProject] –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω, –∑–∞–∫–∞–∑—á–∏–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º');
            await Project.addUserToProjectRoles(userId, project.id, 'manager');
            await ProjectManager.create({ project_id: project.id, manager_id: userId, status: 'accepted' });
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        if (d.executors?.length > 0) {
            console.log('[saveProject] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:', d.executors);
            await processUsers(d.executors, 'executor', project.id, ctx);
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if (d.manager) {
            console.log('[saveProject] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', d.manager);
            const managerUser = await User.findByUsername(d.manager.replace('@', ''));
            if (managerUser) {
                console.log('[saveProject] –ù–∞–π–¥–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä:', managerUser.id);
                
                if (d.selfManager) {
                    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ –≤—ã–±—Ä–∞–ª —Å–µ–±—è –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ‚Äî —Å—Ä–∞–∑—É –Ω–∞–∑–Ω–∞—á–∞–µ–º accepted –∏ —Å—Ç–∞—Ç—É—Å 'searching_executors'
                    console.log('[saveProject] –ó–∞–∫–∞–∑—á–∏–∫ –≤—ã–±—Ä–∞–ª —Å–µ–±—è –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
                    await Project.addUserToProjectRoles(managerUser.id, project.id, 'manager');
                    await ProjectManager.create({ project_id: project.id, manager_id: managerUser.id, status: 'accepted' });
                    await Project.updateStatus(project.id, 'searching_executors');
                    await Project.addMember(project.id, ctx.user.id, 'manager');
                } else {
                    // –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                    console.log('[saveProject] –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
                    await ManagerInvitation.create({
                        project_id: project.id,
                        manager_telegram_id: managerUser.telegram_id,
                        customer_telegram_id: ctx.user.telegram_id || ctx.user.id || ctx.from.id
                    });
                    // –í–ê–ñ–ù–û: —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ project_managers —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending
                    await ProjectManager.create({ project_id: project.id, manager_id: managerUser.id, status: 'pending' });
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
                    console.log('[saveProject] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É:', managerUser.telegram_id);
                    await ctx.telegram.sendMessage(
                        managerUser.telegram_id,
                        `–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç "${project.name}" –æ—Ç ${ctx.user.first_name} ${ctx.user.last_name || ''}\n\n–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ —É—Å–ª–æ–≤–∏—è—Ö"`,
                        {
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        { text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ —É—Å–ª–æ–≤–∏—è—Ö', callback_data: `project_preview_${project.id}` }
                                    ],
                                    [
                                        { text: '‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è', callback_data: `accept_invite_${project.id}` },
                                        { text: '‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data: `decline_invite_${project.id}` }
                                    ]
                                ]
                            }
                        }
                    );
                }
            } else {
                console.log('[saveProject] –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', d.manager);
            }
        }
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        console.log('[saveProject] –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞');
        await AuditLog.logProjectCreated(userId, project.id, project.name);
        await notifyProjectCreated(ctx, project, ctx.user);
        
        // –û—á–∏—Å—Ç–∫–∞ –∏ –æ—Ç–≤–µ—Ç
        delete ctx.session.createProject;
        console.log('[saveProject] –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
        
        await ctx.reply(
            `‚úÖ <b>–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n` +
            `–ù–∞–∑–≤–∞–Ω–∏–µ: ${project.name}\n` +
            `ID: ${project.id}`,
            { 
                parse_mode: 'HTML',
                reply_markup: getKeyboardByRole(ctx.user.main_role).reply_markup
            }
        );
        
        console.log('[saveProject] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        console.error('SaveProject error:', {
            error: error.message,
            stack: error.stack,
            userId: ctx.from?.id,
            session: ctx.session?.createProject
        });
        
        // –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        let errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        
        if (error.message.includes('ON CONFLICT')) {
            errorMessage = '‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –∫–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
        } else if (error.message.includes('duplicate key')) {
            errorMessage = '‚ùå –ü—Ä–æ–µ–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.';
        } else if (error.message.includes('foreign key')) {
            errorMessage = '‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.';
        } else if (error.message.includes('not found')) {
            errorMessage = '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.';
        }
        
        await ctx.reply(errorMessage);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
const deleteProject = async (ctx) => {
    try {
        console.log('[deleteProject] Start for user:', ctx.user?.id);
        
        if (!ctx.user) {
            return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
        }

        // –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /delete_project_[ID]
        const projectId = parseInt(ctx.message.text.match(/\/delete_project_(\d+)/)?.[1]);
        
        if (!projectId) {
            return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete_project_[ID]');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        const project = await Project.findById(projectId);
        if (!project) {
            return ctx.reply('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã)
        if (project.customer_id !== ctx.user.id) {
            return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –£–¥–∞–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫.');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω (–º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –∏ –∞—Ä—Ö–∏–≤—ã)
        if (project.status === 'active') {
            return ctx.reply('‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç. –°–Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ê—Ä—Ö–∏–≤".');
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        ctx.session = ctx.session || {};
        ctx.session.pendingDelete = {
            projectId: projectId,
            projectName: project.name
        };

        const warningMessage = 
            `üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n` +
            `üìã <b>–ü—Ä–æ–µ–∫—Ç:</b> ${project.name}\n` +
            `üÜî <b>ID:</b> ${projectId}\n` +
            `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${new Date(project.created_at).toLocaleDateString('ru-RU')}\n\n` +
            `‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:\n` +
            `‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã\n` +
            `‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö –±—É–¥–µ—Ç —Å—Ç–µ—Ä—Ç–∞\n` +
            `‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞\n` +
            `‚Ä¢ –ê—É–¥–∏—Ç –ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–∞ –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω\n\n` +
            `üîí <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>\n\n` +
            `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:\n` +
            `<code>–£–î–ê–õ–ò–¢–¨ ${projectId}</code>\n\n` +
            `–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ:\n` +
            `<code>–û–¢–ú–ï–ù–ê</code>`;

        await ctx.reply(warningMessage, {
            parse_mode: 'HTML',
            reply_markup: {
                keyboard: [
                    [`üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ${projectId}`],
                    ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ']
                ],
                resize_keyboard: true,
                one_time_keyboard: true
            }
        });
    } catch (error) {
        console.error('[deleteProject] Error:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.');
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
const handleDeleteConfirmation = async (ctx) => {
    try {
        if (!ctx.session?.pendingDelete) {
            return false; // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        }
        
        const { projectId, projectName } = ctx.session.pendingDelete;
        const userInput = ctx.message.text.trim().toLowerCase();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if (userInput === '–æ—Ç–º–µ–Ω–∞' || userInput === 'cancel' || userInput === '‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ') {
            delete ctx.session.pendingDelete;
            await ctx.reply(
                '‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
                { reply_markup: getKeyboardByRole(ctx.user.main_role).reply_markup }
            );
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        if (userInput === `üóëÔ∏è —É–¥–∞–ª–∏—Ç—å ${projectId}`.toLowerCase()) {
            return await performProjectDeletion(ctx, projectId, projectName);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è
        if (userInput === `—É–¥–∞–ª–∏—Ç—å ${projectId}`.toLowerCase()) {
            return await performProjectDeletion(ctx, projectId, projectName);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const confirmVariants = ['–¥–∞', 'yes', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', '—É–¥–∞–ª–∏—Ç—å', '—É–¥–∞–ª—è–π'];
        if (confirmVariants.includes(userInput)) {
            return await performProjectDeletion(ctx, projectId, projectName);
        }
        
        // –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        await ctx.reply(
            `‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥</b>\n\n` +
            `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è:\n` +
            `‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ${projectId}"\n` +
            `‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: <code>–£–î–ê–õ–ò–¢–¨ ${projectId}</code>\n` +
            `‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ: <code>–¥–∞</code>, <code>yes</code>\n\n` +
            `–î–ª—è –æ—Ç–º–µ–Ω—ã:\n` +
            `‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"\n` +
            `‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ: <code>–æ—Ç–º–µ–Ω–∞</code>`,
            { 
                parse_mode: 'HTML',
                reply_markup: {
                    keyboard: [
                        [`üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ${projectId}`],
                        ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ']
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: true
                }
            }
        );
        return true;
        
    } catch (error) {
        console.error('[handleDeleteConfirmation] Error:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.');
        delete ctx.session.pendingDelete;
        return true;
    }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
const performProjectDeletion = async (ctx, projectId, projectName) => {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ª–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é (–¥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞)
        await AuditLog.logProjectDeleted(ctx.user.id, projectId, projectName);
        
        // –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        const success = await Project.delete(projectId, ctx.user.id);
        
        if (success) {
            delete ctx.session.pendingDelete;
            await ctx.reply(
                `‚úÖ <b>–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n` +
                `üìã –ü—Ä–æ–µ–∫—Ç: ${projectName}\n` +
                `üÜî ID: ${projectId}\n\n` +
                `üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –±—ã–ª–∏ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã.`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: getKeyboardByRole(ctx.user.main_role).reply_markup
                }
            );
        } else {
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        return true;
    } catch (error) {
        console.error('[performProjectDeletion] Error:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.');
        delete ctx.session.pendingDelete;
        return true;
    }
};

const projectPreview = async (ctx) => {
    try {
        console.log('=== PROJECT PREVIEW START ===');
        console.log('Params:', ctx.params);
        
        const projectId = parseInt(ctx.params[0]);
        console.log('Project ID from params:', projectId);
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞
        const validation = validateProjectId(projectId);
        if (!validation.isValid) {
            console.log('Validation failed:', validation.error);
            return ctx.reply(`‚ùå ${validation.error}`);
        }

        const project = await Project.findById(validation.id);
        console.log('Project found:', project ? 'YES' : 'NO');
        
        if (!project) {
            console.log('Project not found');
            return ctx.reply('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        console.log('Project data:', {
            id: project.id,
            name: project.name,
            status: project.status,
            customer_id: project.customer_id
        });

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
        const customer = await User.findById(project.customer_id);
        if (!customer) {
            return ctx.reply('‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑—á–∏–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ
        let message = `üìã <b>${project.name}</b>\n\n`;
        message += `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${project.description}\n\n`;
        
        if (project.budget) {
            message += `üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> ${project.budget}\n`;
        }
        
        if (project.deadline) {
            message += `‚è∞ <b>–°—Ä–æ–∫:</b> ${project.deadline}\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        if (project.manager_requirements) {
            message += `\nüìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É:</b>\n${project.manager_requirements}\n`;
        } else {
            message += `\nüìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É:</b> –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã
        if (project.work_conditions) {
            message += `\n‚öôÔ∏è <b>–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã:</b>\n${project.work_conditions}\n`;
        } else {
            message += `\n‚öôÔ∏è <b>–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã:</b> –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
        if (project.additional_notes) {
            message += `\nüí° <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</b>\n${project.additional_notes}\n`;
        } else {
            message += `\nüí° <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</b> –Ω–µ—Ç\n`;
        }
        
        message += `\nüë§ <b>–ó–∞–∫–∞–∑—á–∏–∫:</b> @${customer.username || customer.first_name}\n`;
        message += `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${new Date(project.created_at).toLocaleDateString('ru-RU')}\n`;
        message += `üÜî <b>ID –ø—Ä–æ–µ–∫—Ç–∞:</b> ${project.id}`;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        const replyMarkup = {
            inline_keyboard: [
                [
                    { text: '‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è', callback_data: `accept_invite_${project.id}` },
                    { text: '‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data: `decline_invite_${project.id}` }
                ]
            ]
        };

        await ctx.reply(message, {
            parse_mode: 'HTML',
            reply_markup: replyMarkup
        });

    } catch (error) {
        console.error('Error in projectPreview:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ.');
    }
};

module.exports = {
    createProject,
    myProjects,
    projectDetails,
    startCreateProject,
    handleCreateProjectStep,
    deleteProject,
    handleDeleteConfirmation,
    performProjectDeletion,
    availableProjects: undefined, // –µ—Å–ª–∏ –µ—Å—Ç—å, –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
    projectPreview,
    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
};