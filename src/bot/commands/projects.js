const Project = require('../../db/models/Project');
const User = require('../../db/models/User');
const AuditLog = require('../../db/models/AuditLog');
const ManagerInvitation = require('../../db/models/ManagerInvitation');
const ProjectManager = require('../../db/models/ProjectManager');
const ProjectRole = require('../../db/models/ProjectRole');
const { validateProject, validateProjectId, validateProjectName, validateProjectDescription } = require('../../utils/validation');
const { 
    projectManagementKeyboard, 
    projectStatusKeyboard,
    confirmationKeyboard,
    projectActionsInline,
    getKeyboardByRole
} = require('../keyboards');
const { 
    notifyProjectCreated, 
    notifyJoinRequest, 
    notifyAddedToProject,
    notifyRemovedFromProject,
    notifyProjectStatusChanged,
    notifyProjectActivity
} = require('../../utils/notifications');

const cancelKeyboard = { reply_markup: { keyboard: [['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']], resize_keyboard: true, one_time_keyboard: true } };

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤)
const createProject = async (ctx) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–∞–∑—á–∏–∫
        if (ctx.user.main_role !== 'customer') {
            return ctx.reply('‚ùå –°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫–∏.');
        }

        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        ctx.session = ctx.session || {};
        ctx.session.creatingProject = true;
        ctx.session.projectData = {};

        await ctx.reply(
            'üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n' +
            '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤):',
            { parse_mode: 'HTML' }
        );

    } catch (error) {
        console.error('Error in createProject:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.');
    }
};

// –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const myProjects = async (ctx) => {
    ctx.message.handled = true; // –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
    try {
        if (!ctx.user) {
            return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
        }
        if (!ctx.user?.main_role) {
            return ctx.reply('–£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if (ctx.user.main_role === 'manager') {
            const isProfileComplete = await User.isManagerProfileFullyComplete(ctx.user.telegram_id);
            if (!isProfileComplete) {
                return ctx.reply(
                    '‚ö†Ô∏è <b>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞!</b>\n\n' +
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.',
                    { parse_mode: 'HTML' }
                );
            }
        }
        
        let projects = [];

        if (ctx.user.main_role === 'customer') {
            projects = await Project.findByCustomerId(ctx.user.id);
        } else if (ctx.user.main_role === 'manager') {
            projects = await Project.findByManagerId(ctx.user.id);
        } else {
            projects = await Project.findByMemberId(ctx.user.id);
        }

        if (projects.length === 0) {
            return ctx.reply(
                'üìã <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤</b>\n\n' +
                (ctx.user.main_role === 'customer' 
                    ? '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É "‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"'
                    : ctx.user.main_role === 'manager'
                        ? '–í—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –Ω–∏ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ'
                        : '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–µ–∫—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É "üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"'),
                { parse_mode: 'HTML' }
            );
        }

        const statusNames = {
            'draft': 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫',
            'active': 'üöÄ –ê–∫—Ç–∏–≤–Ω—ã–π',
            'archived': 'üì¶ –ê—Ä—Ö–∏–≤',
            'searching_manager': 'üîç –ü–æ–∏—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
            'searching_executors': 'üîç –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π',
            'in_progress': 'üöß –í —Ä–∞–±–æ—Ç–µ'
        };

        let message = 'üìã <b>–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:</b>\n\n';
        const buttons = [];
        for (const project of projects) {
            message += `<b>–ü—Ä–æ–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ:</b> ${statusNames[project.status] || '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'}\n`;
            message += `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</b> ${project.projectName || project.name}\n`;
            message += `üÜî ID: ${project.id}\n`;
            if (ctx.user.main_role === 'customer') {
                message += `üë§ –†–æ–ª—å: –ó–∞–∫–∞–∑—á–∏–∫\n`;
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
                const managers = await ProjectManager.findByProject(project.id);
                let acceptedManagers = [];
                let pendingManagers = [];
                
                for (const m of managers) {
                    if (m.status === 'accepted') acceptedManagers.push(m);
                    if (m.status === 'pending') pendingManagers.push(m);
                }
                
                if (acceptedManagers.length > 0) {
                    // –ï—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
                    for (const m of acceptedManagers) {
                        const user = await User.findById(m.manager_id);
                        if (user && user.username) {
                            message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> @${user.username}\n`;
                        } else if (user) {
                            message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
                        }
                    }
                } else if (pendingManagers.length > 0) {
                    // –ï—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
                    for (const m of pendingManagers) {
                        const user = await User.findById(m.manager_id);
                        if (user && user.username) {
                            message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> @${user.username} (–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏)\n`;
                        } else if (user) {
                            message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏)\n`;
                        }
                    }
                } else {
                    // –ù–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ - –∑–∞–∫–∞–∑—á–∏–∫ —Å–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä
                    message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> –í—ã —Å–∞–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ —Å–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ\n`;
                }
            } else if (ctx.user.main_role === 'manager') {
                message += `üë§ –í–∞—à–∞ —Ä–æ–ª—å: –ú–µ–Ω–µ–¥–∂–µ—Ä\n`;
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
                const managers = await ProjectManager.findByProject(project.id);
                // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const otherManagers = managers.filter(m => m.manager_id !== ctx.user.id && (m.status === 'accepted' || m.status === 'pending'));
                if (otherManagers.length > 0) {
                    let nicks = [];
                    for (const m of otherManagers) {
                        const user = await User.findById(m.manager_id);
                        if (user && user.username) nicks.push(`@${user.username}`);
                    }
                    if (nicks.length > 0) {
                        message += `üë®‚Äçüíº –î—Ä—É–≥–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã: ${nicks.join(', ')}\n`;
                    } else {
                        message += `üë®‚Äçüíº –î—Ä—É–≥–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã: –í—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ\n`;
                    }
                } else {
                    message += `üë®‚Äçüíº –í—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ\n`;
                }
                // –ó–∞–∫–∞–∑—á–∏–∫
                const customer = await User.findById(project.customer_id);
                if (customer && customer.username) {
                    message += `üë§ –ó–∞–∫–∞–∑—á–∏–∫: @${customer.username}\n`;
                } else if (customer) {
                    message += `üë§ –ó–∞–∫–∞–∑—á–∏–∫: ${customer.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
                }
            } else if (project.member_role) {
                message += `üë§ –†–æ–ª—å: ${project.member_role === 'manager' ? '–ú–µ–Ω–µ–¥–∂–µ—Ä' : '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'}\n`;
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
                const managers = await ProjectManager.findByProject(project.id);
                let acceptedManagers = [];
                let pendingManagers = [];
                
                for (const m of managers) {
                    if (m.status === 'accepted') acceptedManagers.push(m);
                    if (m.status === 'pending') pendingManagers.push(m);
                }
                
                if (acceptedManagers.length > 0) {
                    // –ï—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
                    for (const m of acceptedManagers) {
                        const user = await User.findById(m.manager_id);
                        if (user && user.username) {
                            message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> @${user.username}\n`;
                        } else if (user) {
                            message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
                        }
                    }
                } else if (pendingManagers.length > 0) {
                    // –ï—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
                    for (const m of pendingManagers) {
                        const user = await User.findById(m.manager_id);
                        if (user && user.username) {
                            message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> @${user.username} (–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏)\n`;
                        } else if (user) {
                            message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏)\n`;
                        }
                    }
                } else {
                    // –ù–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ - –∑–∞–∫–∞–∑—á–∏–∫ —Å–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä
                    const customer = await User.findById(project.customer_id);
                    if (customer && customer.username) {
                        message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> @${customer.username} (–∑–∞–∫–∞–∑—á–∏–∫)\n`;
                    } else if (customer) {
                        message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${customer.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (–∑–∞–∫–∞–∑—á–∏–∫)\n`;
                    }
                }
            }
            message += `üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(project.created_at).toLocaleDateString('ru-RU')}\n\n`;
            // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
            if (ctx.user.main_role === 'customer') {
                message += '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_project_[ID] –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.\n\n';
            }
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            buttons.push([
                { text: `–ü–æ–¥—Ä–æ–±–Ω–µ–µ (${project.name})`, callback_data: `project_details_${project.id}` }
            ]);
        }

        await ctx.reply(message, {
            parse_mode: 'HTML',
            reply_markup: { inline_keyboard: buttons }
        });

    } catch (error) {
        console.error('[myProjects] Error:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤.');
    }
};

// –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
const projectDetails = async (ctx) => {
    try {
        console.log('=== PROJECT DETAILS START ===');
        console.log('Params:', ctx.params);
        
        const projectId = parseInt(ctx.params[0]);
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞
        const validation = validateProjectId(projectId);
        if (!validation.isValid) {
            return ctx.reply(`‚ùå ${validation.error}`);
        }

        const project = await Project.findById(validation.id);
        
        if (!project) {
            return ctx.reply('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const hasAccess = project.customer_id === ctx.user.id || 
                         await Project.getMembers(project.id).then(members => 
                             members.some(m => m.id === ctx.user.id)
                         );

        if (!hasAccess) {
            return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.');
        }

        const statusNames = {
            'draft': 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫',
            'active': 'üöÄ –ê–∫—Ç–∏–≤–Ω—ã–π',
            'archived': 'üì¶ –ê—Ä—Ö–∏–≤',
            'searching_manager': 'üîç –ü–æ–∏—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
            'searching_executors': 'üîç –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π',
            'in_progress': 'üöß –í —Ä–∞–±–æ—Ç–µ'
        };

        const roleNames = {
            'customer': '–ó–∞–∫–∞–∑—á–∏–∫',
            'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
            'executor': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'
        };

        let message = `üìã <b>–ü—Ä–æ–µ–∫—Ç: ${project.name}</b>\n\n`;
        message += `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${project.description}\n`;
        
        // --- –ë–ª–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ---
        const managers = await ProjectManager.findByProject(project.id);
        let acceptedManagers = [];
        let pendingManagers = [];
        
        for (const m of managers) {
            if (m.status === 'accepted') acceptedManagers.push(m);
            if (m.status === 'pending') pendingManagers.push(m);
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä —É –ø—Ä–æ–µ–∫—Ç–∞
        if (acceptedManagers.length > 0) {
            // –ï—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
            for (const m of acceptedManagers) {
                const user = await User.findById(m.manager_id);
                if (user && user.username) {
                    message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> @${user.username}\n`;
                } else if (user) {
                    message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
                }
            }
        } else if (pendingManagers.length > 0) {
            // –ï—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
            for (const m of pendingManagers) {
                const user = await User.findById(m.manager_id);
                if (user && user.username) {
                    message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> @${user.username} (–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏)\n`;
                } else if (user) {
                    message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏)\n`;
                }
            }
        } else {
            // –ù–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ - –∑–∞–∫–∞–∑—á–∏–∫ —Å–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä
            message += `üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> –í—ã —Å–∞–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ —Å–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ\n`;
        }
        
        // --- –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ ---
        let statusText = '';
        if (project.status === 'searching_manager') statusText = '–í –ø–æ–∏—Å–∫–∞—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–∞';
        else if (project.status === 'searching_executors') statusText = '–í –ø–æ–∏—Å–∫–∞—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π';
        else if (project.status === 'active' || project.status === 'in_progress') statusText = '–í —Ä–∞–±–æ—Ç–µ';
        else if (project.status === 'draft') statusText = '–ß–µ—Ä–Ω–æ–≤–∏–∫';
        else statusText = project.status;
        message += `üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${statusText}\n\n`;

        // --- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ---
        function isFilled(val) {
            if (!val) return false;
            const v = String(val).trim().toLowerCase();
            return v && v !== '...' && v !== '–Ω–µ—Ç';
        }
        if (isFilled(project.deadline)) message += `‚è∞ <b>–°—Ä–æ–∫–∏:</b> ${project.deadline}\n`;
        if (isFilled(project.budget)) message += `üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> ${project.budget}\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        if (project.manager_requirements) {
            message += `üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É:</b>\n${project.manager_requirements}\n`;
        } else {
            message += `üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É:</b> –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã
        if (project.work_conditions) {
            message += `‚öôÔ∏è <b>–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã:</b>\n${project.work_conditions}\n`;
        } else {
            message += `‚öôÔ∏è <b>–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã:</b> –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
        if (project.additional_notes) {
            message += `üí° <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</b>\n${project.additional_notes}\n`;
        } else {
            message += `üí° <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</b> –Ω–µ—Ç\n`;
        }
        // --- –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ ---

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö
        const projectRoles = await ProjectRole.findByProjectId(project.id);
        if (projectRoles.length > 0) {
            message += '\nüë• <b>–í–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:</b>\n';
            for (const role of projectRoles) {
                const availablePositions = role.positions_count - role.filled_positions;
                message += `\nüîπ <b>${role.role_name}</b>\n`;
                message += `   üìä –ü–æ–∑–∏—Ü–∏–π: ${role.filled_positions}/${role.positions_count} (–¥–æ—Å—Ç—É–ø–Ω–æ: ${availablePositions})\n`;
                if (role.required_skills) {
                    message += `   üõ† –ù–∞–≤—ã–∫–∏: ${role.required_skills}\n`;
                }
                if (role.salary_range) {
                    message += `   üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${role.salary_range}\n`;
                }
                if (role.description) {
                    message += `   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${role.description}\n`;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–π —Ä–æ–ª–∏
                const ExecutorApplication = require('../../db/models/ExecutorApplication');
                const acceptedApplications = await ExecutorApplication.findAcceptedByRoleId(role.id);
                if (acceptedApplications.length > 0) {
                    message += `   üë• <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</b>\n`;
                    for (const app of acceptedApplications) {
                        const executor = await User.findById(app.executor_id);
                        if (executor) {
                            message += `      ‚Ä¢ ${executor.first_name} ${executor.last_name || ''} (@${executor.username})\n`;
                        }
                    }
                }
            }
        } else if (project.status === 'searching_executors') {
            message += '\nüë• <b>–í–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:</b> –ù–µ —Å–æ–∑–¥–∞–Ω—ã\n';
        }

        // --- –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞ (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏) ---
        if (project.customer_id === ctx.user.id) {
            let managerButtons = [];
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
            const allManagers = await ProjectManager.findByProject(project.id);
            const acceptedManagers = allManagers.filter(m => m.status === 'accepted');
            const pendingManagers = allManagers.filter(m => m.status === 'pending');
            const totalManagers = acceptedManagers.length + pendingManagers.length;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
            const isCustomerManager = acceptedManagers.some(m => m.manager_id === ctx.user.id);
            

            
            // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
            const allowedStatuses = ['active', 'searching_executors'];
            if (allowedStatuses.includes(project.status)) {
                
                // –ö–Ω–æ–ø–∫–∞ "–£–±—Ä–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã, –∫—Ä–æ–º–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
                const otherManagers = acceptedManagers.filter(m => m.manager_id !== ctx.user.id);
                if (otherManagers.length > 0) {
                    managerButtons.push([
                        { text: '‚ùå –£–±—Ä–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', callback_data: `remove_manager_${project.id}` }
                    ]);
                }
                
                // –ö–Ω–æ–ø–∫–∞ "–°–º–µ–Ω–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
                if (acceptedManagers.length > 0) {
                    managerButtons.push([
                        { text: 'üîÑ –°–º–µ–Ω–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', callback_data: `change_manager_${project.id}` }
                    ]);
                }
                
                // –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 3 –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
                if (totalManagers < 3) {
                    managerButtons.push([
                        { text: `‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (${totalManagers}/3)`, callback_data: `add_manager_${project.id}` }
                    ]);
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
                    managerButtons.push([
                        { text: 'üîç –ù–∞–π—Ç–∏ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É', callback_data: `search_manager_${project.id}` }
                    ]);
                }
                
                // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–∫—Ä–æ–º–µ –∑–∞–∫–∞–∑—á–∏–∫–∞)
                if (otherManagers.length === 0 && totalManagers < 3) {
                    managerButtons.push([
                        { text: 'üë®‚Äçüíº –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', callback_data: `assign_manager_${project.id}` }
                    ]);
                }
                
                // –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –ö–ù–û–ü–û–ö
                console.log('Other managers:', otherManagers);
                console.log('Other managers length:', otherManagers.length);
                console.log('Total managers < 3?', totalManagers < 3);
                console.log('Should show assign button?', otherManagers.length === 0 && totalManagers < 3);
                console.log('Manager buttons:', managerButtons);
                console.log('=== END DEBUG ===');
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
                const statusName = statusNames[project.status] || project.status;
                message += `\n\n‚ÑπÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</b>\n` +
                          `–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ "–ê–∫—Ç–∏–≤–Ω—ã–π" –∏–ª–∏ "–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π".\n` +
                          `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>${statusName}</b>`;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –∑–∞–∫–∞–∑—á–∏–∫—É)
            managerButtons.push([
                { text: 'üìä –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: `change_status_${project.id}` },
                { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç', callback_data: `delete_project_${project.id}` }
            ]);
            
            // –ï—Å–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            if (isCustomerManager) {
                // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ø–æ–∏—Å–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π)
                if (project.status === 'searching_executors') {
                    if (projectRoles.length > 0) {
                        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        managerButtons.push([
                            { text: 'üë• –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞–∫–∞–Ω—Å–∏–π', callback_data: `view_vacancies_${project.id}` }
                        ]);
                        managerButtons.push([
                            { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', callback_data: `add_vacancies_${project.id}` }
                        ]);
                        managerButtons.push([
                            { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏', callback_data: `edit_vacancies_${project.id}` }
                        ]);
                    } else {
                        // –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                        managerButtons.push([
                            { text: 'üë• –°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏', callback_data: `add_vacancies_${project.id}` }
                        ]);
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫–ª–∏–∫–æ–≤
                    managerButtons.push([
                        { text: 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫–ª–∏–∫–æ–≤', callback_data: `view_applications_${project.id}` }
                    ]);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏)
                    const hasAvailablePositions = projectRoles.some(role => 
                        role.positions_count > role.filled_positions
                    );
                    if (hasAvailablePositions) {
                        managerButtons.push([
                            { text: 'üîç –ò—Å–∫–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π', callback_data: `search_executors_${project.id}` }
                        ]);
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤
                    managerButtons.push([
                        { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤', callback_data: `reapply_settings_${project.id}` }
                    ]);
                } else {
                    // –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    const statusName = statusNames[project.status] || project.status;
                    message += `\n\n‚ÑπÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</b>\n` +
                              `–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ "–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π".\n` +
                              `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>${statusName}</b>`;
                }
            }
            
            await ctx.reply(message, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: managerButtons
                }
            });
            return;
        }
        
        // --- –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ---
        if (
            pendingManagers.length > 0 &&
            pendingManagers.some(m => m.manager_id === ctx.user.id)
        ) {
            // –¢–æ–ª—å–∫–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏
            await ctx.reply(message, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ —É—Å–ª–æ–≤–∏—è—Ö', callback_data: `project_preview_${project.id}` }
                        ],
                        [
                            { text: '‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è', callback_data: `accept_invite_${project.id}` },
                            { text: '‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data: `decline_invite_${project.id}` }
                        ]
                    ]
                }
            });
            return;
        }
        
        // --- –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ---
        if (
            acceptedManagers.length > 0 &&
            acceptedManagers.some(m => m.manager_id === ctx.user.id)
        ) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            const canLeave = project.status !== 'completed' && project.status !== 'archived';
            
            let managerButtons = [];
            
            // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ø–æ–∏—Å–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π)
            if (project.status === 'searching_executors') {
                if (projectRoles.length > 0) {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    managerButtons.push([
                        { text: 'üë• –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞–∫–∞–Ω—Å–∏–π', callback_data: `view_vacancies_${project.id}` }
                    ]);
                    managerButtons.push([
                        { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', callback_data: `add_vacancies_${project.id}` }
                    ]);
                    managerButtons.push([
                        { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏', callback_data: `edit_vacancies_${project.id}` }
                    ]);
                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                    managerButtons.push([
                        { text: 'üë• –°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏', callback_data: `add_vacancies_${project.id}` }
                    ]);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫–ª–∏–∫–æ–≤
                managerButtons.push([
                    { text: 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫–ª–∏–∫–æ–≤', callback_data: `view_applications_${project.id}` }
                ]);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏)
                const hasAvailablePositions = projectRoles.some(role => 
                    role.positions_count > role.filled_positions
                );
                if (hasAvailablePositions) {
                    managerButtons.push([
                        { text: 'üîç –ò—Å–∫–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π', callback_data: `search_executors_${project.id}` }
                    ]);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤
                managerButtons.push([
                    { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤', callback_data: `reapply_settings_${project.id}` }
                ]);
            }
            
            if (canLeave) {
                managerButtons.push([
                    { text: 'üö™ –ü–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–µ–∫—Ç', callback_data: `leave_project_${project.id}` }
                ]);
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
            if (managerButtons.length > 0) {
                await ctx.reply(message, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: managerButtons
                    }
                });
                return;
            }
        }
        
        // --- –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ (–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π) ---
        const userMember = projectMembers.find(m => m.id === ctx.user.id);
        
        if (userMember && userMember.member_role !== 'customer') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–∫–∞–∑—á–∏–∫–æ–º
            if (project.customer_id !== ctx.user.id) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–∞–∑–∞
                const canDecline = project.status !== 'completed' && project.status !== 'archived';
                
                if (canDecline) {
                    const roleText = userMember.member_role === 'manager' ? '–º–µ–Ω–µ–¥–∂–µ—Ä–∞' : '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è';
                    
                    await ctx.reply(message, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: `‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è`, callback_data: `decline_invite_${project.id}` }
                                ]
                            ]
                        }
                    });
                    return;
                }
            }
        }
        
        // --- –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ---
        await ctx.reply(message, { parse_mode: 'HTML' });
        return;

    } catch (error) {
        console.error('Error in projectDetails:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–∞.');
    }
};

// --- –ù–æ–≤—ã–π –ø–æ—à–∞–≥–æ–≤—ã–π workflow —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ---

// –°—Ç–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
const startCreateProject = async (ctx) => {
    try {
        ctx.session = ctx.session || {};
        ctx.session.createProject = {
            step: 'name',
            data: {}
        };
        
        await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–æ—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):', cancelKeyboard);
    } catch (error) {
        console.error('[startCreateProject] Error:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
const handleCreateProjectStep = async (ctx) => {
    if (!ctx.user) {
        ctx.user = await User.findByTelegramId(ctx.from.id);
    }
    ctx.session = ctx.session || {};
    const state = ctx.session.createProject;
    if (!state) return;

    // –û—Ç–º–µ–Ω–∞
    if (ctx.message.text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' || ctx.message.text === '/cancel') {
        delete ctx.session.createProject;
        await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', {
            reply_markup: getKeyboardByRole(ctx.user.main_role).reply_markup
        });
        return;
    }

    switch (state.step) {
        case 'name': {
            const projectName = ctx.message.text.trim();
            const validation = validateProjectName(projectName);
            if (!validation.isValid) {
                return ctx.reply(`‚ùå ${validation.error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:`, cancelKeyboard);
            }
            state.data.projectName = projectName;
            state.step = 'description';
            return ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤):', cancelKeyboard);
        }
        case 'description': {
            const description = ctx.message.text.trim();
            const validation = validateProjectDescription(description);
            if (!validation.isValid) {
                return ctx.reply(`‚ùå ${validation.error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:`, cancelKeyboard);
            }
            state.data.description = description;
            state.step = 'add_manager';
            return ctx.reply('–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞? (–î–∞/–ù–µ—Ç)', { ...confirmationKeyboard, ...cancelKeyboard });
        }
        case 'add_manager': {
            const answer = ctx.message.text.toLowerCase();
            if (answer === '–¥–∞' || answer === 'yes') {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –∑–∞–∫–∞–∑—á–∏–∫–∞)
                let managers = await User.findVisibleByRole('manager');
                if (!managers || managers.length === 0) {
                    await ctx.reply(
                        '–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º.\n' +
                        '–í—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.',
                        cancelKeyboard
                    );
                    state.step = 'confirm';
                    return showProjectSummary(ctx);
                } else {
                    // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
                    managers = managers.filter(m => m.id !== ctx.user.id);
                    let list = '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:\n';
                    for (const m of managers) {
                        let desc = [];
                        if (m.specialization) desc.push(m.specialization);
                        if (m.experience) desc.push(m.experience);
                        if (m.skills) {
                            let skills = m.skills;
                            if (typeof skills === 'string') {
                                try {
                                    const arr = JSON.parse(skills);
                                    if (Array.isArray(arr)) skills = arr.join(', ');
                                } catch { /* ignore */ }
                            }
                            desc.push(`–ù–∞–≤—ã–∫–∏: ${skills}`);
                        }
                        if (m.achievements) desc.push(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${m.achievements}`);
                        list += `‚Ä¢ @${m.username} ‚Äî ${m.first_name || ''} ${m.last_name || ''}`;
                        if (desc.length) list += `\n   ${desc.join(' | ')}`;
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
                        let additionalInfo = [];
                        if (m.salary_range) additionalInfo.push(`üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${m.salary_range}`);
                        if (m.contacts) additionalInfo.push(`üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${m.contacts}`);
                        
                        if (additionalInfo.length > 0) {
                            list += `\n   ${additionalInfo.join(' | ')}`;
                        }
                        
                        list += '\n';
                    }
                    if (managers.length === 0) {
                        list += '\n–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –∫—Ä–æ–º–µ –≤–∞—Å.\n';
                    }
                    list += '\n–í–≤–µ–¥–∏—Ç–µ username –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–µ—Ä–µ–∑ @:';
                    state.step = 'manager_input';
                    return ctx.reply(list, cancelKeyboard);
                }
            } else if (answer === '–Ω–µ—Ç' || answer === 'no') {
                state.step = 'confirm';
                return showProjectSummary(ctx);
            } else {
                return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".', cancelKeyboard);
            }
        }
        case 'manager_input': {
            const username = ctx.message.text.trim();
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ username
            if (!username.startsWith('@') || username.length < 5 || !/^@[A-Za-z0-9_]+$/.test(username)) {
                return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ username –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–µ—Ä–µ–∑ @ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _).', cancelKeyboard);
            }
            // –ï—Å–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ –≤—ã–±—Ä–∞–ª —Å–µ–±—è –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            if (username.replace('@', '') === ctx.user.username) {
                state.data.manager = username;
                state.data.selfManager = true;
                state.step = 'confirm';
                return showProjectSummary(ctx);
            }
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            let managers = await User.findVisibleByRole('manager');
            managers = managers.filter(m => m.id !== ctx.user.id);
            const found = managers.find(m => m.username && ('@' + m.username.toLowerCase()) === username.toLowerCase());
            if (!found) {
                let list = '‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å —Ç–∞–∫–∏–º username –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.\n\n';
                list += '–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã:\n';
                for (const m of managers) {
                    list += `‚Ä¢ @${m.username} ‚Äî ${m.first_name || ''} ${m.last_name || ''}\n`;
                }
                return ctx.reply(list, cancelKeyboard);
            }
            state.data.manager = username;
            state.data.selfManager = false;
            // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ä–æ–∫–∏
            state.step = 'deadline';
            return ctx.reply('–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–¥–æ 30.07.2025" –∏–ª–∏ "3 –Ω–µ–¥–µ–ª–∏"):', cancelKeyboard);
        }
        case 'deadline': {
            state.data.deadline = ctx.message.text.trim();
            state.step = 'budget';
            return ctx.reply('–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã –ø–ª–∞—Ç–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: "100 000 —Ä—É–±." –∏–ª–∏ "–ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏"):', cancelKeyboard);
        }
        case 'budget': {
            state.data.budget = ctx.message.text.trim();
            state.step = 'manager_requirements';
            return ctx.reply('–û–ø–∏—à–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ–ø—ã—Ç, –Ω–∞–≤—ã–∫–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è):', cancelKeyboard);
        }
        case 'manager_requirements': {
            state.data.manager_requirements = ctx.message.text.trim();
            state.step = 'work_conditions';
            return ctx.reply('–û–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: —É–¥–∞–ª—ë–Ω–Ω–æ, –≥–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫, –æ–ø–ª–∞—Ç–∞ –ø–æ —ç—Ç–∞–ø–∞–º):', cancelKeyboard);
        }
        case 'work_conditions': {
            state.data.work_conditions = ctx.message.text.trim();
            state.step = 'additional_notes';
            return ctx.reply('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å):', cancelKeyboard);
        }
        case 'additional_notes': {
            state.data.additional_notes = ctx.message.text.trim();
            state.step = 'confirm';
            return showProjectSummary(ctx);
        }
        case 'confirm': {
            const answer = ctx.message.text.toLowerCase();
            if (answer === '–¥–∞' || answer === 'yes') {
                await saveProject(ctx);
                delete ctx.session.createProject;
                return;
            } else if (answer === '–Ω–µ—Ç' || answer === 'no') {
                delete ctx.session.createProject;
                await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', {
                    reply_markup: getKeyboardByRole(ctx.user.main_role).reply_markup
                });
                return;
            } else {
                return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".', cancelKeyboard);
            }
        }
    }
};

// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
async function showProjectSummary(ctx) {
    const state = ctx.session.createProject;
    const d = state.data;
    let summary = `üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞:</b>\n\n`;
    summary += `–ù–∞–∑–≤–∞–Ω–∏–µ: <b>${d.projectName}</b>\n`;
    summary += `–û–ø–∏—Å–∞–Ω–∏–µ: ${d.description}\n`;
    if (d.deadline) summary += `–°—Ä–æ–∫–∏: ${d.deadline}\n`;
    if (d.budget) summary += `–ë—é–¥–∂–µ—Ç: ${d.budget}\n`;
    if (d.manager_requirements) summary += `–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É: ${d.manager_requirements}\n`;
    if (d.work_conditions) summary += `–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã: ${d.work_conditions}\n`;
    if (d.additional_notes) summary += `–î–æ–ø. –ø–æ–∂–µ–ª–∞–Ω–∏—è: ${d.additional_notes}\n`;
    if (d.manager) {
        summary += `–î–æ–ø. –º–µ–Ω–µ–¥–∂–µ—Ä: ${d.manager}\n`;
    }
    summary += '\n–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç? (–î–∞/–ù–µ—Ç)';
    await ctx.reply(summary, { parse_mode: 'HTML' });
}



// TODO: –û–±–µ—Ä–Ω—É—Ç—å saveProject –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ä–æ–ª–µ–π
async function saveProject(ctx) {
    try {
        console.log('[saveProject] –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from?.id);
        console.log('[saveProject] –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞:', JSON.stringify(ctx.session?.createProject?.data, null, 2));
        
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!ctx.user) {
            ctx.user = await User.findByTelegramId(ctx.from.id);
            if (!ctx.user) {
                throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`);
            }
        }
        
        const d = ctx.session.createProject.data;
        const userId = ctx.user.id || ctx.user.telegram_id || ctx.from.id;
        if (!userId) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
        let projectStatus = 'draft';
        if (!d.manager) {
            projectStatus = 'searching_executors'; // –ú–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –∑–∞–∫–∞–∑—á–∏–∫, –∏—â–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        } else {
            projectStatus = 'searching_manager'; // –ñ–¥—ë–º —Å–æ–≥–ª–∞—Å–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
        const project = await Project.create(
            d.projectName,
            d.description,
            userId,
            projectStatus,
            {
                deadline: d.deadline,
                budget: d.budget,
                manager_requirements: d.manager_requirements,
                work_conditions: d.work_conditions,
                additional_notes: d.additional_notes
            }
        );
        
        if (!project) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª–∏
        await Project.addUserToProjectRoles(userId, project.id, 'customer');
        
        // –ï—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –∑–∞–∫–∞–∑—á–∏–∫ —Å—Ä–∞–∑—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        if (!d.manager) {
            await Project.addUserToProjectRoles(userId, project.id, 'manager');
            await ProjectManager.create({ project_id: project.id, manager_id: userId, status: 'accepted' });
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if (d.manager) {
            const managerUser = await User.findByUsername(d.manager.replace('@', ''));
            if (managerUser) {
                if (d.selfManager) {
                    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ –≤—ã–±—Ä–∞–ª —Å–µ–±—è –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ‚Äî —Å—Ä–∞–∑—É –Ω–∞–∑–Ω–∞—á–∞–µ–º accepted –∏ —Å—Ç–∞—Ç—É—Å 'searching_executors'
                    await Project.addUserToProjectRoles(managerUser.id, project.id, 'manager');
                    await ProjectManager.create({ project_id: project.id, manager_id: managerUser.id, status: 'accepted' });
                    await Project.updateStatus(project.id, 'searching_executors');
                    await Project.addMember(project.id, ctx.user.id, 'manager');
                } else {
                    // –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                    await ManagerInvitation.create({
                        project_id: project.id,
                        manager_telegram_id: managerUser.telegram_id,
                        customer_telegram_id: ctx.user.telegram_id || ctx.user.id || ctx.from.id
                    });
                    // –í–ê–ñ–ù–û: —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ project_managers —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending
                    await ProjectManager.create({ project_id: project.id, manager_id: managerUser.id, status: 'pending' });
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
                    await ctx.telegram.sendMessage(
                        managerUser.telegram_id,
                        `–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç "${project.name}" –æ—Ç ${ctx.user.first_name} ${ctx.user.last_name || ''}\n\n–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ —É—Å–ª–æ–≤–∏—è—Ö"`,
                        {
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        { text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ —É—Å–ª–æ–≤–∏—è—Ö', callback_data: `project_preview_${project.id}` }
                                    ],
                                    [
                                        { text: '‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è', callback_data: `accept_invite_${project.id}` },
                                        { text: '‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data: `decline_invite_${project.id}` }
                                    ]
                                ]
                            }
                        }
                    );
                }
            } else {
                console.log('[saveProject] –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', d.manager);
            }
        }
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await AuditLog.logProjectCreated(userId, project.id, project.name);
        await notifyProjectCreated(ctx, project, ctx.user);
        
        // –û—á–∏—Å—Ç–∫–∞ –∏ –æ—Ç–≤–µ—Ç
        delete ctx.session.createProject;
        
        await ctx.reply(
            `‚úÖ <b>–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n` +
            `–ù–∞–∑–≤–∞–Ω–∏–µ: ${project.name}\n` +
            `ID: ${project.id}`,
            { 
                parse_mode: 'HTML',
                reply_markup: getKeyboardByRole(ctx.user.main_role).reply_markup
            }
        );
        
    } catch (error) {
        console.error('SaveProject error:', {
            error: error.message,
            stack: error.stack,
            userId: ctx.from?.id,
            session: ctx.session?.createProject
        });
        
        // –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        let errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        
        if (error.message.includes('ON CONFLICT')) {
            errorMessage = '‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –∫–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
        } else if (error.message.includes('duplicate key')) {
            errorMessage = '‚ùå –ü—Ä–æ–µ–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.';
        } else if (error.message.includes('foreign key')) {
            errorMessage = '‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.';
        } else if (error.message.includes('not found')) {
            errorMessage = '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.';
        }
        
        await ctx.reply(errorMessage);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
const deleteProject = async (ctx) => {
    try {
        if (!ctx.user) {
            return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
        }

        // –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /delete_project_[ID]
        const projectId = parseInt(ctx.message.text.match(/\/delete_project_(\d+)/)?.[1]);
        
        if (!projectId) {
            return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete_project_[ID]');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        const project = await Project.findById(projectId);
        if (!project) {
            return ctx.reply('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã)
        if (project.customer_id !== ctx.user.id) {
            return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –£–¥–∞–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫.');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω (–º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –∏ –∞—Ä—Ö–∏–≤—ã)
        if (project.status === 'active') {
            return ctx.reply('‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç. –°–Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ê—Ä—Ö–∏–≤".');
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        ctx.session = ctx.session || {};
        ctx.session.pendingDelete = {
            projectId: projectId,
            projectName: project.name
        };

        const warningMessage = 
            `üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n` +
            `üìã <b>–ü—Ä–æ–µ–∫—Ç:</b> ${project.name}\n` +
            `üÜî <b>ID:</b> ${projectId}\n` +
            `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${new Date(project.created_at).toLocaleDateString('ru-RU')}\n\n` +
            `‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:\n` +
            `‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã\n` +
            `‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö –±—É–¥–µ—Ç —Å—Ç–µ—Ä—Ç–∞\n` +
            `‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞\n` +
            `‚Ä¢ –ê—É–¥–∏—Ç –ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–∞ –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω\n\n` +
            `üîí <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>\n\n` +
            `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:\n` +
            `<code>–£–î–ê–õ–ò–¢–¨ ${projectId}</code>\n\n` +
            `–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ:\n` +
            `<code>–û–¢–ú–ï–ù–ê</code>`;

        await ctx.reply(warningMessage, {
            parse_mode: 'HTML',
            reply_markup: {
                keyboard: [
                    [`üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ${projectId}`],
                    ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ']
                ],
                resize_keyboard: true,
                one_time_keyboard: true
            }
        });
    } catch (error) {
        console.error('[deleteProject] Error:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.');
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
const handleDeleteConfirmation = async (ctx) => {
    try {
        if (!ctx.session?.pendingDelete) {
            return false; // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        }
        
        const { projectId, projectName } = ctx.session.pendingDelete;
        const userInput = ctx.message.text.trim().toLowerCase();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if (userInput === '–æ—Ç–º–µ–Ω–∞' || userInput === 'cancel' || userInput === '‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ') {
            delete ctx.session.pendingDelete;
            await ctx.reply(
                '‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
                { reply_markup: getKeyboardByRole(ctx.user.main_role).reply_markup }
            );
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        if (userInput === `üóëÔ∏è —É–¥–∞–ª–∏—Ç—å ${projectId}`.toLowerCase()) {
            return await performProjectDeletion(ctx, projectId, projectName);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è
        if (userInput === `—É–¥–∞–ª–∏—Ç—å ${projectId}`.toLowerCase()) {
            return await performProjectDeletion(ctx, projectId, projectName);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const confirmVariants = ['–¥–∞', 'yes', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', '—É–¥–∞–ª–∏—Ç—å', '—É–¥–∞–ª—è–π'];
        if (confirmVariants.includes(userInput)) {
            return await performProjectDeletion(ctx, projectId, projectName);
        }
        
        // –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        await ctx.reply(
            `‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥</b>\n\n` +
            `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è:\n` +
            `‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ${projectId}"\n` +
            `‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: <code>–£–î–ê–õ–ò–¢–¨ ${projectId}</code>\n` +
            `‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ: <code>–¥–∞</code>, <code>yes</code>\n\n` +
            `–î–ª—è –æ—Ç–º–µ–Ω—ã:\n` +
            `‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"\n` +
            `‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ: <code>–æ—Ç–º–µ–Ω–∞</code>`,
            { 
                parse_mode: 'HTML',
                reply_markup: {
                    keyboard: [
                        [`üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ${projectId}`],
                        ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ']
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: true
                }
            }
        );
        return true;
        
    } catch (error) {
        console.error('[handleDeleteConfirmation] Error:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.');
        delete ctx.session.pendingDelete;
        return true;
    }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
const performProjectDeletion = async (ctx, projectId, projectName) => {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ª–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é (–¥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞)
        await AuditLog.logProjectDeleted(ctx.user.id, projectId, projectName);
        
        // –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        const success = await Project.delete(projectId, ctx.user.id);
        
        if (success) {
            delete ctx.session.pendingDelete;
            await ctx.reply(
                `‚úÖ <b>–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n` +
                `üìã –ü—Ä–æ–µ–∫—Ç: ${projectName}\n` +
                `üÜî ID: ${projectId}\n\n` +
                `üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –±—ã–ª–∏ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã.`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: getKeyboardByRole(ctx.user.main_role).reply_markup
                }
            );
        } else {
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        return true;
    } catch (error) {
        console.error('[performProjectDeletion] Error:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.');
        delete ctx.session.pendingDelete;
        return true;
    }
};

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
const availableProjects = async (ctx) => {
    try {
        // Handle both text messages and callback queries
        const messageText = ctx.message?.text || ctx.callbackQuery?.data || 'Unknown';
        console.log('[availableProjects] START - message:', messageText);
        
        if (!ctx.user) {
            return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if (ctx.user.main_role === 'manager') {
            const isProfileComplete = await User.isManagerProfileFullyComplete(ctx.user.telegram_id);
            if (!isProfileComplete) {
                return ctx.reply(
                    '‚ö†Ô∏è <b>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞!</b>\n\n' +
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.',
                    { parse_mode: 'HTML' }
                );
            }
        }

        // If this is a callback query, answer it first
        if (ctx.callbackQuery) {
            await ctx.answerCbQuery();
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        const projects = await Project.findAvailableForExecutors();

        if (projects.length === 0) {
            const noProjectsMessage = 'üîç <b>–î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</b>\n\n' +
                '–ü—Ä–æ–µ–∫—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–í –ø–æ–∏—Å–∫–∞—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π" –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑—á–∏–∫–∏ –∏—Ö —Å–æ–∑–¥–∞–¥—É—Ç.';
            
            if (ctx.callbackQuery) {
                return ctx.editMessageText(noProjectsMessage, { parse_mode: 'HTML' });
            } else {
                return ctx.reply(noProjectsMessage, { parse_mode: 'HTML' });
            }
        }

        let message = 'üîç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:</b>\n\n';
        
        for (const project of projects) {
            message += `üìã <b>${project.name}</b>\n`;
            message += `üÜî ID: ${project.id}\n`;
            
            if (project.description) {
                // –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                const shortDescription = project.description.length > 100 
                    ? project.description.substring(0, 100) + '...' 
                    : project.description;
                message += `üìù ${shortDescription}\n`;
            }
            
            if (project.budget) {
                message += `üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> ${project.budget}\n`;
            }
            
            if (project.deadline) {
                message += `‚è∞ <b>–°—Ä–æ–∫:</b> ${project.deadline}\n`;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
            const customerName = project.customer_username 
                ? `@${project.customer_username}` 
                : project.customer_first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            message += `üë§ <b>–ó–∞–∫–∞–∑—á–∏–∫:</b> ${customerName}\n`;
            
            message += `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${new Date(project.created_at).toLocaleDateString('ru-RU')}\n`;
            message += `\n`;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è
        message += `üí° <b>–ö–∞–∫ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è:</b>\n`;
        message += `‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ID –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π\n`;
        message += `‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/project [ID]</code>\n`;
        message += `‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: <code>/project ${projects[0].id}</code>`;

        const replyMarkup = {
            inline_keyboard: [
                [
                    { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'refresh_available_projects' }
                ]
            ]
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        for (const project of projects) {
            replyMarkup.inline_keyboard.unshift([
                { text: `üìã ${project.name} (ID: ${project.id})`, callback_data: `project_details_${project.id}` }
            ]);
        }

        if (ctx.callbackQuery) {
            await ctx.editMessageText(message, {
                parse_mode: 'HTML',
                reply_markup: replyMarkup
            });
        } else {
            await ctx.reply(message, {
                parse_mode: 'HTML',
                reply_markup: replyMarkup
            });
        }

    } catch (error) {
        console.error('[availableProjects] Error:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.');
    }
};

const projectPreview = async (ctx) => {
    try {
        const projectId = parseInt(ctx.params[0]);
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞
        const validation = validateProjectId(projectId);
        if (!validation.isValid) {
            return ctx.reply(`‚ùå ${validation.error}`);
        }

        const project = await Project.findById(validation.id);
        
        if (!project) {
            return ctx.reply('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
        const customer = await User.findById(project.customer_id);
        if (!customer) {
            return ctx.reply('‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑—á–∏–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ
        let message = `üìã <b>${project.name}</b>\n\n`;
        message += `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${project.description}\n\n`;
        
        if (project.budget) {
            message += `üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> ${project.budget}\n`;
        }
        
        if (project.deadline) {
            message += `‚è∞ <b>–°—Ä–æ–∫:</b> ${project.deadline}\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        if (project.manager_requirements) {
            message += `\nüìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É:</b>\n${project.manager_requirements}\n`;
        } else {
            message += `\nüìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É:</b> –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã
        if (project.work_conditions) {
            message += `\n‚öôÔ∏è <b>–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã:</b>\n${project.work_conditions}\n`;
        } else {
            message += `\n‚öôÔ∏è <b>–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã:</b> –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
        if (project.additional_notes) {
            message += `\nüí° <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</b>\n${project.additional_notes}\n`;
        } else {
            message += `\nüí° <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</b> –Ω–µ—Ç\n`;
        }
        
        message += `\nüë§ <b>–ó–∞–∫–∞–∑—á–∏–∫:</b> @${customer.username || customer.first_name}\n`;
        message += `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${new Date(project.created_at).toLocaleDateString('ru-RU')}\n`;
        message += `üÜî <b>ID –ø—Ä–æ–µ–∫—Ç–∞:</b> ${project.id}`;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        const replyMarkup = {
            inline_keyboard: [
                [
                    { text: '‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è', callback_data: `accept_invite_${project.id}` },
                    { text: '‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data: `decline_invite_${project.id}` }
                ]
            ]
        };

        await ctx.reply(message, {
            parse_mode: 'HTML',
            reply_markup: replyMarkup
        });

    } catch (error) {
        console.error('Error in projectPreview:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ.');
    }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
const showProjectForExecutor = async (ctx) => {
    try {
        const projectId = parseInt(ctx.params[0]);
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞
        const validation = validateProjectId(projectId);
        if (!validation.isValid) {
            return ctx.reply(`‚ùå ${validation.error}`);
        }

        const project = await Project.findByIdWithRoles(validation.id);
        if (!project) {
            return ctx.reply('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        if (project.status !== 'searching_executors') {
            return ctx.reply('‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –Ω–µ –∏—â–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.');
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ
        let message = `üìã <b>${project.name}</b>\n\n`;
        message += `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${project.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;
        
        if (project.budget) {
            message += `üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> ${project.budget}\n`;
        }
        
        if (project.deadline) {
            message += `‚è∞ <b>–°—Ä–æ–∫:</b> ${project.deadline}\n`;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const ExecutorApplication = require('../../db/models/ExecutorApplication');
        const executorApplications = await ExecutorApplication.getExecutorApplicationsForProject(projectId, ctx.user.id);
        const applicationStatuses = {};
        
        for (const app of executorApplications) {
            applicationStatuses[app.role_id] = app;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª–∏ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞—è–≤–æ–∫
        if (project.roles && project.roles.length > 0) {
            message += `\nüë• <b>–¢—Ä–µ–±—É–µ–º—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:</b>\n`;
            for (const role of project.roles) {
                const availablePositions = role.positions_count - role.filled_positions;
                if (availablePositions > 0) {
                    message += `\nüîπ <b>${role.role_name}</b>\n`;
                    message += `   üìä –ü–æ–∑–∏—Ü–∏–π: ${role.filled_positions}/${role.positions_count} (–¥–æ—Å—Ç—É–ø–Ω–æ: ${availablePositions})\n`;
                    if (role.required_skills) {
                        message += `   üõ† –¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏: ${role.required_skills}\n`;
                    }
                    if (role.salary_range) {
                        message += `   üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${role.salary_range}\n`;
                    }
                    if (role.description) {
                        message += `   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${role.description}\n`;
                    }
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                    const application = applicationStatuses[role.id];
                    if (application) {
                        if (application.status === 'pending') {
                            message += `   ‚è≥ <b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b> –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ (${new Date(application.created_at).toLocaleDateString('ru-RU')})\n`;
                        } else if (application.status === 'accepted') {
                            message += `   ‚úÖ <b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b> –ü—Ä–∏–Ω—è—Ç (${new Date(application.created_at).toLocaleDateString('ru-RU')})\n`;
                        } else if (application.status === 'declined') {
                            message += `   ‚ùå <b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b> –û—Ç–∫–ª–æ–Ω–µ–Ω–æ (${new Date(application.rejected_at).toLocaleDateString('ru-RU')})\n`;
                        }
                    }
                }
            }
        } else {
            message += `\nüë• <b>–¢—Ä–µ–±—É–µ–º—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:</b> –ù–µ —É–∫–∞–∑–∞–Ω—ã\n`;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
        const customerName = project.customer_username 
            ? `@${project.customer_username}` 
            : project.customer_first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        message += `\nüë§ <b>–ó–∞–∫–∞–∑—á–∏–∫:</b> ${customerName}\n`;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
        if (project.manager_contacts_visible) {
            const managers = await ProjectManager.findByProject(project.id);
            const acceptedManagers = managers.filter(m => m.status === 'accepted');
            if (acceptedManagers.length > 0) {
                for (const manager of acceptedManagers) {
                    const managerUser = await User.findById(manager.manager_id);
                    if (managerUser && managerUser.contacts) {
                        message += `üë®‚Äçüíº <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞:</b> ${managerUser.contacts}\n`;
                        break; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                    }
                }
            }
        }

        message += `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${new Date(project.created_at).toLocaleDateString('ru-RU')}\n`;
        message += `üÜî <b>ID –ø—Ä–æ–µ–∫—Ç–∞:</b> ${project.id}`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∞
        const hasApplied = executorApplications.length > 0;
        const hasAcceptedApplication = executorApplications.some(app => app.status === 'accepted');
        const hasPendingApplication = executorApplications.some(app => app.status === 'pending');
        const hasDeclinedApplication = executorApplications.some(app => app.status === 'declined');
        
        const replyMarkup = {
            inline_keyboard: [
                [
                    { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: `refresh_project_${project.id}` }
                ]
            ]
        };

        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∞—è –∑–∞—è–≤–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ
        if (hasAcceptedApplication) {
            replyMarkup.inline_keyboard.unshift([
                { text: '‚úÖ –í—ã –ø—Ä–∏–Ω—è—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç', callback_data: 'already_accepted' }
            ]);
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ
        else if (hasPendingApplication) {
            replyMarkup.inline_keyboard.unshift([
                { text: '‚è≥ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏', callback_data: 'application_pending' }
            ]);
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
        else if (hasDeclinedApplication) {
            const reapplyCheck = await Project.canExecutorReapply(projectId, ctx.user.id);
            
            if (reapplyCheck.canReapply) {
                replyMarkup.inline_keyboard.unshift([
                    { text: 'üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è', callback_data: `apply_to_project_${project.id}` }
                ]);
            } else {
                replyMarkup.inline_keyboard.unshift([
                    { text: '‚ùå –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã', callback_data: 'reapply_disabled' }
                ]);
            }
        }
        // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫–ª–∏–∫–∞
        else if (!hasApplied) {
            replyMarkup.inline_keyboard.unshift([
                { text: '‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç', callback_data: `apply_to_project_${project.id}` }
            ]);
        }

        if (ctx.callbackQuery) {
            await ctx.editMessageText(message, {
                parse_mode: 'HTML',
                reply_markup: replyMarkup
            });
        } else {
            await ctx.reply(message, {
                parse_mode: 'HTML',
                reply_markup: replyMarkup
            });
        }

    } catch (error) {
        console.error('Error in showProjectForExecutor:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ.');
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç
const handleExecutorApplication = async (ctx) => {
    try {
        const projectId = parseInt(ctx.match[1]);
        
        if (!ctx.user) {
            await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const project = await Project.findById(projectId);
        if (!project) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏
        const availableRoles = await ProjectRole.findByProjectId(projectId);
        const rolesWithPositions = availableRoles.filter(role => 
            role.positions_count > role.filled_positions
        );
        
        if (rolesWithPositions.length === 0) {
            await ctx.answerCbQuery('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π');
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –≤ —Å–µ—Å—Å–∏–∏
        ctx.session = ctx.session || {};
        ctx.session.pendingApplication = {
            projectId: projectId,
            projectName: project.name,
            availableRoles: rolesWithPositions
        };

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
        let message = `üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞:</b>\n\n`;
        message += `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n\n`;
        
        const roleButtons = [];
        for (const role of rolesWithPositions) {
            const availablePositions = role.positions_count - role.filled_positions;
            message += `üîπ <b>${role.role_name}</b>\n`;
            message += `   üìä –ü–æ–∑–∏—Ü–∏–π: ${role.filled_positions}/${role.positions_count} (–¥–æ—Å—Ç—É–ø–Ω–æ: ${availablePositions})\n`;
            if (role.required_skills) {
                message += `   üõ† –¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏: ${role.required_skills}\n`;
            }
            if (role.salary_range) {
                message += `   üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${role.salary_range}\n`;
            }
            message += '\n';
            
            roleButtons.push([
                { 
                    text: `‚úÖ ${role.role_name}`, 
                    callback_data: `apply_role_${role.id}_${projectId}` 
                }
            ]);
        }

        roleButtons.push([
            { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_application' }
        ]);

        await ctx.editMessageText(message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: roleButtons
            }
        });

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('Error in handleExecutorApplication:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏');
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞
const handleExecutorRoleSelection = async (ctx) => {
    try {
        const [roleId, projectId] = ctx.match.slice(1).map(Number);
        
        if (!ctx.session?.pendingApplication) {
            await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ —ç—Ç—É —Ä–æ–ª—å
        const ExecutorApplication = require('../../db/models/ExecutorApplication');
        const canApply = await ExecutorApplication.canApply(projectId, roleId, ctx.user.id);
        if (!canApply) {
            await ctx.answerCbQuery('‚ùå –í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –Ω–∞ —ç—Ç—É —Ä–æ–ª—å');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–ª–∏–∫
        const application = await ExecutorApplication.create({
            project_id: projectId,
            role_id: roleId,
            executor_id: ctx.user.id
        });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        const managers = await ProjectManager.findByProject(projectId);
        const acceptedManagers = managers.filter(m => m.status === 'accepted');
        
        for (const manager of acceptedManagers) {
            const managerUser = await User.findById(manager.manager_id);
            if (managerUser) {
                const role = ctx.session.pendingApplication.availableRoles.find(r => r.id === roleId);
                const roleName = role ? role.role_name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å';
                
                await ctx.telegram.sendMessage(
                    managerUser.telegram_id,
                    `üéâ <b>–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –ø—Ä–æ–µ–∫—Ç!</b>\n\n` +
                    `–ü—Ä–æ–µ–∫—Ç: <b>${ctx.session.pendingApplication.projectName}</b>\n` +
                    `–†–æ–ª—å: <b>${roleName}</b>\n` +
                    `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @${ctx.user.username || ctx.user.first_name}\n` +
                    `–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${ctx.user.specialization || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n` +
                    `–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`,
                    { 
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: 'üë• –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫–ª–∏–∫–æ–≤', callback_data: `view_applications_${projectId}` }
                                ]
                            ]
                        }
                    }
                );
            }
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await AuditLog.create(
            ctx.user.id,
            'EXECUTOR_APPLIED',
            projectId,
            { 
                executorUsername: ctx.user.username, 
                projectName: ctx.session.pendingApplication.projectName,
                roleId: roleId,
                applicationId: application.id
            }
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π —Å–µ—Å—Å–∏–∏
        const projectName = ctx.session.pendingApplication.projectName;
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        delete ctx.session.pendingApplication;

        await ctx.editMessageText(
            `‚úÖ <b>–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n` +
            `–ü—Ä–æ–µ–∫—Ç: <b>${projectName}</b>\n` +
            `–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–º –æ—Ç–∫–ª–∏–∫–µ.\n\n` +
            `–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã".`,
            { parse_mode: 'HTML' }
        );

        await ctx.answerCbQuery('‚úÖ –û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');

    } catch (error) {
        console.error('Error in handleExecutorRoleSelection:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞');
    }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–∞–∫–∞–Ω—Å–∏—è–º–∏

// –ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –∫ –ø—Ä–æ–µ–∫—Ç—É
const startAddVacancies = async (ctx) => {
    try {
        const projectId = parseInt(ctx.match[1]);
        
        const project = await Project.findById(projectId);
        if (!project) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞)
        const managers = await ProjectManager.findByProject(projectId);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏—è–º–∏');
            return;
        }

        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
        ctx.session = ctx.session || {};
        ctx.session.addingVacancies = {
            projectId: projectId,
            projectName: project.name,
            currentRole: null,
            roles: []
        };

        await ctx.reply(
            `üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –∫ –ø—Ä–æ–µ–∫—Ç—É</b>\n\n` +
            `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "Frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "UI/UX –¥–∏–∑–∞–π–Ω–µ—Ä"):`,
            { 
                parse_mode: 'HTML',
                reply_markup: {
                    keyboard: [['‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ']],
                    resize_keyboard: true,
                    one_time_keyboard: true
                }
            }
        );

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('Error in startAddVacancies:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
};

// –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –ø—Ä–æ–µ–∫—Ç
const viewApplications = async (ctx) => {
    try {
        const projectId = parseInt(ctx.match[1]);
        
        const project = await Project.findById(projectId);
        if (!project) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞)
        const managers = await ProjectManager.findByProject(projectId);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫–ª–∏–∫–æ–≤');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–∏–∫–∏
        const ExecutorApplication = require('../../db/models/ExecutorApplication');
        const applications = await ExecutorApplication.findByProject(projectId);
        
        if (applications.length === 0) {
            await ctx.editMessageText(
                `üìã <b>–û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç "${project.name}"</b>\n\n` +
                `‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç.`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É', callback_data: `project_details_${projectId}` }
                            ]
                        ]
                    }
                }
            );
            return;
        }

        // –†–∞–∑–¥–µ–ª—è–µ–º –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–µ (pending) –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (invited)
        const voluntaryApps = applications.filter(app => app.status === 'pending');
        const invitedApps = applications.filter(app => app.status === 'invited');
        const acceptedApps = applications.filter(app => app.status === 'accepted');
        const declinedApps = applications.filter(app => app.status === 'declined');
        


        let message = `üìã <b>–û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç "${project.name}"</b>\n\n`;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        message += `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
        message += `‚è≥ –î–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏: ${voluntaryApps.length}\n`;
        message += `üì§ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: ${invitedApps.length}\n`;
        message += `‚úÖ –ü—Ä–∏–Ω—è—Ç—ã: ${acceptedApps.length}\n`;
        message += `‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: ${declinedApps.length}\n\n`;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏
        if (voluntaryApps.length > 0) {
            message += `‚è≥ <b>–î–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏:</b>\n`;
            for (const app of voluntaryApps) {
                const executorName = app.username ? `@${app.username}` : `${app.first_name} ${app.last_name || ''}`;
                message += `\nüë§ <b>${executorName}</b>\n`;
                message += `   üéØ –†–æ–ª—å: ${app.role_name}\n`;
                message += `   üõ† –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${app.specialization || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
                if (app.skills) {
                    let skills = app.skills;
                    if (Array.isArray(skills)) {
                        skills = skills.join(', ');
                    }
                    message += `   üí° –ù–∞–≤—ã–∫–∏: ${skills}\n`;
                }
                if (app.contacts) {
                    message += `   üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${app.contacts}\n`;
                }
                message += `   üìÖ –û—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è: ${new Date(app.created_at).toLocaleDateString('ru-RU')}\n`;
            }
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        const buttons = [];
        
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞–º–∏
        if (voluntaryApps.length > 0) {
            buttons.push([
                { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π', callback_data: `accept_applications_${projectId}` }
            ]);
            buttons.push([
                { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π', callback_data: `decline_applications_${projectId}` }
            ]);
        }
        
        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        if (invitedApps.length > 0) {
            buttons.push([
                { text: 'üì§ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', callback_data: `view_invitations_${projectId}` }
            ]);
        }
        
        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π (–∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç)
        if (acceptedApps.length > 0) {
            buttons.push([
                { text: '‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç', callback_data: `add_accepted_to_project_${projectId}` }
            ]);
        }
        
        buttons.push([
            { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É', callback_data: `project_details_${projectId}` }
        ]);

        await ctx.editMessageText(message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: buttons
            }
        });

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('Error in viewApplications:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∫–ª–∏–∫–æ–≤');
    }
};

// –ü—Ä–∏–Ω—è—Ç–∏–µ –æ—Ç–∫–ª–∏–∫–∞
const acceptApplication = async (ctx) => {
    try {
        const projectId = parseInt(ctx.match[1]);
        
        const project = await Project.findById(projectId);
        if (!project) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const managers = await ProjectManager.findByProject(projectId);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–∫–ª–∏–∫–∏
        const ExecutorApplication = require('../../db/models/ExecutorApplication');
        const pendingApps = await ExecutorApplication.findByProject(projectId);
        const waitingApps = pendingApps.filter(app => app.status === 'pending');
        
        if (waitingApps.length === 0) {
            await ctx.answerCbQuery('‚ùå –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        let message = `‚úÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫–ª–∏–∫ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è:</b>\n\n`;
        message += `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n\n`;
        
        const buttons = [];
        for (const app of waitingApps) {
            const executorName = app.username ? `@${app.username}` : `${app.first_name} ${app.last_name || ''}`;
            message += `üë§ <b>${executorName}</b>\n`;
            message += `   üéØ –†–æ–ª—å: ${app.role_name}\n`;
            message += `   üõ† –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${app.specialization || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
            message += `   üìÖ –û—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è: ${new Date(app.created_at).toLocaleDateString('ru-RU')}\n\n`;
            
            buttons.push([
                { 
                    text: `‚úÖ –ü—Ä–∏–Ω—è—Ç—å ${executorName}`, 
                    callback_data: `confirm_accept_${app.id}` 
                }
            ]);
        }

        buttons.push([
            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: `view_applications_${projectId}` }
        ]);

        await ctx.editMessageText(message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: buttons
            }
        });

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('Error in acceptApplication:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
};

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è –æ—Ç–∫–ª–∏–∫–∞
const confirmAcceptApplication = async (ctx) => {
    try {
        const applicationId = parseInt(ctx.match[1]);
        
        const ExecutorApplication = require('../../db/models/ExecutorApplication');
        const application = await ExecutorApplication.findById(applicationId);
        
        if (!application) {
            await ctx.answerCbQuery('‚ùå –û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        if (application.status !== 'pending') {
            await ctx.answerCbQuery('‚ùå –û—Ç–∫–ª–∏–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
            return;
        }

        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç–∫–ª–∏–∫
        const acceptedApp = await ExecutorApplication.accept(applicationId);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const executorUser = await User.findById(application.executor_id);
        if (executorUser) {
            await ctx.telegram.sendMessage(
                executorUser.telegram_id,
                `üéâ <b>–í–∞—à –æ—Ç–∫–ª–∏–∫ –ø—Ä–∏–Ω—è—Ç!</b>\n\n` +
                `–ü—Ä–æ–µ–∫—Ç: <b>${application.project_name}</b>\n` +
                `–†–æ–ª—å: <b>${application.role_name}</b>\n\n` +
                `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –≤ –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–µ–∫—Ç–∞.\n` +
                `–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.`,
                { parse_mode: 'HTML' }
            );
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await AuditLog.create(
            ctx.user.id,
            'APPLICATION_ACCEPTED',
            application.project_id,
            { 
                executorId: application.executor_id,
                executorUsername: executorUser?.username,
                roleName: application.role_name,
                applicationId: applicationId
            }
        );

        await ctx.editMessageText(
            `‚úÖ <b>–û—Ç–∫–ª–∏–∫ –ø—Ä–∏–Ω—è—Ç!</b>\n\n` +
            `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: <b>${executorUser?.username ? '@' + executorUser.username : executorUser?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</b>\n` +
            `–†–æ–ª—å: <b>${application.role_name}</b>\n` +
            `–ü—Ä–æ–µ–∫—Ç: <b>${application.project_name}</b>\n\n` +
            `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏.`,
            { 
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üë• –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫–ª–∏–∫–æ–≤', callback_data: `view_applications_${application.project_id}` }
                        ],
                        [
                            { text: 'üîô –ö –ø—Ä–æ–µ–∫—Ç—É', callback_data: `project_details_${application.project_id}` }
                        ]
                    ]
                }
            }
        );

        await ctx.answerCbQuery('‚úÖ –û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!');

    } catch (error) {
        console.error('Error in confirmAcceptApplication:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –æ—Ç–∫–ª–∏–∫–∞');
    }
};

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞
const declineApplication = async (ctx) => {
    try {
        const projectId = parseInt(ctx.match[1]);
        
        const project = await Project.findById(projectId);
        if (!project) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const managers = await ProjectManager.findByProject(projectId);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–∫–ª–∏–∫–∏
        const ExecutorApplication = require('../../db/models/ExecutorApplication');
        const pendingApps = await ExecutorApplication.findByProject(projectId);
        const waitingApps = pendingApps.filter(app => app.status === 'pending');
        
        if (waitingApps.length === 0) {
            await ctx.answerCbQuery('‚ùå –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        let message = `‚ùå <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫–ª–∏–∫ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</b>\n\n`;
        message += `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n\n`;
        
        const buttons = [];
        for (const app of waitingApps) {
            const executorName = app.username ? `@${app.username}` : `${app.first_name} ${app.last_name || ''}`;
            message += `üë§ <b>${executorName}</b>\n`;
            message += `   üéØ –†–æ–ª—å: ${app.role_name}\n`;
            message += `   üõ† –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${app.specialization || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
            message += `   üìÖ –û—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è: ${new Date(app.created_at).toLocaleDateString('ru-RU')}\n\n`;
            
            buttons.push([
                { 
                    text: `‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å ${executorName}`, 
                    callback_data: `confirm_decline_${app.id}` 
                }
            ]);
        }

        buttons.push([
            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: `view_applications_${projectId}` }
        ]);

        await ctx.editMessageText(message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: buttons
            }
        });

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('Error in declineApplication:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
};

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞
const confirmDeclineApplication = async (ctx) => {
    try {
        const applicationId = parseInt(ctx.match[1]);
        
        const ExecutorApplication = require('../../db/models/ExecutorApplication');
        const application = await ExecutorApplication.findById(applicationId);
        
        if (!application) {
            await ctx.answerCbQuery('‚ùå –û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        if (application.status !== 'pending') {
            await ctx.answerCbQuery('‚ùå –û—Ç–∫–ª–∏–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
            return;
        }

        // –û—Ç–∫–ª–æ–Ω—è–µ–º –æ—Ç–∫–ª–∏–∫
        await ExecutorApplication.decline(applicationId);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const executorUser = await User.findById(application.executor_id);
        if (executorUser) {
            await ctx.telegram.sendMessage(
                executorUser.telegram_id,
                `‚ùå <b>–í–∞—à –æ—Ç–∫–ª–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n` +
                `–ü—Ä–æ–µ–∫—Ç: <b>${application.project_name}</b>\n` +
                `–†–æ–ª—å: <b>${application.role_name}</b>\n\n` +
                `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –æ—Ç–∫–ª–∏–∫ –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n` +
                `–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã!`,
                { parse_mode: 'HTML' }
            );
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await AuditLog.create(
            ctx.user.id,
            'APPLICATION_DECLINED',
            application.project_id,
            { 
                executorId: application.executor_id,
                executorUsername: executorUser?.username,
                roleName: application.role_name,
                applicationId: applicationId
            }
        );

        await ctx.editMessageText(
            `‚ùå <b>–û—Ç–∫–ª–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n` +
            `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: <b>${executorUser?.username ? '@' + executorUser.username : executorUser?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</b>\n` +
            `–†–æ–ª—å: <b>${application.role_name}</b>\n` +
            `–ü—Ä–æ–µ–∫—Ç: <b>${application.project_name}</b>\n\n` +
            `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.`,
            { 
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üë• –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫–ª–∏–∫–æ–≤', callback_data: `view_applications_${application.project_id}` }
                        ],
                        [
                            { text: 'üîô –ö –ø—Ä–æ–µ–∫—Ç—É', callback_data: `project_details_${application.project_id}` }
                        ]
                    ]
                }
            }
        );

        await ctx.answerCbQuery('‚ùå –û—Ç–∫–ª–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω');

    } catch (error) {
        console.error('Error in confirmDeclineApplication:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–∞');
    }
};

// –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞–∫–∞–Ω—Å–∏–π –ø—Ä–æ–µ–∫—Ç–∞
const viewVacancies = async (ctx) => {
    try {
        const projectId = parseInt(ctx.match[1]);
        
        const project = await Project.findById(projectId);
        if (!project) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const managers = await ProjectManager.findByProject(projectId);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
        const roles = await ProjectRole.findByProjectId(projectId);
        
        if (roles.length === 0) {
            await ctx.editMessageText(
                `üìã <b>–í–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"</b>\n\n` +
                `‚ùå –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.\n\n` +
                `–ù–∞–∂–º–∏—Ç–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', callback_data: `add_vacancies_${projectId}` }
                            ],
                            [
                                { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É', callback_data: `project_details_${projectId}` }
                            ]
                        ]
                    }
                }
            );
            return;
        }

        let message = `üìã <b>–í–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"</b>\n\n`;
        
        for (const role of roles) {
            const availablePositions = role.positions_count - role.filled_positions;
            message += `üîπ <b>${role.role_name}</b>\n`;
            message += `   üìä –ü–æ–∑–∏—Ü–∏–π: ${role.filled_positions}/${role.positions_count} (–¥–æ—Å—Ç—É–ø–Ω–æ: ${availablePositions})\n`;
            if (role.required_skills) {
                message += `   üõ† –ù–∞–≤—ã–∫–∏: ${role.required_skills}\n`;
            }
            if (role.salary_range) {
                message += `   üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${role.salary_range}\n`;
            }
            if (role.description) {
                message += `   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${role.description}\n`;
            }
            message += `   üÜî ID: ${role.id}\n\n`;
        }

        const replyMarkup = {
            inline_keyboard: [
                [
                    { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', callback_data: `add_vacancies_${projectId}` }
                ],
                [
                    { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: `edit_vacancies_${projectId}` }
                ],
                [
                    { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É', callback_data: `project_details_${projectId}` }
                ]
            ]
        };

        await ctx.editMessageText(message, {
            parse_mode: 'HTML',
            reply_markup: replyMarkup
        });

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('Error in viewVacancies:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π');
    }
};

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π
const editVacancies = async (ctx) => {
    try {
        const projectId = parseInt(ctx.match[1]);
        
        const project = await Project.findById(projectId);
        if (!project) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const managers = await ProjectManager.findByProject(projectId);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
        const roles = await ProjectRole.findByProjectId(projectId);
        
        if (roles.length === 0) {
            await ctx.editMessageText(
                `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π</b>\n\n` +
                `‚ùå –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.\n\n` +
                `–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≤–∞–∫–∞–Ω—Å–∏–∏.`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', callback_data: `add_vacancies_${projectId}` }
                            ],
                            [
                                { text: 'üîô –ù–∞–∑–∞–¥', callback_data: `view_vacancies_${projectId}` }
                            ]
                        ]
                    }
                }
            );
            return;
        }

        let message = `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"</b>\n\n`;
        message += `–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n`;
        
        const roleButtons = [];
        for (const role of roles) {
            roleButtons.push([
                { 
                    text: `‚úèÔ∏è ${role.role_name} (${role.filled_positions}/${role.positions_count})`, 
                    callback_data: `edit_role_${role.id}` 
                }
            ]);
        }

        roleButtons.push([
            { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', callback_data: `add_vacancies_${projectId}` }
        ]);
        roleButtons.push([
            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: `view_vacancies_${projectId}` }
        ]);

        await ctx.editMessageText(message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: roleButtons
            }
        });

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('Error in editVacancies:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π');
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
const handleVacancyStep = async (ctx) => {
    try {
        if (!ctx.session?.addingVacancies) {
            return false;
        }

        const text = ctx.message.text;

        if (text === '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ') {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–æ–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            const { projectId, roles } = ctx.session.addingVacancies;
            
            for (const roleData of roles) {
                await ProjectRole.create(projectId, roleData);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            let isProfileComplete = false;
            if (ctx.user.main_role === 'executor') {
                isProfileComplete = await User.isExecutorProfileFullyComplete(ctx.user.telegram_id);
            } else if (ctx.user.main_role === 'manager') {
                isProfileComplete = await User.isManagerProfileFullyComplete(ctx.user.telegram_id);
            }

            await ctx.reply(
                `‚úÖ <b>–í–∞–∫–∞–Ω—Å–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>\n\n` +
                `–ö –ø—Ä–æ–µ–∫—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–æ ${roles.length} –≤–∞–∫–∞–Ω—Å–∏–π.\n` +
                `–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç.`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: getKeyboardByRole(ctx.user.main_role, isProfileComplete).reply_markup
                }
            );

            delete ctx.session.addingVacancies;
            return true;
        }

        const { currentRole } = ctx.session.addingVacancies;

        if (!currentRole) {
            // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ä–æ–ª—å
            ctx.session.addingVacancies.currentRole = {
                role_name: text,
                step: 'skills'
            };

            await ctx.reply(
                `üîπ <b>–†–æ–ª—å:</b> ${text}\n\n` +
                `–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏ (–∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):`,
                { parse_mode: 'HTML' }
            );
        } else if (currentRole.step === 'skills') {
            if (text.toLowerCase() !== '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
                currentRole.required_skills = text;
            }
            currentRole.step = 'positions';

            await ctx.reply(
                `üîπ <b>–†–æ–ª—å:</b> ${currentRole.role_name}\n` +
                `üîπ <b>–ù–∞–≤—ã–∫–∏:</b> ${currentRole.required_skills || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n\n` +
                `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π (—á–∏—Å–ª–æ):`,
                { parse_mode: 'HTML' }
            );
        } else if (currentRole.step === 'positions') {
            const positionsCount = parseInt(text);
            if (isNaN(positionsCount) || positionsCount < 1) {
                await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–∑–∏—Ü–∏–π (–º–∏–Ω–∏–º—É–º 1):');
                return true;
            }

            currentRole.positions_count = positionsCount;
            currentRole.step = 'salary';

            await ctx.reply(
                `üîπ <b>–†–æ–ª—å:</b> ${currentRole.role_name}\n` +
                `üîπ <b>–ù–∞–≤—ã–∫–∏:</b> ${currentRole.required_skills || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n` +
                `üîπ <b>–ü–æ–∑–∏—Ü–∏–π:</b> ${currentRole.positions_count}\n\n` +
                `–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):`,
                { parse_mode: 'HTML' }
            );
        } else if (currentRole.step === 'salary') {
            if (text.toLowerCase() !== '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
                currentRole.salary_range = text;
            }
            currentRole.step = 'description';

            await ctx.reply(
                `üîπ <b>–†–æ–ª—å:</b> ${currentRole.role_name}\n` +
                `üîπ <b>–ù–∞–≤—ã–∫–∏:</b> ${currentRole.required_skills || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n` +
                `üîπ <b>–ü–æ–∑–∏—Ü–∏–π:</b> ${currentRole.positions_count}\n` +
                `üîπ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> ${currentRole.salary_range || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n` +
                `–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ (–∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):`,
                { parse_mode: 'HTML' }
            );
        } else if (currentRole.step === 'description') {
            if (text.toLowerCase() !== '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
                currentRole.description = text;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –≤ —Å–ø–∏—Å–æ–∫
            ctx.session.addingVacancies.roles.push({ ...currentRole });
            
            await ctx.reply(
                `‚úÖ <b>–†–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n` +
                `üîπ <b>–†–æ–ª—å:</b> ${currentRole.role_name}\n` +
                `üîπ <b>–ù–∞–≤—ã–∫–∏:</b> ${currentRole.required_skills || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n` +
                `üîπ <b>–ü–æ–∑–∏—Ü–∏–π:</b> ${currentRole.positions_count}\n` +
                `üîπ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> ${currentRole.salary_range || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
                `üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${currentRole.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
                `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Ä–æ–ª–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":`,
                { parse_mode: 'HTML' }
            );

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π
            ctx.session.addingVacancies.currentRole = null;
        }

        return true;

    } catch (error) {
        console.error('Error in handleVacancyStep:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏.');
        return true;
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã –ø—Ä–∏–Ω—è—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç"
const handleAlreadyAccepted = async (ctx) => {
    await ctx.answerCbQuery('‚úÖ –í—ã —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã –≤ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç!');
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
const handleApplicationPending = async (ctx) => {
    await ctx.answerCbQuery('‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.');
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã"
const handleReapplyDisabled = async (ctx) => {
    await ctx.answerCbQuery('‚ùå –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞.');
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤
const handleReapplySettings = async (ctx) => {
    try {
        const projectId = parseInt(ctx.match[1]);
        
        const project = await Project.findById(projectId);
        if (!project) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞)
        const managers = await ProjectManager.findByProject(projectId);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const allowReapply = await Project.getReapplySettings(projectId);
        
        const message = `‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤</b>\n\n` +
            `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n\n` +
            `–¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: ${allowReapply ? '‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã' : '‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω—ã'}\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É:`;
        
        const buttons = [
            [
                { 
                    text: allowReapply ? '‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã' : '‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏', 
                    callback_data: `set_reapply_${projectId}_true` 
                }
            ],
            [
                { 
                    text: !allowReapply ? '‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω—ã' : '‚ùå –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏', 
                    callback_data: `set_reapply_${projectId}_false` 
                }
            ],
            [
                { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É', callback_data: `project_details_${projectId}` }
            ]
        ];

        await ctx.editMessageText(message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: buttons
            }
        });

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('Error in handleReapplySettings:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤
const handleSetReapply = async (ctx) => {
    try {
        const projectId = parseInt(ctx.match[1]);
        const allowReapply = ctx.match[2] === 'true';
        
        const project = await Project.findById(projectId);
        if (!project) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const managers = await ProjectManager.findByProject(projectId);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await Project.updateReapplySettings(projectId, allowReapply);
        
        const settingText = allowReapply ? '—Ä–∞–∑—Ä–µ—à–µ–Ω—ã' : '–∑–∞–ø—Ä–µ—â–µ–Ω—ã';
        
        await ctx.editMessageText(
            `‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n` +
            `–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏ —Ç–µ–ø–µ—Ä—å ${settingText} –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}".`,
            { 
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É', callback_data: `project_details_${projectId}` }
                        ]
                    ]
                }
            }
        );

        await ctx.answerCbQuery(`‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏ ${settingText}`);

    } catch (error) {
        console.error('Error in handleSetReapply:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
const handleRefreshProject = async (ctx) => {
    const projectId = parseInt(ctx.match[1]);
    ctx.params = [projectId.toString()];
    await showProjectForExecutor(ctx);
    await ctx.answerCbQuery('üîÑ –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω');
};

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
const showRoleEditMenu = async (ctx) => {
    try {
        const roleId = parseInt(ctx.match[1]);
        
        const role = await ProjectRole.findById(roleId);
        if (!role) {
            await ctx.answerCbQuery('‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const project = await Project.findById(role.project_id);
        const managers = await ProjectManager.findByProject(role.project_id);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏');
            return;
        }

        let message = `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</b>\n\n`;
        message += `üîπ <b>–†–æ–ª—å:</b> ${role.role_name}\n`;
        message += `üîπ <b>–ù–∞–≤—ã–∫–∏:</b> ${role.required_skills || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n`;
        message += `üîπ <b>–ü–æ–∑–∏—Ü–∏–π:</b> ${role.filled_positions}/${role.positions_count}\n`;
        message += `üîπ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> ${role.salary_range || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
        message += `üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${role.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;
        message += `–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`;

        const buttons = [
            [
                { text: 'üìù –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏', callback_data: `edit_role_name_${roleId}` },
                { text: 'üõ† –ù–∞–≤—ã–∫–∏', callback_data: `edit_role_required_skills_${roleId}` }
            ],
            [
                { text: 'üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π', callback_data: `edit_role_positions_${roleId}` },
                { text: 'üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞', callback_data: `edit_role_salary_${roleId}` }
            ],
            [
                { text: 'üìÑ –û–ø–∏—Å–∞–Ω–∏–µ', callback_data: `edit_role_description_${roleId}` }
            ],
            [
                { text: 'üóë –£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', callback_data: `delete_role_${roleId}` }
            ],
            [
                { text: 'üîô –ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º', callback_data: `edit_vacancies_${role.project_id}` }
            ]
        ];

        await ctx.editMessageText(message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: buttons
            }
        });

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('Error in showRoleEditMenu:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏');
    }
};

// –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏
const startEditRole = async (ctx) => {
    try {
        const data = ctx.callbackQuery.data;
        const parts = data.split('_');
        
        let field, roleId;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞: edit_role_required_skills_123 –∏ edit_role_name_123
        if (parts[2] === 'required' && parts[3] === 'skills') {
            field = 'required_skills';
            roleId = parseInt(parts[4]);
        } else {
            field = parts[2]; // name, positions, salary, description
            roleId = parseInt(parts[3]);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º name –≤ role_name –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            if (field === 'name') {
                field = 'role_name';
            }
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º positions –≤ positions_count –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            if (field === 'positions') {
                field = 'positions_count';
            }
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º salary –≤ salary_range –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            if (field === 'salary') {
                field = 'salary_range';
            }
        }
        
        const role = await ProjectRole.findById(roleId);
        if (!role) {
            await ctx.answerCbQuery('‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const project = await Project.findById(role.project_id);
        const managers = await ProjectManager.findByProject(role.project_id);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏');
            return;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ctx.session = ctx.session || {};
        ctx.session.editingRole = {
            roleId: roleId,
            field: field,
            currentValue: role[field] || ''
        };

        let prompt = '';
        let currentValue = role[field] || '';
        
        switch (field) {
            case 'role_name':
                prompt = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏:';
                break;
            case 'required_skills':
                prompt = '–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏ (–∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):';
                break;
            case 'positions_count':
                prompt = `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π (—Ç–µ–∫—É—â–µ–µ: ${currentValue}):`;
                break;
            case 'salary_range':
                prompt = '–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):';
                break;
            case 'description':
                prompt = '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ (–∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):';
                break;
        }

        await ctx.reply(
            `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${field}</b>\n\n` +
            `–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>${currentValue || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>\n\n` +
            prompt,
            { 
                parse_mode: 'HTML',
                reply_markup: {
                    keyboard: [['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ']],
                    resize_keyboard: true,
                    one_time_keyboard: true
                }
            }
        );

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('Error in startEditRole:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
const handleRoleEditStep = async (ctx) => {
    try {
        if (!ctx.session?.editingRole) {
            return false;
        }

        const text = ctx.message.text;

        if (text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ') {
            delete ctx.session.editingRole;
            await ctx.reply(
                '‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
                { 
                    reply_markup: getKeyboardByRole(ctx.user.main_role, await User.isManagerProfileFullyComplete(ctx.user.telegram_id)).reply_markup
                }
            );
            return true;
        }

        const { roleId, field } = ctx.session.editingRole;
        let value = text;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
        if (field === 'positions_count') {
            const positionsCount = parseInt(text);
            if (isNaN(positionsCount) || positionsCount < 1) {
                await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–∑–∏—Ü–∏–π (–º–∏–Ω–∏–º—É–º 1):');
                return true;
            }
            value = positionsCount;
        } else if (field === 'required_skills' || field === 'salary_range' || field === 'description') {
            if (text.toLowerCase() === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
                value = null;
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await ProjectRole.updateField(roleId, field, value);

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
        const updatedRole = await ProjectRole.findById(roleId);
        
        await ctx.reply(
            `‚úÖ <b>–í–∞–∫–∞–Ω—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n` +
            `üîπ <b>–†–æ–ª—å:</b> ${updatedRole.role_name}\n` +
            `üîπ <b>–ù–∞–≤—ã–∫–∏:</b> ${updatedRole.required_skills || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n` +
            `üîπ <b>–ü–æ–∑–∏—Ü–∏–π:</b> ${updatedRole.filled_positions}/${updatedRole.positions_count}\n` +
            `üîπ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> ${updatedRole.salary_range || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
            `üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${updatedRole.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
            { 
                parse_mode: 'HTML',
                reply_markup: getKeyboardByRole(ctx.user.main_role, await User.isManagerProfileFullyComplete(ctx.user.telegram_id)).reply_markup
            }
        );

        delete ctx.session.editingRole;
        return true;

    } catch (error) {
        console.error('Error in handleRoleEditStep:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.');
        return true;
    }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
const deleteRole = async (ctx) => {
    try {
        const roleId = parseInt(ctx.match[1]);
        
        const role = await ProjectRole.findById(roleId);
        if (!role) {
            await ctx.answerCbQuery('‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const project = await Project.findById(role.project_id);
        const managers = await ProjectManager.findByProject(role.project_id);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é
        const ExecutorApplication = require('../../db/models/ExecutorApplication');
        const applications = await ExecutorApplication.findByRole(roleId);
        const activeApplications = applications.filter(app => app.status === 'pending' || app.status === 'invited');
        const acceptedApplications = applications.filter(app => app.status === 'accepted');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –Ω–∞ —ç—Ç—É —Ä–æ–ª—å
        const projectMembers = await Project.getMembers(role.project_id);
        const roleExecutors = projectMembers.filter(member => 
            member.member_role === 'executor' && member.role_id === roleId
        );

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏ –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if (activeApplications.length > 0 || roleExecutors.length > 0) {
            let message = `‚ö†Ô∏è <b>–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é</b>\n\n`;
            message += `–†–æ–ª—å: <b>${role.role_name}</b>\n`;
            message += `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n\n`;
            
            if (activeApplications.length > 0) {
                message += `üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏:</b> ${activeApplications.length}\n`;
                message += `‚Ä¢ –î–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏: ${activeApplications.filter(app => app.status === 'pending').length}\n`;
                message += `‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: ${activeApplications.filter(app => app.status === 'invited').length}\n\n`;
            }
            
            if (roleExecutors.length > 0) {
                message += `üë• <b>–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</b> ${roleExecutors.length}\n`;
                for (const executor of roleExecutors) {
                    const executorName = executor.username ? `@${executor.username}` : `${executor.first_name} ${executor.last_name || ''}`;
                    message += `‚Ä¢ ${executorName}\n`;
                }
                message += `\n`;
            }
            
            message += `–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n`;
            if (activeApplications.length > 0) {
                message += `1. –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏\n`;
            }
            if (roleExecutors.length > 0) {
                message += `2. –ò—Å–∫–ª—é—á–∏—Ç—å –≤—Å–µ—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π\n`;
            }

            const buttons = [];
            
            if (activeApplications.length > 0) {
                buttons.push([
                    { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Å–µ –æ—Ç–∫–ª–∏–∫–∏', callback_data: `decline_all_applications_${roleId}` }
                ]);
            }
            
            if (roleExecutors.length > 0) {
                buttons.push([
                    { text: 'üë• –ò—Å–∫–ª—é—á–∏—Ç—å –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π', callback_data: `remove_all_executors_${roleId}` }
                ]);
            }
            
            buttons.push([
                { text: 'üîô –ù–∞–∑–∞–¥', callback_data: `edit_vacancies_${role.project_id}` }
            ]);

            await ctx.editMessageText(message, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons
                }
            });

            await ctx.answerCbQuery();
            return;
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, —É–¥–∞–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
        await ProjectRole.delete(roleId);

        await ctx.editMessageText(
            `üóë <b>–í–∞–∫–∞–Ω—Å–∏—è —É–¥–∞–ª–µ–Ω–∞!</b>\n\n` +
            `–†–æ–ª—å "${role.role_name}" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞.`,
            {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üîô –ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º', callback_data: `edit_vacancies_${role.project_id}` }
                        ]
                    ]
                }
            }
        );

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('Error in deleteRole:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏');
    }
};

// –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
const searchExecutors = async (ctx) => {
    try {
        const projectId = parseInt(ctx.match[1]);
        
        const project = await Project.findById(projectId);
        if (!project) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞)
        const managers = await ProjectManager.findByProject(projectId);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
        const projectRoles = await ProjectRole.findByProjectId(projectId);
        const availableRoles = projectRoles.filter(role => 
            role.positions_count > role.filled_positions
        );
        
        if (availableRoles.length === 0) {
            await ctx.answerCbQuery('‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º
        const executors = await User.findVisibleByRole('executor');
        if (!executors || executors.length === 0) {
            await ctx.answerCbQuery('‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        let message = `üîç <b>–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"</b>\n\n`;
        message += `–ù–∞–π–¥–µ–Ω–æ ${executors.length} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º.\n\n`;
        message += `–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏:`;

        const executorButtons = [];
        for (const executor of executors) {
            executorButtons.push([
                { 
                    text: `üë§ @${executor.username}`, 
                    callback_data: `view_executor_profile_${projectId}_${executor.id}` 
                }
            ]);
        }

        executorButtons.push([
            { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É', callback_data: `project_details_${projectId}` }
        ]);

        await ctx.editMessageText(message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: executorButtons
            }
        });

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('Error in searchExecutors:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π');
    }
};

// –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
const viewExecutorProfile = async (ctx) => {
    try {
        const projectId = parseInt(ctx.match[1]);
        const executorId = parseInt(ctx.match[2]);
        
        const project = await Project.findById(projectId);
        const executor = await User.findById(executorId);
        
        if (!project || !executor) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const managers = await ProjectManager.findByProject(projectId);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const executorProfile = await User.getExecutorProfile(executor.telegram_id);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        const projectRoles = await ProjectRole.findByProjectId(projectId);
        const availableRoles = projectRoles.filter(role => 
            role.positions_count > role.filled_positions
        );

        let message = `üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</b>\n\n`;
        message += `–ò–º—è: <b>${executor.first_name} ${executor.last_name || ''}</b>\n`;
        message += `Username: @${executor.username || '–Ω–µ—Ç'}\n`;
        
        if (executorProfile) {
            if (executorProfile.specialization) {
                message += `–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${executorProfile.specialization}\n`;
            }
            if (executorProfile.skills) {
                let skills = executorProfile.skills;
                if (Array.isArray(skills)) {
                    skills = skills.join(', ');
                }
                message += `–ù–∞–≤—ã–∫–∏: ${skills}\n`;
            }
            if (executorProfile.contacts) {
                message += `–ö–æ–Ω—Ç–∞–∫—Ç—ã: ${executorProfile.contacts}\n`;
            }
            if (executorProfile.achievements) {
                message += `–û —Å–µ–±–µ: ${executorProfile.achievements}\n`;
            }
        }
        
        message += `\nüìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ:</b>\n`;
        for (const role of availableRoles) {
            const availablePositions = role.positions_count - role.filled_positions;
            message += `\nüîπ <b>${role.role_name}</b>\n`;
            message += `   üìä –°–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: ${availablePositions}/${role.positions_count}\n`;
            if (role.required_skills) {
                message += `   üõ† –¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏: ${role.required_skills}\n`;
            }
            if (role.salary_range) {
                message += `   üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${role.salary_range}\n`;
            }
            if (role.description) {
                message += `   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${role.description}\n`;
            }
        }

        const roleButtons = availableRoles.map(role => [
            { 
                text: `‚úÖ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å "${role.role_name}"`, 
                callback_data: `invite_executor_${projectId}_${executorId}_${role.id}` 
            }
        ]);

        roleButtons.push([
            { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É', callback_data: `search_executors_${projectId}` }
        ]);

        await ctx.editMessageText(message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: roleButtons
            }
        });

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('Error in viewExecutorProfile:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è');
    }
};

// –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
const inviteExecutor = async (ctx) => {
    try {
        const projectId = parseInt(ctx.match[1]);
        const executorId = parseInt(ctx.match[2]);
        const roleId = parseInt(ctx.match[3]);
        
        const project = await Project.findById(projectId);
        const executor = await User.findById(executorId);
        const role = await ProjectRole.findById(roleId);
        
        if (!project || !executor || !role) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const managers = await ProjectManager.findByProject(projectId);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –≤—Å–µ –µ—â–µ —Å–≤–æ–±–æ–¥–Ω–∞
        if (role.filled_positions >= role.positions_count) {
            await ctx.answerCbQuery('‚ùå –≠—Ç–∞ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–Ω—è—Ç–∞');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω –Ω–∞ —ç—Ç—É —Ä–æ–ª—å
        const ExecutorApplication = require('../../db/models/ExecutorApplication');
        const existingApplication = await ExecutorApplication.findByProjectAndExecutor(projectId, executorId);
        if (existingApplication && existingApplication.role_id === roleId && existingApplication.status === 'invited') {
            await ctx.answerCbQuery('‚ùå –≠—Ç–æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω –Ω–∞ —ç—Ç—É —Ä–æ–ª—å');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        const application = await ExecutorApplication.createInvitation({
            project_id: projectId,
            role_id: roleId,
            executor_id: executorId
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        const managerName = ctx.user.first_name + ' ' + (ctx.user.last_name || '');
        await ctx.telegram.sendMessage(
            executor.telegram_id,
            `üéâ <b>–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é!</b>\n\n` +
            `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n` +
            `–†–æ–ª—å: <b>${role.role_name}</b>\n` +
            `–ú–µ–Ω–µ–¥–∂–µ—Ä: ${managerName}\n\n` +
            `–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`,
            {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ', callback_data: `accept_invitation_${application.id}` },
                            { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `decline_invitation_${application.id}` }
                        ]
                    ]
                }
            }
        );

        await ctx.editMessageText(
            `‚úÖ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n` +
            `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å @${executor.username} –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Ä–æ–ª—å "${role.role_name}" –≤ –ø—Ä–æ–µ–∫—Ç–µ "${project.name}".\n\n` +
            `–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.`,
            {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É', callback_data: `search_executors_${projectId}` }
                        ]
                    ]
                }
            }
        );

        await ctx.answerCbQuery('‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');

    } catch (error) {
        console.error('Error in inviteExecutor:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
const acceptInvitation = async (ctx) => {
    try {
        const applicationId = parseInt(ctx.match[1]);
        
        const ExecutorApplication = require('../../db/models/ExecutorApplication');
        const application = await ExecutorApplication.findById(applicationId);
        
        if (!application) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if (application.status !== 'invited') {
            await ctx.answerCbQuery('‚ùå –≠—Ç–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è–ª –¥—Ä—É–≥–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —ç—Ç—É —Ä–æ–ª—å
        const role = await ProjectRole.findById(application.role_id);
        if (role.filled_positions >= role.positions_count) {
            await ctx.answerCbQuery('‚ùå –≠—Ç–∞ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–Ω—è—Ç–∞');
            return;
        }

        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        await ExecutorApplication.updateStatus(applicationId, 'accepted');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç
        await Project.addUserToProjectRoles(application.executor_id, application.project_id, 'executor');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ —ç—Ç—É —Ä–æ–ª—å
        const otherInvitations = await ExecutorApplication.findByRole(application.role_id);
        const pendingInvitations = otherInvitations.filter(inv => 
            inv.status === 'invited' && inv.id !== applicationId
        );
        
        for (const invitation of pendingInvitations) {
            await ExecutorApplication.updateStatus(invitation.id, 'declined');
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            const otherExecutor = await User.findById(invitation.executor_id);
            if (otherExecutor) {
                await ctx.telegram.sendMessage(
                    otherExecutor.telegram_id,
                    `‚ùå <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n` +
                    `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n` +
                    `–†–æ–ª—å: <b>${role.role_name}</b>\n\n` +
                    `–ù–∞ —ç—Ç—É –ø–æ–∑–∏—Ü–∏—é –±—ã–ª –≤—ã–±—Ä–∞–Ω –¥—Ä—É–≥–æ–π –∫–∞–Ω–¥–∏–¥–∞—Ç.`,
                    { parse_mode: 'HTML' }
                );
            }
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        const project = await Project.findById(application.project_id);
        const managers = await ProjectManager.findByProject(application.project_id);
        const acceptedManagers = managers.filter(m => m.status === 'accepted');
        
        for (const manager of acceptedManagers) {
            const managerUser = await User.findById(manager.manager_id);
            if (managerUser) {
                const executor = await User.findById(application.executor_id);
                await ctx.telegram.sendMessage(
                    managerUser.telegram_id,
                    `‚úÖ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!</b>\n\n` +
                    `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n` +
                    `–†–æ–ª—å: <b>${role.role_name}</b>\n` +
                    `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @${executor.username}\n\n` +
                    `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç.\n` +
                    `–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ —ç—Ç—É —Ä–æ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã.`,
                    { parse_mode: 'HTML' }
                );
            }
        }

        await ctx.editMessageText(
            `‚úÖ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n` +
            `–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ–µ–∫—Ç—É "${project.name}" –Ω–∞ —Ä–æ–ª—å "${role.role_name}".\n\n` +
            `–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–º —Å–æ–≥–ª–∞—Å–∏–∏.`,
            { parse_mode: 'HTML' }
        );

        await ctx.answerCbQuery('‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!');

    } catch (error) {
        console.error('Error in acceptInvitation:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
const declineInvitation = async (ctx) => {
    try {
        const applicationId = parseInt(ctx.match[1]);
        
        const ExecutorApplication = require('../../db/models/ExecutorApplication');
        const application = await ExecutorApplication.findById(applicationId);
        
        if (!application) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if (application.status !== 'invited') {
            await ctx.answerCbQuery('‚ùå –≠—Ç–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
            return;
        }

        // –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        await ExecutorApplication.updateStatus(applicationId, 'declined');
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        const project = await Project.findById(application.project_id);
        const role = await ProjectRole.findById(application.role_id);
        const managers = await ProjectManager.findByProject(application.project_id);
        const acceptedManagers = managers.filter(m => m.status === 'accepted');
        
        for (const manager of acceptedManagers) {
            const managerUser = await User.findById(manager.manager_id);
            if (managerUser) {
                const executor = await User.findById(application.executor_id);
                await ctx.telegram.sendMessage(
                    managerUser.telegram_id,
                    `‚ùå <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ</b>\n\n` +
                    `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n` +
                    `–†–æ–ª—å: <b>${role.role_name}</b>\n` +
                    `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @${executor.username}\n\n` +
                    `–ü–æ–∑–∏—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω–æ–π –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.`,
                    { parse_mode: 'HTML' }
                );
            }
        }

        await ctx.editMessageText(
            `‚ùå <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n` +
            `–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Ä–æ–ª—å "${role.role_name}" –≤ –ø—Ä–æ–µ–∫—Ç–µ "${project.name}".\n\n` +
            `–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ.`,
            { parse_mode: 'HTML' }
        );

        await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');

    } catch (error) {
        console.error('Error in declineInvitation:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
    }
};

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
const confirmAcceptInvitation = async (ctx) => {
    try {
        const applicationId = parseInt(ctx.match[1]);
        
        const ExecutorApplication = require('../../db/models/ExecutorApplication');
        const application = await ExecutorApplication.findById(applicationId);
        
        if (!application) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        if (application.status !== 'invited') {
            await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
            return;
        }

        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ accepted)
        await ExecutorApplication.updateStatus(applicationId, 'accepted');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç
        const project = await Project.findById(application.project_id);
        const hasMember = await Project.hasMember(application.project_id, application.executor_id, 'executor');
        
        if (!hasMember) {
            await Project.addMember(application.project_id, application.executor_id, 'executor', application.role_id);
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const executorUser = await User.findById(application.executor_id);
        if (executorUser) {
            await ctx.telegram.sendMessage(
                executorUser.telegram_id,
                `üéâ <b>–í–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n` +
                `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n` +
                `–†–æ–ª—å: <b>${application.role_name}</b>\n\n` +
                `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –≤ –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–µ–∫—Ç–∞.\n` +
                `–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.`,
                { parse_mode: 'HTML' }
            );
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await AuditLog.create(
            ctx.user.id,
            'INVITATION_ACCEPTED',
            application.project_id,
            { 
                executorId: application.executor_id,
                executorUsername: executorUser?.username,
                roleName: application.role_name,
                applicationId: applicationId
            }
        );

        await ctx.editMessageText(
            `‚úÖ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n` +
            `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: <b>@${executorUser?.username || executorUser?.first_name}</b>\n` +
            `–†–æ–ª—å: <b>${application.role_name}</b>\n` +
            `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n\n` +
            `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏.`,
            { 
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üì§ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', callback_data: `view_invitations_${application.project_id}` }
                        ],
                        [
                            { text: 'üîô –ö –ø—Ä–æ–µ–∫—Ç—É', callback_data: `project_details_${application.project_id}` }
                        ]
                    ]
                }
            }
        );

        await ctx.answerCbQuery('‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ!');

    } catch (error) {
        console.error('Error in confirmAcceptInvitation:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
    }
};

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
const confirmDeclineInvitation = async (ctx) => {
    try {
        const applicationId = parseInt(ctx.match[1]);
        
        const ExecutorApplication = require('../../db/models/ExecutorApplication');
        const application = await ExecutorApplication.findById(applicationId);
        
        if (!application) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        if (application.status !== 'invited') {
            await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
            return;
        }

        // –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        await ExecutorApplication.updateStatus(applicationId, 'declined');
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const executorUser = await User.findById(application.executor_id);
        const project = await Project.findById(application.project_id);
        
        if (executorUser) {
            await ctx.telegram.sendMessage(
                executorUser.telegram_id,
                `‚ùå <b>–í–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n` +
                `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n` +
                `–†–æ–ª—å: <b>${application.role_name}</b>\n\n` +
                `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞.`,
                { parse_mode: 'HTML' }
            );
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await AuditLog.create(
            ctx.user.id,
            'INVITATION_DECLINED',
            application.project_id,
            { 
                executorId: application.executor_id,
                executorUsername: executorUser?.username,
                roleName: application.role_name,
                applicationId: applicationId
            }
        );

        await ctx.editMessageText(
            `‚ùå <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n` +
            `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: <b>@${executorUser?.username || executorUser?.first_name}</b>\n` +
            `–†–æ–ª—å: <b>${application.role_name}</b>\n` +
            `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n\n` +
            `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.`,
            { 
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üì§ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', callback_data: `view_invitations_${application.project_id}` }
                        ],
                        [
                            { text: 'üîô –ö –ø—Ä–æ–µ–∫—Ç—É', callback_data: `project_details_${application.project_id}` }
                        ]
                    ]
                }
            }
        );

        await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');

    } catch (error) {
        console.error('Error in confirmDeclineInvitation:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
    }
};

// –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
const acceptInvitations = async (ctx) => {
    try {
        const projectId = parseInt(ctx.match[1]);
        
        const project = await Project.findById(projectId);
        if (!project) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const managers = await ProjectManager.findByProject(projectId);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        const ExecutorApplication = require('../../db/models/ExecutorApplication');
        const applications = await ExecutorApplication.findByProject(projectId);
        const invitedApps = applications.filter(app => app.status === 'invited');
        
        if (invitedApps.length === 0) {
            await ctx.answerCbQuery('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        let message = `‚úÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è:</b>\n\n`;
        message += `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n\n`;
        
        const buttons = [];
        for (const app of invitedApps) {
            const executorName = app.username ? `@${app.username}` : `${app.first_name} ${app.last_name || ''}`;
            message += `üë§ <b>${executorName}</b>\n`;
            message += `   üéØ –†–æ–ª—å: ${app.role_name}\n`;
            message += `   üõ† –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${app.specialization || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
            message += `   üìÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date(app.created_at).toLocaleDateString('ru-RU')}\n\n`;
            
            buttons.push([
                { 
                    text: `‚úÖ –ü—Ä–∏–Ω—è—Ç—å ${executorName}`, 
                    callback_data: `confirm_accept_invitation_${app.id}` 
                }
            ]);
        }

        buttons.push([
            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: `view_invitations_${projectId}` }
        ]);

        await ctx.editMessageText(message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: buttons
            }
        });

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('Error in acceptInvitations:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
};

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
const declineInvitations = async (ctx) => {
    try {
        const projectId = parseInt(ctx.match[1]);
        
        const project = await Project.findById(projectId);
        if (!project) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const managers = await ProjectManager.findByProject(projectId);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        const ExecutorApplication = require('../../db/models/ExecutorApplication');
        const applications = await ExecutorApplication.findByProject(projectId);
        const invitedApps = applications.filter(app => app.status === 'invited');
        
        if (invitedApps.length === 0) {
            await ctx.answerCbQuery('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        let message = `‚ùå <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</b>\n\n`;
        message += `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n\n`;
        
        const buttons = [];
        for (const app of invitedApps) {
            const executorName = app.username ? `@${app.username}` : `${app.first_name} ${app.last_name || ''}`;
            message += `üë§ <b>${executorName}</b>\n`;
            message += `   üéØ –†–æ–ª—å: ${app.role_name}\n`;
            message += `   üõ† –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${app.specialization || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
            message += `   üìÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date(app.created_at).toLocaleDateString('ru-RU')}\n\n`;
            
            buttons.push([
                { 
                    text: `‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å ${executorName}`, 
                    callback_data: `confirm_decline_invitation_${app.id}` 
                }
            ]);
        }

        buttons.push([
            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: `view_invitations_${projectId}` }
        ]);

        await ctx.editMessageText(message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: buttons
            }
        });

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('Error in declineInvitations:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
};

// –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
const viewInvitations = async (ctx) => {
    try {
        const projectId = parseInt(ctx.match[1]);
        
        const project = await Project.findById(projectId);
        if (!project) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞)
        const managers = await ProjectManager.findByProject(projectId);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        const ExecutorApplication = require('../../db/models/ExecutorApplication');
        const applications = await ExecutorApplication.findByProject(projectId);
        const invitedApps = applications.filter(app => app.status === 'invited');
        
        if (invitedApps.length === 0) {
            await ctx.editMessageText(
                `üì§ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è</b>\n\n` +
                `‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.`,
                { 
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'üîô –ù–∞–∑–∞–¥ –∫ –æ—Ç–∫–ª–∏–∫–∞–º', callback_data: `view_applications_${projectId}` }
                            ]
                        ]
                    }
                }
            );
            return;
        }

        let message = `üì§ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è</b>\n\n`;
        message += `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n\n`;
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ —Ä–æ–ª—è–º
        const invitationsByRole = {};
        for (const app of invitedApps) {
            if (!invitationsByRole[app.role_id]) {
                invitationsByRole[app.role_id] = [];
            }
            invitationsByRole[app.role_id].push(app);
        }

        for (const [roleId, apps] of Object.entries(invitationsByRole)) {
            const firstApp = apps[0];
            message += `üéØ <b>–†–æ–ª—å: ${firstApp.role_name}</b>\n`;
            message += `üìä –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: ${apps.length}\n\n`;
            
            for (const app of apps) {
                const executorName = app.username ? `@${app.username}` : `${app.first_name} ${app.last_name || ''}`;
                message += `üë§ <b>${executorName}</b>\n`;
                message += `   üõ† –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${app.specialization || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
                if (app.skills) {
                    let skills = app.skills;
                    if (Array.isArray(skills)) {
                        skills = skills.join(', ');
                    }
                    message += `   üí° –ù–∞–≤—ã–∫–∏: ${skills}\n`;
                }
                if (app.contacts) {
                    message += `   üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${app.contacts}\n`;
                }
                message += `   üìÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date(app.created_at).toLocaleDateString('ru-RU')}\n`;
                message += `   ‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞\n\n`;
            }
        }

        const buttons = [
            [
                { text: 'üîô –ù–∞–∑–∞–¥ –∫ –æ—Ç–∫–ª–∏–∫–∞–º', callback_data: `view_applications_${projectId}` }
            ]
        ];

        await ctx.editMessageText(message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: buttons
            }
        });

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('Error in viewInvitations:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π');
    }
};

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç
const addAcceptedToProject = async (ctx) => {
    try {
        const projectId = parseInt(ctx.match[1]);
        
        const project = await Project.findById(projectId);
        if (!project) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const managers = await ProjectManager.findByProject(projectId);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –ø—Ä–æ–µ–∫—Ç');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–Ω—è—Ç—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        const ExecutorApplication = require('../../db/models/ExecutorApplication');
        const applications = await ExecutorApplication.findByProject(projectId);
        const acceptedApps = applications.filter(app => app.status === 'accepted');
        
        if (acceptedApps.length === 0) {
            await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç
        let message = `‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –ø—Ä–æ–µ–∫—Ç:</b>\n\n`;
        message += `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n\n`;
        message += `–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç:\n\n`;
        
        const buttons = [];
        for (const app of acceptedApps) {
            const executorName = app.username ? `@${app.username}` : `${app.first_name} ${app.last_name || ''}`;
            message += `üë§ <b>${executorName}</b>\n`;
            message += `   üéØ –†–æ–ª—å: ${app.role_name}\n`;
            message += `   üõ† –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${app.specialization || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
            message += `   üìÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ: ${new Date(app.updated_at).toLocaleDateString('ru-RU')}\n\n`;
            
            buttons.push([
                { 
                    text: `‚úÖ –î–æ–±–∞–≤–∏—Ç—å ${executorName}`, 
                    callback_data: `confirm_add_to_project_${app.id}` 
                }
            ]);
        }

        buttons.push([
            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: `view_applications_${projectId}` }
        ]);

        await ctx.editMessageText(message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: buttons
            }
        });

        await ctx.answerCbQuery();

    } catch (error) {
        console.error('Error in addAcceptedToProject:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
};

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç
const confirmAddToProject = async (ctx) => {
    try {
        const applicationId = parseInt(ctx.match[1]);
        
        const ExecutorApplication = require('../../db/models/ExecutorApplication');
        const application = await ExecutorApplication.findById(applicationId);
        
        if (!application) {
            await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        if (application.status !== 'accepted') {
            await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞ —ç—Ç—É —Ä–æ–ª—å –≤ –ø—Ä–æ–µ–∫—Ç
        const hasMember = await Project.hasMember(application.project_id, application.executor_id, 'executor', application.role_id);
        
        if (hasMember) {
            await ctx.answerCbQuery('‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —ç—Ç—É —Ä–æ–ª—å –≤ –ø—Ä–æ–µ–∫—Ç');
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç
        const project = await Project.findById(application.project_id);
        await Project.addMember(application.project_id, application.executor_id, 'executor', application.role_id);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const executorUser = await User.findById(application.executor_id);
        if (executorUser) {
            await ctx.telegram.sendMessage(
                executorUser.telegram_id,
                `üéâ <b>–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç!</b>\n\n` +
                `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n` +
                `–†–æ–ª—å: <b>${application.role_name}</b>\n\n` +
                `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ —Å—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞.\n` +
                `–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.`,
                { parse_mode: 'HTML' }
            );
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await AuditLog.create(
            ctx.user.id,
            'EXECUTOR_ADDED_TO_PROJECT',
            application.project_id,
            { 
                executorId: application.executor_id,
                executorUsername: executorUser?.username,
                roleName: application.role_name,
                applicationId: applicationId
            }
        );

        await ctx.editMessageText(
            `‚úÖ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç!</b>\n\n` +
            `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: <b>@${executorUser?.username || executorUser?.first_name}</b>\n` +
            `–†–æ–ª—å: <b>${application.role_name}</b>\n` +
            `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n\n` +
            `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç.`,
            { 
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç', callback_data: `add_accepted_to_project_${application.project_id}` }
                        ],
                        [
                            { text: 'üîô –ö –ø—Ä–æ–µ–∫—Ç—É', callback_data: `project_details_${application.project_id}` }
                        ]
                    ]
                }
            }
        );

        await ctx.answerCbQuery('‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç!');

    } catch (error) {
        console.error('Error in confirmAddToProject:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç');
    }
};

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ —Ä–æ–ª—å
const declineAllApplications = async (ctx) => {
    try {
        const roleId = parseInt(ctx.match[1]);
        
        const role = await ProjectRole.findById(roleId);
        if (!role) {
            await ctx.answerCbQuery('‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const project = await Project.findById(role.project_id);
        const managers = await ProjectManager.findByProject(role.project_id);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏
        const ExecutorApplication = require('../../db/models/ExecutorApplication');
        const applications = await ExecutorApplication.findByRole(roleId);
        const activeApplications = applications.filter(app => app.status === 'pending' || app.status === 'invited');
        
        if (activeApplications.length === 0) {
            await ctx.answerCbQuery('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
            return;
        }

        // –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏
        let declinedCount = 0;
        for (const application of activeApplications) {
            await ExecutorApplication.updateStatus(application.id, 'declined');
            declinedCount++;
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            const executorUser = await User.findById(application.executor_id);
            if (executorUser) {
                const message = application.status === 'pending' 
                    ? `‚ùå <b>–í–∞—à –æ—Ç–∫–ª–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n` +
                      `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n` +
                      `–†–æ–ª—å: <b>${role.role_name}</b>\n\n` +
                      `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –æ—Ç–∫–ª–∏–∫ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞.`
                    : `‚ùå <b>–í–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n` +
                      `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n` +
                      `–†–æ–ª—å: <b>${role.role_name}</b>\n\n` +
                      `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞.`;
                
                await ctx.telegram.sendMessage(
                    executorUser.telegram_id,
                    message,
                    { parse_mode: 'HTML' }
                );
            }
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await AuditLog.create(
            ctx.user.id,
            'ALL_APPLICATIONS_DECLINED',
            role.project_id,
            { 
                roleId: roleId,
                roleName: role.role_name,
                declinedCount: declinedCount
            }
        );

        await ctx.editMessageText(
            `‚ùå <b>–í—Å–µ –æ—Ç–∫–ª–∏–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã!</b>\n\n` +
            `–†–æ–ª—å: <b>${role.role_name}</b>\n` +
            `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n` +
            `–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –æ—Ç–∫–ª–∏–∫–æ–≤: <b>${declinedCount}</b>\n\n` +
            `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.`,
            { 
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üóë –£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', callback_data: `delete_role_${roleId}` }
                        ],
                        [
                            { text: 'üîô –ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º', callback_data: `edit_vacancies_${role.project_id}` }
                        ]
                    ]
                }
            }
        );

        await ctx.answerCbQuery(`‚úÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ ${declinedCount} –æ—Ç–∫–ª–∏–∫–æ–≤`);

    } catch (error) {
        console.error('Error in declineAllApplications:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–æ–≤');
    }
};

// –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å —Ä–æ–ª–∏
const removeAllExecutors = async (ctx) => {
    try {
        const roleId = parseInt(ctx.match[1]);
        
        const role = await ProjectRole.findById(roleId);
        if (!role) {
            await ctx.answerCbQuery('‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const project = await Project.findById(role.project_id);
        const managers = await ProjectManager.findByProject(role.project_id);
        const isManager = managers.some(m => m.manager_id === ctx.user.id && m.status === 'accepted');
        
        if (!isManager && project.customer_id !== ctx.user.id) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–æ–π —Ä–æ–ª–∏
        const projectMembers = await Project.getMembers(role.project_id);
        const roleExecutors = projectMembers.filter(member => 
            member.member_role === 'executor' && member.role_id === roleId
        );
        
        if (roleExecutors.length === 0) {
            await ctx.answerCbQuery('‚ùå –ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è');
            return;
        }

        // –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å —Ä–æ–ª–∏
        let removedCount = 0;
        for (const executor of roleExecutors) {
            // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏, –∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
            await Project.removeMemberFromRole(role.project_id, executor.id, roleId);
            removedCount++;
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
            const executorUser = await User.findById(executor.id);
            if (executorUser) {
                await ctx.telegram.sendMessage(
                    executorUser.telegram_id,
                    `‚ùå <b>–í—ã –∏—Å–∫–ª—é—á–µ–Ω—ã —Å —Ä–æ–ª–∏</b>\n\n` +
                    `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n` +
                    `–†–æ–ª—å: <b>${role.role_name}</b>\n\n` +
                    `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã —Å —ç—Ç–æ–π —Ä–æ–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞.\n` +
                    `–í–∞–∫–∞–Ω—Å–∏—è "${role.role_name}" –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞.`,
                    { parse_mode: 'HTML' }
                );
            }
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await AuditLog.create(
            ctx.user.id,
            'ALL_EXECUTORS_REMOVED',
            role.project_id,
            { 
                roleId: roleId,
                roleName: role.role_name,
                removedCount: removedCount
            }
        );

        await ctx.editMessageText(
            `üë• <b>–í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã!</b>\n\n` +
            `–†–æ–ª—å: <b>${role.role_name}</b>\n` +
            `–ü—Ä–æ–µ–∫—Ç: <b>${project.name}</b>\n` +
            `–ò—Å–∫–ª—é—á–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: <b>${removedCount}</b>\n\n` +
            `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.`,
            { 
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üóë –£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', callback_data: `delete_role_${roleId}` }
                        ],
                        [
                            { text: 'üîô –ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º', callback_data: `edit_vacancies_${role.project_id}` }
                        ]
                    ]
                }
            }
        );

        await ctx.answerCbQuery(`‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–æ ${removedCount} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π`);

    } catch (error) {
        console.error('Error in removeAllExecutors:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π');
    }
};

module.exports = {
    createProject,
    myProjects,
    projectDetails,
    startCreateProject,
    handleCreateProjectStep,
    deleteProject,
    handleDeleteConfirmation,
    performProjectDeletion,
    availableProjects,
    projectPreview,
    showProjectForExecutor,
    handleExecutorApplication,
    handleExecutorRoleSelection,
    startAddVacancies,
    handleVacancyStep,
    viewVacancies,
    editVacancies,
    viewApplications,
    acceptApplication,
    confirmAcceptApplication,
    declineApplication,
    confirmDeclineApplication,
    handleAlreadyAccepted,
    handleApplicationPending,
    handleReapplyDisabled,
    handleReapplySettings,
    handleSetReapply,
    handleRefreshProject,
    showRoleEditMenu,
    startEditRole,
    handleRoleEditStep,
    deleteRole,
    searchExecutors,
    viewExecutorProfile,
    inviteExecutor,
    acceptInvitation,
    declineInvitation,
    viewInvitations,
    acceptInvitations,
    declineInvitations,
    confirmAcceptInvitation,
    confirmDeclineInvitation,
    addAcceptedToProject,
    confirmAddToProject,
    declineAllApplications,
    removeAllExecutors,
    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
};