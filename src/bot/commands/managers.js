const { Markup } = require('telegraf');
const User = require('../../db/models/User');

async function handleManagersCommand(ctx) {
    const user = await User.findByTelegramId(ctx.from.id);
    
    if (!user) {
        return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start');
    }
    
    if (user.main_role !== 'customer') {
        return ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫–∞–º.');
    }
    
    try {
        const managers = await User.findManagersWithProfiles();
        
        if (managers.length === 0) {
            return ctx.reply('–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.');
        }
        
        await ctx.reply(
            `–ù–∞–π–¥–µ–Ω–æ ${managers.length} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:\n\n` +
            '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è:',
            createManagersKeyboard(managers)
        );
    } catch (error) {
        console.error('Error fetching managers:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.');
    }
}

function createManagersKeyboard(managers) {
    const buttons = managers.map(manager => [
        Markup.button.callback(
            `${manager.first_name} ${manager.last_name || ''}`.trim(),
            `manager_${manager.telegram_id}`
        )
    ]);
    
    return Markup.inlineKeyboard(buttons);
}

async function handleManagerProfile(ctx) {
    const data = ctx.callbackQuery.data;
    const managerTelegramId = data.replace('manager_', '');
    
    try {
        const manager = await User.findByTelegramId(managerTelegramId);
        const profile = await User.getManagerProfile(managerTelegramId);
        
        if (!manager || !profile) {
            await ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            await ctx.answerCbQuery();
            return;
        }
        
        const profileText = formatManagerProfile(manager, profile);
        
        await ctx.reply(
            profileText,
            Markup.inlineKeyboard([
                [Markup.button.callback('–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'back_to_managers')]
            ])
        );
        await ctx.answerCbQuery();
    } catch (error) {
        console.error('Error fetching manager profile:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.');
        await ctx.answerCbQuery();
    }
}

function formatManagerProfile(manager, profile) {
    let text = `üë§ *${manager.first_name} ${manager.last_name || ''}*\n`;
    
    if (manager.username) {
        text += `@${manager.username}\n`;
    }
    
    text += '\nüìã *–ü—Ä–æ—Ñ–∏–ª—å:*\n';
    
    if (profile.specialization) {
        text += `üéØ *–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:* ${profile.specialization}\n`;
    }
    
    if (profile.experience) {
        text += `‚è± *–û–ø—ã—Ç:* ${profile.experience}\n`;
    }
    
    if (profile.skills) {
        let skillsText;
        if (Array.isArray(profile.skills)) {
            skillsText = profile.skills.join(', ');
        } else if (typeof profile.skills === 'string') {
            // –ï—Å–ª–∏ –Ω–∞–≤—ã–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏—Ö —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
            try {
                const skillsArray = JSON.parse(profile.skills);
                skillsText = Array.isArray(skillsArray) ? skillsArray.join(', ') : profile.skills;
            } catch {
                skillsText = profile.skills;
            }
        } else {
            skillsText = String(profile.skills);
        }
        text += `üõ† *–ù–∞–≤—ã–∫–∏:* ${skillsText}\n`;
    }
    
    if (profile.achievements) {
        text += `üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:* ${profile.achievements}\n`;
    }
    
    if (profile.salary_range) {
        text += `üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* ${profile.salary_range}\n`;
    }
    
    if (profile.contacts) {
        text += `üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* ${profile.contacts}\n`;
    }
    
    return text;
}

async function handleBackToManagers(ctx) {
    await handleManagersCommand(ctx);
    await ctx.answerCbQuery();
}

module.exports = {
    handleManagersCommand,
    handleManagerProfile,
    handleBackToManagers
}; 