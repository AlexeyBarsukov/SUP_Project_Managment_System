const { Pool } = require('pg');
const pool = new Pool({
    host: 'localhost',
    port: 5432,
    database: 'project_management',
    user: 'postgres',
    password: 'password'
});

async function checkDatabaseStructure() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
    
    try {
        const client = await pool.connect();
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        console.log('üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
        const tablesQuery = `
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE'
            ORDER BY table_name
        `;
        const tablesResult = await client.query(tablesQuery);
        
        if (tablesResult.rows.length === 0) {
            console.log('‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        tablesResult.rows.forEach((row, index) => {
            console.log(`${index + 1}. ${row.table_name}`);
        });
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        console.log('\nüìä –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π (–∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç—ã):');
        const sequencesQuery = `
            SELECT sequence_name 
            FROM information_schema.sequences 
            WHERE sequence_schema = 'public'
            ORDER BY sequence_name
        `;
        const sequencesResult = await client.query(sequencesQuery);
        
        if (sequencesResult.rows.length === 0) {
            console.log('‚ùå –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        } else {
            sequencesResult.rows.forEach((row, index) => {
                console.log(`${index + 1}. ${row.sequence_name}`);
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        console.log('\nüìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö:');
        for (const tableRow of tablesResult.rows) {
            const tableName = tableRow.table_name;
            try {
                const countQuery = `SELECT COUNT(*) as count FROM "${tableName}"`;
                const countResult = await client.query(countQuery);
                const count = parseInt(countResult.rows[0].count);
                console.log(`üìä ${tableName}: ${count} –∑–∞–ø–∏—Å–µ–π`);
            } catch (error) {
                console.log(`‚ùå ${tableName}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ - ${error.message}`);
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        console.log('\nüèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:');
        const mainTables = ['users', 'projects', 'project_members', 'project_managers'];
        
        for (const tableName of mainTables) {
            if (tablesResult.rows.some(row => row.table_name === tableName)) {
                console.log(`\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`);
                const columnsQuery = `
                    SELECT column_name, data_type, is_nullable, column_default
                    FROM information_schema.columns 
                    WHERE table_name = $1 
                    ORDER BY ordinal_position
                `;
                const columnsResult = await client.query(columnsQuery, [tableName]);
                
                columnsResult.rows.forEach(col => {
                    const nullable = col.is_nullable === 'YES' ? 'NULL' : 'NOT NULL';
                    const defaultValue = col.column_default ? ` DEFAULT ${col.column_default}` : '';
                    console.log(`  ${col.column_name}: ${col.data_type} ${nullable}${defaultValue}`);
                });
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î:', error);
        console.error('Stack trace:', error.stack);
    } finally {
        await pool.end();
    }
}

checkDatabaseStructure(); 